{"version":3,"file":"791.3afcff552a6178cbcb09.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/versionNotification.txt","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/modules/reducers/reactions.ts","webpack://telegram-t/./src/modules/actions/api/reactions.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/common/LocalAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/CallFallbackConfirm.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\n// @ts-ignore\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n    },\n  };\n});\n\naddReducer('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddReducer('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddReducer('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddReducer('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddReducer('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddReducer('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddReducer('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddReducer('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n","export default \"**Telegram Web Z was updated to version 1.30**\\n\\n👏 **Harder**\\n• Meet Message Reactions:\\n  - React to a message with ❤️🔥🎉😁😱🤩😢👎💩🤮 in the context menu.\\n  - Send a quick 👍 reaction by hovering over the bottom corner of a message.\\n  - You can change your default reaction to another emoji in Settings > General.\\n  - Group and Channel admins can enable and control reactions via their chat's Info Page > Edit > Reactions.\\n\\n• Interactive Emoji:\\n  - Added support for all interactive emoji, including fullscreen animations and sound effects. Try 🔥, 🍆, 🍑 and more.\\n  - Animations play simultaneously when both users have the chat open.\\n  – The “is watching…” status will appear when your chat partner is also seeing the animations.\\n\\n• Manage invite links for Groups and Channels:\\n  – Enable admin approval or limited duration and users.\\n\\n🤩 **Better**\\n• Better quality for uploaded profile pictures.\\n• Various UI improvements.\\n\\n🚀 **Faster**\\n• Several optimizations for older devices – no more freezing while typing.\\n\\n💪 **Stronger**\\n• Saved Messages now correctly renders in search results.\\n• Fixed missing icons for muted chats in the chat list.\\n• The context menu no longer flickers on older devices.\\n• Fix re-scheduling messages to a previous date.\\n\";","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddReducer('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('sendMessageAction', (global, actions, payload) => {\n  (async () => {\n    const { action, chatId, threadId } = payload!;\n    if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n    const chat = selectChat(global, chatId)!;\n    if (!chat) return;\n\n    await callApi('sendMessageAction', {\n      peer: chat, threadId, action,\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global, action, payload) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadSeenBy', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSeenBy', { chat, messageId });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n      seenByUserIds: result,\n    }));\n  })();\n});\n\naddReducer('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddReducer('loadSendAs', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSendAs', { chat });\n    if (!result) {\n      global = updateChat(global, chatId, {\n        sendAsIds: [],\n      });\n      setGlobal(global);\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChat(global, chatId, {\n      sendAsIds: result.ids,\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddReducer('loadSponsoredMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSponsoredMessages', { chat });\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = updateSponsoredMessage(getGlobal(), chatId, result.messages[0]);\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    newGlobal = addChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddReducer('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  replaceUserStatuses,\n  updateUsers,\n  addUserStatuses,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n} from '../../reducers';\nimport {\n  selectUser,\n  selectChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectCountNotMutedUnread,\n  selectLastServiceNotification,\n} from '../../selectors';\nimport { isUserId } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', () => {\n  void afterSync();\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n    isSyncing: false,\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync() {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isUserId(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceUserStatuses(global, result.userStatusesById);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addUserStatuses(global, result.userStatusesById);\n\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    if (draft) {\n      acc[chatId] = draft;\n    }\n\n    return acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const result = await callApi('fetchUsers', { users });\n  if (!result) {\n    return;\n  }\n\n  const { users: updatedUsers, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, pick, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, replaceUserStatuses, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchUsers', { users: [user] });\n    if (!result) {\n      return;\n    }\n\n    const { users, userStatusesById } = result;\n\n    global = getGlobal();\n\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n    setGlobal(replaceUserStatuses(global, {\n      ...global.users.statusesById,\n      ...userStatusesById,\n    }));\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddReducer('loadContactList', () => {\n  void loadContactList();\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('loadCommonChats', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  (async () => {\n    const maxId = user.commonChats?.maxId;\n    const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n    if (!result) {\n      return;\n    }\n\n    const { chats, chatIds, isFullyLoaded } = result;\n\n    global = getGlobal();\n    if (chats.length) {\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n    }\n    global = updateUser(global, user.id, {\n      commonChats: {\n        maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n        ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n        isFullyLoaded,\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (user.phoneNumber) {\n    result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('addContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n    });\n  }\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddReducer('addContact', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  void callApi('addContact', pick(user, ['id', 'accessHash', 'firstName', 'lastName', 'phoneNumber']));\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'requestSelfContact': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots');\n    if (!result) {\n      return;\n    }\n\n    const { ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport { GlobalState } from '../../global/types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiAppConfig, ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction } from '../../reducers/reactions';\nimport { addUsers, updateChatMessage } from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\naddReducer('loadAvailableReactions', () => {\n  (async () => {\n    const result = await callApi('getAvailableReactions');\n\n    if (!result) {\n      return;\n    }\n\n    // Preload animations\n    result.forEach((availableReaction) => {\n      if (availableReaction.aroundAnimation) {\n        mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.Lottie);\n      }\n      if (availableReaction.centerIcon) {\n        mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.Lottie);\n      }\n    });\n\n    setGlobal({\n      ...getGlobal(),\n      availableReactions: result,\n    });\n  })();\n});\n\naddReducer('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      animatedEffect: emoji || localEffect,\n      x: subtractXForEmojiInteraction(global, x),\n      y,\n      startSize,\n      isReversed,\n    },\n  };\n});\n\naddReducer('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n    x, y, startX, startY, startSize,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect)) {\n    return undefined;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n\n  if (!global.activeEmojiInteraction) return undefined;\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      ...global.activeEmojiInteraction,\n      endX: subtractXForEmojiInteraction(global, x),\n      endY: y,\n      ...(startX && { x: subtractXForEmojiInteraction(global, startX) }),\n      ...(startY && { y: startY }),\n      ...(startSize && { startSize }),\n    },\n  };\n});\n\naddReducer('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n\n  if (!reaction) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddReducer('sendReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId,\n  }: { messageId: number; chatId: string } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddReducer('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddReducer('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddReducer('setDefaultReaction', (global, actions, payload) => {\n  const { reaction } = payload;\n\n  (async () => {\n    const result = await callApi('setDefaultReaction', { reaction });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      appConfig: {\n        ...global.appConfig,\n        defaultReaction: reaction,\n      } as ApiAppConfig,\n    });\n  })();\n});\n\naddReducer('stopActiveEmojiInteraction', (global) => {\n  return {\n    ...global,\n    activeEmojiInteraction: undefined,\n  };\n});\n\naddReducer('loadReactors', (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n\n  (async () => {\n    const result = await callApi('fetchMessageReactionsList', {\n      reaction,\n      chat,\n      messageId,\n      offset,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    if (result.users?.length) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    }\n\n    const { nextOffset, count, reactions } = result;\n\n    setGlobal(updateChatMessage(global, chatId, messageId, {\n      reactors: {\n        nextOffset,\n        count,\n        reactions: [\n          ...(message.reactors?.reactions || []),\n          ...reactions,\n        ],\n      },\n    }));\n  })();\n});\n\naddReducer('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddReducer('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteraction) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      ...global.activeEmojiInteraction,\n      x: subtractXForEmojiInteraction(global, x),\n      y,\n      startSize,\n      isReversed,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutNewMessage } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), 500, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      setGlobal(leaveChat(global, update.id));\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n      notifyAboutNewMessage({\n        chat,\n        message,\n      });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport { getMessageContent, isUserId, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (global.activeEmojiInteraction || currentChatId !== update.id) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteraction: {\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction,\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const currentReactions = message?.reactions;\n\n      // `updateMessageReactions` happens with an interval so we try to avoid redundant global state updates\n      if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n        return;\n      }\n\n      setGlobal(updateChatMessage(global, chatId, id, { reactions: update.reactions }));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer, getGlobal } from '../../../lib/teact/teactn';\nimport { ApiUpdate } from '../../../api/types';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(global, groupCallId, participant.id, participant,\n            !!nextOffset || currentUserId === participant.id);\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {() => connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ISettings, LeftColumnContent } from '../../../types';\nimport { ApiChat } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../modules/selectors';\nimport { isChatArchived } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    isMessageListOpen: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isConnectionStatusMinimized,\n  isMessageListOpen,\n}) => {\n  const {\n    openChat,\n    openTipsChat,\n    setGlobalSearchDate,\n    setSettingOption, setGlobalSearchChatId,\n  } = getDispatch();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized,\n  );\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          {() => (\n            <ConnectionStatusOverlay\n              connectionStatus={connectionStatus}\n              connectionStatusText={connectionStatusText!}\n              onClick={toggleConnectionStatus}\n            />\n          )}\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isConnectionStatusMinimized,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n    };\n  },\n)(LeftMainHeader));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  allListIds: GlobalState['chats']['listIds'];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  allListIds,\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  foldersDispatch,\n  onScreenSelect,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(allListIds, chatsById, usersById, folder, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, allListIds, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats'), id: ALL_FOLDER_ID },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById?.[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { listIds: allListIds, byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      allListIds,\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default function useThrottledMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && e.shiftKey && getKeyFromEvent(e) === 'f') {\n        e.preventDefault();\n        setContent(LeftColumnContent.GlobalSearch);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [content]);\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport const useResize = (\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) => {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  const handleMouseUp = () => {\n    document.body.classList.remove('no-selection', 'cursor-ew-resize');\n  };\n\n  const initResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    document.body.classList.add('no-selection', 'cursor-ew-resize');\n\n    setInitialMouseX(event.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  };\n\n  const resetResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  };\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + event.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    const stopDrag = () => {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      onResize(elementRef.current!.offsetWidth);\n      unmarkIsActive();\n    };\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_MAC_OS, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    openCallFallbackConfirm,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  useEffect(() => {\n    if (!canSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (\n        IS_PWA && ((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && !e.shiftKey && getKeyFromEvent(e) === 'f'\n      ) {\n        e.preventDefault();\n        handleSearchClick();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [canSearch, handleSearchClick]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={openCallFallbackConfirm}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n) {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nexport default (message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getDispatch();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n    setAudioPlayerMuted({ isMuted: false });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerMuted, setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../modules/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalState, MessageListType } from '../../global/types';\nimport {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser, MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCountNotMutedUnread,\n  selectForwardedSender,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable) {\n      return undefined;\n    }\n\n    return selectCountNotMutedUnread(getGlobal()) || undefined;\n  }, [isLeftColumnHideable]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && unreadCount && (\n          <div className=\"unread-count active\">\n            {formatIntegerCompact(unreadCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && !!renderingPinnedMessage)\n          || (shouldRenderAudioPlayer && !!renderingAudioMessage)\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import { RefObject } from 'react';\nimport React, { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getDispatch();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]')) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        id={id}\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ActiveReaction } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getDispatch();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId, ApiMediaFormat.Lottie);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId, ApiMediaFormat.Lottie);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            id={`reaction_emoji_${centerIconId}`}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            animationData={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            id={`reaction_effect_${effectId}`}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            animationData={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && message.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openUserInfo } = getDispatch();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getDispatch();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getDispatch();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../modules/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getDispatch();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getDispatch();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getDispatch();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import React, {\n  FC, memo, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from './helpers/animatedAssets';\nimport useAnimatedEmoji from './hooks/useAnimatedEmoji';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nconst QUALITY = 1;\n\ntype OwnProps = {\n  localSticker?: string;\n  localEffect?: string;\n  isOwn?: boolean;\n  soundId?: string;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\nconst LocalAnimatedEmoji: FC<OwnProps> = ({\n  localSticker,\n  localEffect,\n  isOwn,\n  soundId,\n  size = 'medium',\n  observeIntersection,\n  messageId,\n  chatId,\n  activeEmojiInteraction,\n}) => {\n  const {\n    playKey,\n    ref,\n    style,\n    width,\n    handleClick,\n    markAnimationLoaded,\n  } = useAnimatedEmoji(size, chatId, messageId, soundId, activeEmojiInteraction, isOwn, localEffect);\n  const id = `local_emoji_${localSticker}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [localStickerAnimationData, setLocalStickerAnimationData] = useState<string>();\n  useEffect(() => {\n    if (localSticker) {\n      getAnimationData(localSticker as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalStickerAnimationData(data);\n      });\n    }\n  }, [localSticker]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      // @ts-ignore teact feature\n      style={style}\n      onClick={handleClick}\n    >\n      {localStickerAnimationData && (\n        <AnimatedSticker\n          key={id}\n          id={id}\n          animationData={localStickerAnimationData}\n          size={width}\n          quality={QUALITY}\n          play={isIntersecting && playKey}\n          forceOnHeavyAnimation\n          noLoop\n          onLoad={markAnimationLoaded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(LocalAnimatedEmoji);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectMessageIdsByGroupId,\n  selectLocalAnimatedEmoji,\n  selectIsMessageProtected,\n  selectLocalAnimatedEmojiEffect,\n  selectDefaultReaction,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport LocalAnimatedEmoji from '../../common/LocalAnimatedEmoji';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  localSticker?: string;\n  localEffect?: string;\n  animatedEmojiEffect?: ApiSticker;\n  animatedEmojiSoundId?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  localSticker,\n  localEffect,\n  animatedEmojiEffect,\n  animatedEmojiSoundId,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteraction,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickInlineButton,\n    disableContextMenuHint,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = localSticker || animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && defaultReaction && !isInDocumentGroupNotLast;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n\n  let metaPosition!: MetaPosition;\n  if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            sticker={animatedEmoji}\n            effect={animatedEmojiEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        )}\n        {localSticker && (\n          <LocalAnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            localSticker={localSticker}\n            localEffect={localEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const localSticker = singleEmoji ? selectLocalAnimatedEmoji(global, singleEmoji) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender: canShowSender ? sender : undefined,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      animatedEmojiEffect: singleEmoji && isUserId(chatId) ? selectAnimatedEmojiEffect(global, singleEmoji) : undefined,\n      animatedEmojiSoundId: singleEmoji ? selectAnimatedEmojiSound(global, singleEmoji) : undefined,\n      localSticker,\n      localEffect: localSticker && isUserId(chatId) ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: selectDefaultReaction(global, chatId),\n      activeReaction: global.activeReactions[id],\n      activeEmojiInteraction: global.activeEmojiInteraction,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isUserId(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else if (isUserId(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, openUserInfo, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../modules/selectors';\nimport { getChatTitle, getUserFullName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getDispatch();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  const handleClick = () => {\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getDispatch } from '../../lib/teact/teactn';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getDispatch();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../modules/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n}) => {\n  const { focusNextReply } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items)\n        .find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type) && item.kind === 'file');\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      e.preventDefault();\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getDispatch();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useState } from '../lib/teact/teact';\n\nimport useDebounce from './useDebounce';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const runDebounced = useDebounce(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickInlineButton } = getDispatch();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getDispatch();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../modules/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getDispatch();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE, SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n  selectUser,\n  selectUserStatus,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isUserId,\n  isChatAdmin,\n  isChatSuperGroup,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport Avatar from '../../common/Avatar';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    isPollModalOpen?: boolean;\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    serverTimeOffset: number;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n  } = getDispatch();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal);\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        openCalendar();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? openCalendar\n      : handleSend;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: Boolean(\n        !isChatWithSelf && !isChatWithBot && chat && chatUser\n        && isUserId(chatId) && selectUserStatus(global, chatId)?.wasOnline,\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n    };\n  },\n)(Composer));\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n) => {\n  const { editMessage } = getDispatch();\n\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { emojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(Bundles.Extra, 'EmojiInteractionAnimation', !emojiInteraction);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport {\n  MessageListType,\n  MessageList as GlobalMessageList,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteraction,\n}) => {\n  const {\n    openChat,\n    unpinAllMessages,\n    loadUser,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    animationLevel, currentTransitionKey, prevTransitionKey, chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    withBottomShift={withMessageListBottomShift}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleStartBot}\n                        >\n                          {lang('BotStart')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleRestartBot}\n                        >\n                          {lang('BotRestart')}\n                        </Button>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                    <SeenByModal isOpen={isSeenByModalOpen} />\n                    <ReactorListModal isOpen={isReactorListModalOpen} />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      {activeEmojiInteraction && (\n        <EmojiInteractionAnimation emojiInteraction={activeEmojiInteraction} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds }, activeEmojiInteraction } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      activeEmojiInteraction,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isUserId(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  animationLevel?: number,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (animationLevel !== ANIMATION_LEVEL_MIN) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: animationLevel !== ANIMATION_LEVEL_MIN ? handleOpenEnd : undefined,\n    handleSlideStop: animationLevel !== ANIMATION_LEVEL_MIN ? handleSlideStop : undefined,\n  };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  shouldSkipAnimation,\n  isEditingInvite,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar, addContact,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    addContact({ userId });\n  }, [addContact, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n\n    return {\n      canManage,\n      canAddContact,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../modules/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  userId?: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    openUserInfo,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, loadCommonChats, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    commonChatIds, usersById, userStatusesById, chatsById, chatMessages, foundIds, chatId, lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n    }\n    if (resolvedUserId) {\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getDispatch();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  currentProfileUserId?: string;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    openUserInfo,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n            setManagementScreen(ManagementScreens.Invites);\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../modules/helpers';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessageMediaDownload } = getDispatch();\n\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  groupCallId?: string;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !groupCallId);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst CallFallbackConfirmAsync: FC<OwnProps> = ({ isOpen }) => {\n  const CallFallbackConfirm = useModuleLoader(Bundles.Calls, 'CallFallbackConfirm', !isOpen);\n\n  return CallFallbackConfirm ? <CallFallbackConfirm isOpen={isOpen} /> : undefined;\n};\n\nexport default memo(CallFallbackConfirmAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { LangCode } from '../../types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport CallFallbackConfirm from '../calls/CallFallbackConfirm.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isCallFallbackConfirmOpen: boolean;\n  addedSetIds?: string[];\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  isCallFallbackConfirmOpen,\n  addedSetIds,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n  } = getDispatch();\n  const isSynced = Boolean(lastSyncTime);\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isSynced) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [isSynced, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && (\n        <>\n          <GroupCall groupCallId={activeGroupCallId} />\n          <ActiveCallHeader groupCallId={activeGroupCallId} />\n        </>\n      )}\n      <DownloadManager />\n      <CallFallbackConfirm isOpen={isCallFallbackConfirmOpen} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isCallFallbackConfirmOpen: Boolean(global.groupCalls.isFallbackConfirmOpen),\n      addedSetIds: global.stickers.added.setIds,\n    };\n  },\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","message","byChatId","activeDownloads","filter","map","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","join","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","text","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","leftColumnWidth","management","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","result","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","Promise","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","sort","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","setsById","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","getDispatch","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","loadAndReplaceArchivedChats","CHAT_LIST_LOAD_SLICE","archived","withPinned","updateUsers","addUserStatuses","userStatusesById","updateChats","replaceChatListIds","updateChatListSecondaryInfo","loadAndUpdateUsers","contactIds","contactList","updatedUsers","loadTopMessages","afterSyncCallback","DEBUG","console","log","isSyncing","savedUsers","lastLocalServiceMessage","selectLastServiceNotification","savedPrivateChatIds","savedChats","currentChatId","selectedChat","isUserId","selectedChatUser","replaceUserStatuses","replaceChats","draftsById","replyingToById","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","reduce","acc","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","Array","prototype","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","all","updateAppBadge","selectCountNotMutedUnread","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userId","statusesById","topPeers","lastRequestedAt","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","updateChatMutedState","phoneNumber","phone","updateContact","deleteContact","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","pick","runDebouncedForSearch","sendBotCommand","command","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","interactions","startX","startY","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","endX","endY","reaction","selectDefaultReaction","sendReaction","reactions","some","isChosen","animationLevel","settings","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","appConfig","defaultReaction","reactors","runThrottledForUpdateAppBadge","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","listType","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutNewMessage","messageUpdate","channelId","selectCommonBoxChatId","targetChat","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","photo","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","delayedGlobal","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","currentReactions","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","privacy","key","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","ConnectionStatus","useConnectionStatus","lang","hasMiddleHeader","isMinimized","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","replace","connectionStatus","connectionStatusPosition","connectionStatusText","memo","onClick","useLang","dir","isRtl","Spinner","color","className","Transition","activeKey","name","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","theme","selectTheme","isMessageListOpen","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","ripple","ariaLabel","buildClassName","handleSearchFocus","useCallback","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","langCode","href","FEEDBACK_URL","setPermanentWebVersion","clearWebsync","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","allListIds","usersById","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","useThrottle","setValue","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","useThrottledMemo","folderTabs","ALL_FOLDER_ID","handleSwitchTab","forceOnHeavyAnimation","current","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","IS_MAC_OS","metaKey","getKeyFromEvent","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","style","remove","handleMouseMove","event","newWidth","ceil","clientX","stopDrag","offsetWidth","add","useResize","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","handleResize","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canExpandActions","joinChannel","openLocalTextSearch","restartBot","openCallFallbackConfirm","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","focus","searchInput","IS_PWA","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","onload","scale","blob","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","Error","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","groupCall","selectChatGroupCall","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderInfo","renderBackButton","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","formatIntegerCompact","isAudioPlayerRendered","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","animationData","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","views","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","mediaHash","getMessageMediaFormat","isMediaLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","canAutoLoad","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","safePlay","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","openUserInfo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","currentOnRelease","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","recentReplierIds","recentRepliers","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","localSticker","soundId","playKey","useAnimatedEmoji","localStickerAnimationData","setLocalStickerAnimationData","getAnimationData","quality","APPENDIX_OWN","__html","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","selectIsDownloading","actualThreadInfo","isInDocumentGroup","documentGroupFirstMessageId","reactionMessage","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","animatedEmojiEffect","selectAnimatedEmojiEffect","animatedEmojiSoundId","selectAnimatedEmojiSound","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoLoadMedia","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","clickInlineButton","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","withCommentButton","withQuickReactionButton","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","effect","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","dangerouslySetInnerHTML","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","getUserFullName","chatInviteTitle","chatInviteHash","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","throttleMs","margin","freezeForReading","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","useInterval","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","useDebouncedMemo","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","CalendarModal","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","SendAsMenu","MainButtonState","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","editingMessage","canScheduleUntilOnline","selectUserStatus","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","appendixRef","html","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","canShowSendAs","sendMessageAction","useSendMessageAction","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachMedia","canAttachPolls","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","editMessage","hasMessageMedia","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","items","kind","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","emojiInteraction","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","ANIMATION_LEVEL_MIN","propertyName","useIsReady","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canAddContact","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","shouldSkipAnimation","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","addContact","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","handleAddContact","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","renderingContentKey","renderHeaderContent","autoFocusSearch","isBackButton","buttonClassName","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","memberId","handler","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setEditingExportedInvite","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","CallFallbackConfirm","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isCallFallbackConfirmOpen","isFallbackConfirmOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","isSynced","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}