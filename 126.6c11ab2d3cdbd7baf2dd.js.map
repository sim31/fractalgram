{"version":3,"file":"126.6c11ab2d3cdbd7baf2dd.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/hooks/useTimeout.ts","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/SlideTransition.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/common/ReportMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/systemFilesDialog.ts","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helper/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../modules/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getDispatch();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message });\n    } else {\n      downloadMessageMedia({ message });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nconst formatFileSize = (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n\nexport default formatFileSize;\n","import React, {\n  FC, useState, useEffect, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeeking.current && seekerRef.current) {\n      const { width, left } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeeking.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const isActive = isVisible || isForceVisible;\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isActive && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedProgress, seekerRef)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(loadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * loadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedProgress: number, seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Button from '../ui/Button';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setIsControlsVisible(false);\n      }\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif && !IS_TOUCH_ENV ? handleMouseOver : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration || 0 : 0}\n          isForceVisible={isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport {\n  getChatAvatarHash,\n  getMessageDocument,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../modules/helpers';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../modules/selectors';\nimport { AVATAR_FULL_DIMENSIONS, calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isFooterHidden?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    messageId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    profilePhotoIndex,\n    origin,\n    animationLevel,\n    onClose,\n    onFooterClick,\n    isFooterHidden,\n    isProtected,\n  } = props;\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n\n  const isOpen = Boolean(avatarOwner || messageId);\n  const isAvatar = Boolean(avatarOwner);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  if (isAvatar) {\n    return (\n      <div key={chatId} className=\"MediaViewerContent\">\n        {renderPhoto(\n          fullMediaBlobUrl || previewBlobUrl,\n          calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n          !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        )}\n      </div>\n    );\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={`MediaViewerContent ${hasFooter ? 'has-footer' : ''}`}\n    >\n      {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      )}\n      {isVideo && ((!isActive && IS_TOUCH_ENV) ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, false),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      ) : (\n        <VideoPlayer\n          key={messageId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, false)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          onClose={onClose}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isHidden={isFooterHidden}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = ownProps;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return {};\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return {};\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return {};\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return {};\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MediaViewerOrigin } from '../../types';\n\nimport useDebounce from '../../hooks/useDebounce';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport arePropsShallowEqual from '../../util/arePropsShallowEqual';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD, RealTouchEvent } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\nimport useTimeout from '../../hooks/useTimeout';\n\ntype OwnProps = {\n  messageId?: number;\n  getMessageId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMessage: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  isActive?: boolean;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isZoomed?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = 40;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 0.6;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_X_THRESHOLD = 40;\nlet cancelAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  messageId,\n  getMessageId,\n  selectMessage,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  isActive,\n  hasFooter,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const [activeMessageId, setActiveMessageId] = useState<number | undefined>(messageId);\n  const forceUpdate = useForceUpdate();\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(true);\n\n  const {\n    isZoomed,\n    onClose,\n  } = rest;\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const setIsActive = useCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const debounceSetMessage = useDebounce(DEBOUNCE_MESSAGE, true);\n  const debounceSwipeDirection = useDebounce(DEBOUNCE_SWIPE, true);\n  const debounceActive = useDebounce(DEBOUNCE_ACTIVE, true);\n\n  const handleToggleFooterVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV || !hasFooter || (!isPhoto && !isGif)) return;\n    if (e.pageX < CLICK_X_THRESHOLD) return;\n    if (e.pageX > window.innerWidth - CLICK_X_THRESHOLD) return;\n    setIsFooterHidden(!isFooterHidden);\n  }, [hasFooter, isFooterHidden, isGif, isPhoto]);\n\n  useTimeout(() => setIsFooterHidden(false), ANIMATION_DURATION - 150);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !containerRef.current || isZoomed || !activeMessageId) {\n      return undefined;\n    }\n    let lastTransform = { x: 0, y: 0, scale: 1 };\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (e: MouseEvent) => {\n      if (transformRef.current.scale !== 1) return false;\n      let direction = 0;\n      if (e.pageX < CLICK_X_THRESHOLD) {\n        direction = -1;\n      } else if (e.pageX > window.innerWidth - CLICK_X_THRESHOLD) {\n        direction = 1;\n      }\n      const mId = getMessageId(activeMessageId, direction);\n      if (mId) {\n        const offset = (window.innerWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMessageId(mId);\n        debounceSetMessage(() => selectMessage(mId));\n        debounceActive(() => {\n          setIsActive(true);\n        });\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n      }\n      return direction !== 0;\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      excludedClosestSelector: '.VideoPlayerControls, .MediaViewerFooter',\n      onCapture: () => {\n        lastGestureTime = Date.now();\n        if (arePropsShallowEqual(transformRef.current, { x: 0, y: 0, scale: 1 })) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }) => {\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS) {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= window.innerWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const h = 10;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: lastTransform.x + dragOffsetX,\n              y: lastTransform.y + dragOffsetY,\n              scale,\n            });\n          }\n          return;\n        }\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > h || (absOffsetX > h && absOffsetY < h)) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            setTransform({\n              x: dragOffsetX,\n              y: 0,\n              scale,\n            });\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > h || (absOffsetY > h && absOffsetX < h)) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          setTransform({\n            x: 0,\n            y: dragOffsetY,\n            scale,\n          });\n        }\n      },\n      onZoom: (e, {\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        // Calculate current scale based on zoom factor and limits, add max zoom margin for bounce back effect\n        const scale = Math.min(MAX_ZOOM * 3, Math.max(lastTransform.scale * zoomFactor, MIN_ZOOM));\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        setTransform({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n      },\n      onClick(e) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n          return undefined;\n        }\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return undefined;\n          lastTransform = {\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          };\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        return animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n      },\n      onRelease: () => {\n        const absX = Math.abs(transformRef.current.x);\n        const absY = Math.abs(transformRef.current.y);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n\n        debounceSwipeDirection(() => {\n          swipeDirectionRef.current = undefined;\n        });\n        debounceActive(() => {\n          setIsActive(true);\n        });\n\n        // If scale is less than 1 we need to bounce back\n        if (scale < 1) {\n          lastTransform = { x: 0, y: 0, scale: 1 };\n          return animateNumber({\n            from: [x, y, scale],\n            to: [0, 0, 1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n        }\n        if (scale > 1) {\n          if (!content || !initialContentRect) {\n            lastTransform = {\n              x,\n              y,\n              scale,\n            };\n            return undefined;\n          }\n          // Get current content boundaries\n          const boundaries = content.getBoundingClientRect();\n          const s1 = Math.min(scale, MAX_ZOOM);\n          const scaleFactor = s1 / scale;\n\n          // Calculate new position based on the last zoom center to keep the zoom center\n          // at the same position when bouncing back from max zoom\n          let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n          let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n          // Arbitrary pan velocity coefficient\n          const k = 0.15;\n\n          // If scale didn't change, we need to add inertia to pan gesture\n          if (lastTransform.scale === scale) {\n            // Calculate user gesture velocity\n            const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n            const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n            // Add extra distance based on gesture velocity and last pan delta\n            x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n            y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n          }\n\n          // If content is outside window we calculate offset boundaries\n          // based on initial content rect and current scale\n          if (boundaries.width > window.innerWidth) {\n            const minOffsetX = -initialContentRect.left * s1;\n            const maxOffsetX = window.innerWidth - initialContentRect.right * s1;\n            x1 = Math.min(minOffsetX, Math.max(maxOffsetX, x1));\n          } else {\n            // Else we center the content on the screen\n            x1 = (window.innerWidth - window.innerWidth * s1) / 2;\n          }\n\n          if (boundaries.height > window.innerHeight) {\n            const minOffsetY = -initialContentRect.top * s1;\n            const maxOffsetY = window.innerHeight - initialContentRect.bottom * s1;\n            y1 = Math.min(minOffsetY, Math.max(maxOffsetY, y1));\n          } else {\n            y1 = (window.innerHeight - window.innerHeight * s1) / 2;\n          }\n          lastTransform = {\n            x: x1,\n            y: y1,\n            scale: s1,\n          };\n          cancelAnimation = animateNumber({\n            from: [x, y, scale],\n            to: [x1, y1, s1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n          return undefined;\n        }\n        lastTransform = {\n          x,\n          y,\n          scale,\n        };\n        if (absY >= SWIPE_Y_THRESHOLD) return onClose();\n        // Bounce back if vertical swipe is below threshold\n        if (absY > 0) {\n          return animateNumber({\n            from: y,\n            to: 0,\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: 0,\n              y: value,\n              scale,\n            }),\n          });\n        }\n        // Get horizontal swipe direction\n        const direction = x < 0 ? 1 : -1;\n        const mId = getMessageId(activeMessageId, x < 0 ? 1 : -1);\n        // Get the direction of the last pan gesture.\n        // Could be different from the total horizontal swipe direction\n        // if user starts a swipe in one direction and then changes the direction\n        // we need to cancel slide transition\n        const dirX = panDelta.x < 0 ? -1 : 1;\n        if (mId && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n          const offset = (window.innerWidth + SLIDES_GAP) * direction;\n          // If image is shifted by more than SWIPE_X_THRESHOLD,\n          // We shift everything by one screen width and then set new active message id\n          transformRef.current.x += offset;\n          setActiveMessageId(mId);\n          debounceSetMessage(() => selectMessage(mId));\n        }\n        // Then we always return to the original position\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: transformRef.current.scale,\n          }),\n        });\n        return undefined;\n      },\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    isZoomed,\n    onClose,\n    setTransform,\n    getMessageId,\n    activeMessageId,\n    setIsActive,\n  ]);\n\n  if (!activeMessageId) return undefined;\n\n  const nextMessageId = getMessageId(activeMessageId, 1);\n  const previousMessageId = getMessageId(activeMessageId, -1);\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {previousMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-window.innerWidth + offsetX - SLIDES_GAP)}>\n          {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n          <MediaViewerContent {...rest} messageId={previousMessageId} isFooterHidden={isFooterHidden} />\n        </div>\n      )}\n      {activeMessageId && (\n        <div\n          className={`MediaViewerSlide ${isActive ? 'MediaViewerSlide--active' : ''}`}\n          onClick={handleToggleFooterVisibility}\n          ref={activeSlideRef}\n          style={getAnimationStyle(offsetX, offsetY, scale)}\n        >\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={activeMessageId}\n            isActive={isActive && isActiveRef.current}\n            isFooterHidden={isFooterHidden || isZoomed || scale !== 1}\n          />\n        </div>\n      )}\n      {nextMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(window.innerWidth + offsetX + SLIDES_GAP)}>\n          {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n          <MediaViewerContent {...rest} messageId={nextMessageId} isFooterHidden={isFooterHidden} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n","import { useEffect, useLayoutEffect, useRef } from '../lib/teact/teact';\n\nfunction useTimeout(callback: () => void, delay: number | null) {\n  const savedCallback = useRef(callback);\n\n  useLayoutEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (typeof delay !== 'number') {\n      return undefined;\n    }\n    const id = setTimeout(() => savedCallback.current(), delay);\n    return () => clearTimeout(id);\n  }, [delay]);\n}\n\nexport default useTimeout;\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.Transition__slide--active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getDispatch();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import React, { FC } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Transition, { TransitionProps } from '../ui/Transition';\n\nconst SlideTransition: FC<TransitionProps> = ({ children, ...props }) => {\n  if (IS_TOUCH_ENV) return children(true, true, 1);\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Transition {...props}>{children}</Transition>;\n};\n\nexport default SlideTransition;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../hooks/usePrevious';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureEvents } from '../../util/captureEvents';\nimport windowSize from '../../util/windowSize';\nimport { AVATAR_FULL_DIMENSIONS, MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport PanZoom from './PanZoom';\nimport SenderInfo from './SenderInfo';\nimport SlideTransition from './SlideTransition';\nimport ZoomControls from './ZoomControls';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageId?: number;\n  senderId?: string;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getDispatch();\n\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const { isGif } = video || webPageVideo || {};\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const singleMessageId = webPagePhoto || webPageVideo ? messageId : undefined;\n\n  const messageIds = useMemo(() => {\n    return singleMessageId\n      ? [singleMessageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [singleMessageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 && !IS_TOUCH_ENV ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({\n    x: 0,\n    y: 0,\n  });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({\n      x: 0,\n      y: 0,\n    });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({\n        x: 0,\n        y: 0,\n      });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  }, [close, chatId, threadId, focusMessage, toggleChatInfo, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId,\n      messageIds: [messageId],\n    });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  const selectMessage = useCallback((id?: number) => openMediaViewer({\n    chatId,\n    threadId,\n    messageId: id,\n    origin,\n  }, {\n    forceOnHeavyAnimation: true,\n  }), [chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (!fromId) return undefined;\n    const index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      return messageIds[index + direction];\n    }\n    return undefined;\n  }, [messageIds]);\n\n  const nextMessageId = getMessageId(messageId, 1);\n  const previousMessageId = getMessageId(messageId, -1);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({\n      x,\n      y,\n    });\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectMessage(previousMessageId);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectMessage(nextMessageId);\n          break;\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [isOpen, nextMessageId, previousMessageId, selectMessage]);\n\n  useEffect(() => {\n    if (isZoomed || IS_TOUCH_ENV) return undefined;\n    const element = document.querySelector<HTMLDivElement>('.MediaViewerSlide--active');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .Spoiler, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: close,\n    });\n  }, [close, isGif, isZoomed, messageId]);\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaBlobUrl || previewBlobUrl}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={isAvatar}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <SlideTransition\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {(isActive: boolean) => (\n                <MediaViewerSlides\n                  messageId={messageId}\n                  getMessageId={getMessageId}\n                  chatId={chatId}\n                  isPhoto={isPhoto}\n                  isGif={isGif}\n                  threadId={threadId}\n                  avatarOwnerId={avatarOwner && avatarOwner.id}\n                  profilePhotoIndex={profilePhotoIndex}\n                  origin={origin}\n                  isOpen={isOpen}\n                  hasFooter={hasFooter}\n                  isZoomed={isZoomed}\n                  isActive={isActive}\n                  isVideo={isVideo}\n                  animationLevel={animationLevel}\n                  onClose={close}\n                  selectMessage={selectMessage}\n                  onFooterClick={handleFooterClick}\n                />\n              )}\n            </SlideTransition>\n          </PanZoom>\n          {!isFirst && !IS_TOUCH_ENV && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={() => selectMessage(previousMessageId)}\n            />\n          )}\n          {!isLast && !IS_TOUCH_ENV && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={() => selectMessage(nextMessageId)}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n)(MediaViewer));\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../modules/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  loadMore?: NoneToVoidFunction;\n  onFilterChange: (filter: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  loadMore,\n  onFilterChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  const resetFilter = useCallback(() => {\n    onFilterChange('');\n  }, [onFilterChange]);\n  useInputFocusOnOpen(filterRef, isOpen, resetFilter);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  sortChatIds,\n} from '../../modules/helpers';\nimport { unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\nconst ForwardPicker: FC<OwnProps & StateProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  currentUserId,\n  isOpen,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n  } = getDispatch();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const chatAndContactIds = useMemo(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, filter, currentUserId),\n      ...(contactIds ? filterUsersByName(contactIds, usersById, filter) : []),\n    ]), chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, contactIds, currentUserId, filter, isOpen, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    setForwardChatId({ id: userId });\n  }, [setForwardChatId]);\n\n  const renderingChatAndContactIds = useCurrentOrPrev(chatAndContactIds, true)!;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={renderingChatAndContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={exitForwardMode}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(ForwardPicker));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getDispatch();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button className=\"confirm-dialog-button\" isText onClick={handleConfirm}>{lang('OK')}</Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getDispatch();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getDispatch } from '../../lib/teact/teactn';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getDispatch();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url));\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay();\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getDispatch();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getDispatch();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getDispatch();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch } from '../../lib/teact/teactn';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\nconst ReportMessageModal: FC<OwnProps> = ({\n  isOpen,\n  messageIds,\n  onClose,\n}) => {\n  const {\n    reportMessages,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(ReportMessageModal);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n  } = getDispatch();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../modules/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title=\"Which users read the message\"\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../modules/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { getUserFullName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getDispatch();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-reaction-filled\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const fullName = getUserFullName(user);\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"medium\" />\n                    <div className=\"title\">\n                      <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n                    </div>\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n    };\n  },\n)(ReactorListModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../modules/selectors';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  emojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n  isReversed?: boolean;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 240;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  emojiInteraction,\n  effectAnimationId,\n  localEffectAnimation,\n  isReversed,\n}) => {\n  const { stopActiveEmojiInteraction } = getDispatch();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n\n  const stop = useCallback(() => {\n    startHiding();\n    setTimeout(() => {\n      stopActiveEmojiInteraction();\n    }, HIDE_ANIMATION_DURATION);\n  }, [startHiding, stopActiveEmojiInteraction]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', stop);\n    document.addEventListener('touchmove', stop);\n    document.addEventListener('mousedown', stop);\n    document.addEventListener('wheel', stop);\n\n    return () => {\n      document.removeEventListener('touchstart', stop);\n      document.removeEventListener('touchmove', stop);\n      document.removeEventListener('mousedown', stop);\n      document.removeEventListener('wheel', stop);\n    };\n  }, [stop]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectAnimationData = useMedia(`sticker${effectAnimationId}`, !effectAnimationId, ApiMediaFormat.Lottie);\n\n  const [localEffectAnimationData, setLocalEffectAnimationData] = useState<string | undefined>();\n  useEffect(() => {\n    if (localEffectAnimation) {\n      getAnimationData(localEffectAnimation as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalEffectAnimationData(data);\n      });\n    }\n  }, [localEffectAnimation]);\n\n  const scale = (emojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation', isHiding && 'hiding', isPlaying && 'playing', isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${emojiInteraction.x}px; --start-y: ${emojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        id={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        animationData={localEffectAnimationData || effectAnimationData}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { emojiInteraction }): StateProps => {\n    const animatedEffect = emojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, emojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && emojiInteraction.animatedEffect\n      && Object.keys(ANIMATED_STICKERS_PATHS).includes(emojiInteraction.animatedEffect)\n        ? emojiInteraction.animatedEffect : undefined,\n      isReversed: emojiInteraction.isReversed,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, loadContactList, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getDispatch();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getDispatch();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getDispatch();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getDispatch();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    deleteChatFolder,\n  } = getDispatch();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  lastSyncTime,\n}) => {\n  const { loadProfilePhotos } = getDispatch();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n    checkUsername,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n)(SettingsEditProfile));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens, ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getDispatch();\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ canAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ canAutoPlayVideos: isChecked })}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n};\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onScreenSelect,\n  onReset,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    showDialog,\n  } = getDispatch();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [orderedFolderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n    };\n  },\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getDispatch();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(\n    isActive, onReset, onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats,\n  );\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n  const isGif = stickerSet.isGifs;\n\n  const firstLetters = useMemo(() => {\n    if ((isGif && !IS_WEBM_SUPPORTED) || !mediaData) return getFirstLetters(stickerSet.title, 2);\n  }, [isGif, mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {isGif ? (\n        <video src={mediaData} className={transitionClassNames} loop autoPlay />\n      ) : (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens, ISettings, TimeFormat } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup, { IRadioOption } from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'shouldSuggestStickers' |\n    'shouldLoopStickers' |\n    'timeFormat'\n  )> & {\n    stickerSetIds?: string[];\n    stickerSetsById?: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  defaultReaction,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  timeFormat,\n}) => {\n  const {\n    setSettingOption,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n    };\n  },\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getDispatch();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getDispatch();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport useDebounce from '../../../hooks/useDebounce';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getDispatch();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useDebounce(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasWebNotifications: e.target.checked });\n          }}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasPushNotifications: e.target.checked });\n          }}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={(volume) => {\n              updateWebNotificationSettings({ notificationSoundVolume: volume });\n              runDebounced(() => playNotifySound(undefined, volume));\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => {\n            handleSettingsChange(e, 'contact', 'silent');\n          }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => {\n            handleSettingsChange(e, 'contact', 'showPreviews');\n          }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => {\n            handleSettingsChange(e, 'group', 'silent');\n          }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => {\n            handleSettingsChange(e, 'group', 'showPreviews');\n          }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => {\n            handleSettingsChange(e, 'broadcast', 'silent');\n          }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => {\n            handleSettingsChange(e, 'broadcast', 'showPreviews');\n          }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n  } = getDispatch();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber?.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen?.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto?.visibility,\n      visibilityPrivacyForwarding: privacy.forwards?.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite?.visibility,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getDispatch();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getDispatch();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n}) => {\n  const {\n    loadAuthorizations,\n    terminateAuthorization,\n    terminateAllAuthorizations,\n  } = getDispatch();\n\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive className=\"no-icon\">\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        className=\"no-icon\"\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../modules/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadContactList,\n    setUserSearchQuery,\n    blockContact,\n  } = getDispatch();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, filter)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadContactList}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getDispatch();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getDispatch();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isChatGroup, isUserId } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helper/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getDispatch();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        return chat && ((isUserId(chat.id) && chat.id !== currentUserId) || isChatGroup(chat));\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  onScreenSelect,\n  availableReactions,\n  selectedReaction,\n}) => {\n  const { setDefaultReaction } = getDispatch();\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  const options = availableReactions?.filter((l) => !l.isInactive).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || screen === SettingsScreens.QuickReaction\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    loadContactList,\n    openChat,\n  } = getDispatch();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    loadContactList,\n    setGlobalSearchQuery,\n  } = getDispatch();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React, {\n  FC, useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatFolder } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getDispatch();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, memo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({ reaction, previewIndex, onSendReaction, isReady }) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady, ApiMediaFormat.Lottie);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n  const { transitionClassNames: animatedClassNames } = useShowTransition(shouldRenderAnimated);\n  const { shouldRender: shouldRenderStatic, transitionClassNames: staticClassNames } = useShowTransition(\n    !isReady || !isAnimationLoaded, undefined, true,\n  );\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isReady ? [staticClassNames] : undefined,\n          )}\n          style={`background-position-x: ${previewIndex * -32}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          id={`select_${reaction.reaction}`}\n          className={cn('animated', [animatedClassNames])}\n          animationData={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  FC, memo, useLayoutEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiUser } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  canDownload?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onDownload?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onSendReaction: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onDownload,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"reactions\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((options) => (\n          <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && (\n          <MenuItem\n            icon={canShowReactionsCount ? 'reactions' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            {canShowReactionsCount && message.reactors?.count ? (\n              canShowSeenBy && message.seenByUserIds?.length\n                ? lang('Chat.OutgoingContextMixedReactionCount', [message.reactors.count, message.seenByUserIds.length])\n                : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n            ) : (\n              message.seenByUserIds?.length\n                ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                : lang('Conversation.ContextMenuNoViews')\n            )}\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsMessageProtected,\n} from '../../../modules/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal,\n} from '../../../modules/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport buildClassName from '../../../util/buildClassName';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n  } = getDispatch();\n\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canShowSeenBy={canShowSeenBy}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onDownload={handleDownloadClick}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount < seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: !isProtected && canCopy,\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n    };\n  },\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectChat, selectCurrentMessageList, selectStickerSet, selectStickerSetByShortName,\n} from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../modules/helpers';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n\n    return {\n      canSendStickers,\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser,\n} from '../../modules/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact,\n} from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    addContact,\n    openCallFallbackConfirm,\n  } = getDispatch();\n\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleAddContactClick = useCallback(() => {\n    addContact({ userId: chatId });\n    closeMenu();\n  }, [addContact, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleCall = useCallback(() => {\n    openCallFallbackConfirm();\n    closeMenu();\n  }, [closeMenu, openCallFallbackConfirm]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n    };\n  },\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useStateRef } from '../../../hooks/useStateRef';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  isReady?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  isReady,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  const captionRef = useStateRef(caption);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => a.mimeType.startsWith('audio/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadRecentStickers();\n      sendMessageAction({ type: 'chooseSticker' });\n    }\n  }, [loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, className, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker, shouldPreserveInput?: boolean) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, canAttachMedia, canAttachPolls, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getDispatch();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  stickers,\n}) => {\n  const { clearStickersForEmoji } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({ inlineResult, observeIntersection, onClick }) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  onSelectResult: (inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  loadMore,\n  onClose,\n  onSelectResult,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsIds?: string[];\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  chatId,\n  selectedSendAsId,\n  sendAsIds,\n}) => {\n  const { saveDefaultSendAs } = getDispatch();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsIds && !sendAsIds.length) {\n      onClose();\n    }\n  }, [sendAsIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsIds?.map((id, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const fullName = user ? getUserFullName(user) : chat?.title;\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            onClick={() => handleUserSelect(id)}\n            focus={selectedSendAsIndex === index}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              <div className=\"title\">\n                <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n              </div>\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport renderText from '../common/helpers/renderText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isSomeModalOpen, onModalToggle,\n}) => {\n  const { loadStickers, toggleStickerSet } = getDispatch();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n}) => {\n  const { loadFeaturedStickers } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getDispatch();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getDispatch();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport {\n  ApiChat, ApiChatBannedRights, ApiExportedInvite, ApiMediaFormat,\n} from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getDispatch();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = () => {\n    onScreenSelect(ManagementScreens.Invites);\n  };\n\n  const handleClickRequests = () => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  };\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"reactions\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getDispatch();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getDispatch();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, filter);\n  }, [chat.fullInfo?.members, currentUserId, filter]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getHasAdminRight, getUserFullName } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n};\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getDispatch();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return { chat, usersById, canDeleteMembers };\n  },\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiExportedInvite, ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getDispatch();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = () => {\n    onScreenSelect(ManagementScreens.Invites);\n  };\n\n  const handleClickRequests = () => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  };\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"reactions\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  isProtected?: boolean;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  isProtected,\n}) => {\n  const {\n    checkPublicLink,\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n  } = getDispatch();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"channel-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      isProtected: chat?.isProtected,\n    };\n  },\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n  } = getDispatch();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getDispatch();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getDispatch();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot,\n} from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, loadContactList } = getDispatch();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadContactList, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      openChat({ id });\n    }\n  }, [noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  useHistoryBack(isActive, onClose);\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  onClick={() => handleMemberClick(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES } from '../../../config';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../modules/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../modules/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('Invite').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack(isActive, onClose);\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `t.me/${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"inviteDuck\"\n                size={STICKER_SIZE_INVITES}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          <p className='text-muted'>{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              icon=\"link\"\n              secondaryIcon=\"more\"\n              multiline\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                icon=\"link\"\n                secondaryIcon=\"more\"\n                multiline\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getDispatch();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack(isActive, onClose);\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getDispatch();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack(isActive, onClose);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    if (enabledReactions) {\n      setIsLoading(false);\n      setIsTouched(false);\n      setLocalEnabledReactions(enabledReactions);\n    }\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableReactions?.filter((l) => !l.isInactive).map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getDispatch();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack(isActive, onClose);\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { selectUser } from '../../../modules/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  about,\n  date,\n  isChannel,\n  user,\n  serverTimeOffset,\n  chatId,\n}) => {\n  const { openChat, hideChatJoinRequest } = getDispatch();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../modules/selectors';\nimport { isChatChannel, isUserId } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport getAnimationData from '../../common/helpers/animatedAssets';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getDispatch();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('JoinRequest').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"section\">\n        <div className=\"section-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"joinRequestDucks\"\n              size={STICKER_SIZE_JOIN_REQUESTS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n        {Boolean(chat?.joinRequests?.length) && (\n          <div className=\"bulk-actions\">\n            <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n            <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n          </div>\n        )}\n      </div>\n      <div className=\"section\">\n        <div className=\"custom-scroll\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getDispatch();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {\n        };\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n    };\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<string>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<string>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","mediaData","isVideo","isZoomed","fileName","isAvatar","onCloseMediaViewer","onForward","onZoomToggle","downloadMessageMedia","cancelMessageMediaDownload","getDispatch","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaHash","handleDownloadClick","useCallback","lang","useLang","MenuButton","useMemo","onTrigger","isOpen","Button","round","size","color","className","undefined","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","height","clientHeight","REM","handleResize","throttle","window","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","seekerRef","useRef","isSeeking","timeout","setTimeout","clearTimeout","body","remove","handleSeek","current","width","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","isActive","percentagePlayed","percentageBuffered","ref","renderSeekLine","ripple","formatMediaDuration","renderTime","loadedPercent","totalSize","formatFileSize","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","toggleControls","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseOver","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","ownProps","chatId","threadId","messageId","avatarOwnerId","profilePhotoIndex","selectChatMessage","senderId","avatarOwner","selectUser","selectChat","selectScheduledMessage","props","animationLevel","onFooterClick","isFooterHidden","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isFromSharedMedia","isFromSearch","isGhostAnimation","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","renderPhoto","calculateMediaViewerDimensions","textParts","renderMessageText","hasFooter","onContextMenu","imageSize","canDrag","Spinner","renderVideoPreview","alt","ANIMATION_DURATION","cancelAnimation","SwipeDirection","getMessageId","selectMessage","rest","containerRef","activeSlideRef","transformRef","x","y","scale","swipeDirectionRef","isActiveRef","activeMessageId","setActiveMessageId","forceUpdate","useForceUpdate","setIsFooterHidden","setTransform","value","setIsActive","debounceSetMessage","useDebounce","debounceSwipeDirection","debounceActive","handleToggleFooterVisibility","pageX","innerWidth","callback","delay","savedCallback","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","timingFunctions","onUpdate","isNotPassive","excludedClosestSelector","arePropsShallowEqual","event","captureEvent","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","abs","absOffsetY","h","Vertical","Horizontal","onZoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MAX_ZOOM","scaleFactor","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","centerX","centerY","absX","absY","boundaries","s1","x1","y1","k","Vx","Vy","minOffsetX","maxOffsetX","right","innerHeight","minOffsetY","top","maxOffsetY","bottom","dirX","nextMessageId","previousMessageId","offsetX","offsetY","getAnimationStyle","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","zoomLevel","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","onMouseDown","newDragData","pageY","onMouseUp","onMouseMove","deltaX","deltaY","getNewMatrixData","sender","isUserId","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","chat","renderText","formatMediaDateTime","date","Transition","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","setZoomLevel","disabled","step","type","onChange","Number","target","mediaViewer","settings","byKey","chatMessages","collectionIds","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","singleMessageId","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","setPanDelta","getMessageFileName","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","matches","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handlePan","renderSenderInfo","useHistoryBack","handleKeyDown","shouldCloseOnVideo","ShowTransition","isRtl","activeKey","name","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","loadMore","onFilterChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","resetFilter","useInputFocusOnOpen","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","Modal","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","map","i","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","setForwardChatId","exitForwardMode","setFilter","markIsShown","unmarkIsShown","useFlag","chatAndContactIds","priorityIds","unique","chatIds","getCanPostInChat","MAIN_THREAD_ID","usersById","getGlobal","users","sortChatIds","filterChatsByName","filterUsersByName","handleSelectUser","renderingChatAndContactIds","useCurrentOrPrev","getErrorHeader","error","isSlowMode","hasErrorKey","pick","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","showNotification","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","isText","renderInvite","contact","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","push","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","label","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isReportModalOpen","openReportModal","closeReportModal","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleDownload","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","renderButton","destructive","seenByModal","memberIds","seenByUserIds","openChat","closeSeenByModal","handleClick","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","isClosing","startClosing","stopClosing","chosenTab","setChosenTab","canShowFilters","count","results","chatIdRef","handleCloseAnimationEnd","handleClose","handleLoadMore","allReactions","l","reaction","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","find","ReactionStaticEmoji","fullName","getUserFullName","emojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","ANIMATED_STICKERS_PATHS","isReversed","stopActiveEmojiInteraction","isHiding","startHiding","isPlaying","startPlaying","stop","dispatchHeavyAnimationStop","effectAnimationData","localEffectAnimationData","setLocalEffectAnimationData","getAnimationData","then","data","startSize","AnimatedSticker","animationData","play","quality","IS_ANDROID","noLoop","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","getChatTitle","isVerified","VerifiedIcon","Link","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","currentType","isVoice","activeDownloads","theme","selectTheme","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","currentUser","loadProfilePhotos","profileId","ProfileInfo","forceShowSelf","ChatExtra","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","username","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","Checkbox","checked","onCheck","isChecked","RangeSlider","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","orderedFolderIds","foldersById","recommended","recommendedChatFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","STICKER_SIZE_FOLDER_SETTINGS","pill","fluid","narrow","multiline","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","renderChats","mode","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","isTouched","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","hasMaxChats","focus","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","STICKER_SIZE_PICKER_HEADER","stickerSet","isIntersecting","useIsIntersecting","mediaHash","lottieData","useMediaTransition","firstLetters","getFirstLetters","hasThumbnail","isGifs","IS_WEBM_SUPPORTED","stickers","firstSticker","isLottie","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","defaultReaction","appConfig","messageTextSize","messageSendKeyCombo","shouldSuggestStickers","shouldLoopStickers","timeFormat","stickerSettingsRef","observeIntersectionForCovers","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleStickerSetClick","stickerSets","installedDate","fromSticker","fileSelector","openSystemFilesDialog","accept","noMultiple","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","dataUri","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","volume","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","phoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","handleChange","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","ip","sessions","handler","dateActive","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","countryList","phoneCodes","phoneCodeList","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","formatPhoneNumberWithCode","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","isChatGroup","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","availableReactions","selectedReaction","setDefaultReaction","isInactive","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","serverTimeOffset","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","clientY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","_excludedClosestSelector","passive","onkeydown","enableScrolling","cn","createClassNameBuilder","previewIndex","onSendReaction","isReady","selectAnimation","isActivated","activate","deactivate","markAnimationLoaded","shouldRenderAnimated","animatedClassNames","shouldRenderStatic","staticClassNames","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onDownload","onShowSeenBy","onShowReactors","menuRef","scrollableRef","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","noReactions","withReactions","markIsReady","unmarkIsReady","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","positionY","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","Menu","bubbleStyle","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","recentReactions","msg","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyLink","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canAddContact","getCanAddContact","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","addContact","openCallFallbackConfirm","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleAddContactClick","handleSubscribe","handleCall","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","selector","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","captionRef","useStateRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","option","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","noAnimate","onUnfaveClick","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","shouldPlay","loadRecentStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","sendMessageAction","useSendMessageAction","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","handleMouseMove","fullClassName","buttonClassName","gif","videoData","shouldRenderVideo","isVideoReady","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseLeave","noCloseOnBackdrop","canAttachMedia","canAttachPolls","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","autoClose","withAvatar","botCommand","bot","botCommands","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","acc","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","maxLength","noAdmins","adminIds","shouldUseSearchResults","listedIds","noScrollRestore","memberId","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","useInterval","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","secondaryIcon","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","handleExpireDateChange","handleSaveClick","formatFullDate","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","field","handleErrorModalClose","PaymentStep","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","cropperResultOptions","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL"],"sourceRoot":""}