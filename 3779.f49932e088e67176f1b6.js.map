{"version":3,"file":"3779.f49932e088e67176f1b6.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.module.scss?a2dc","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/environment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    video.addEventListener('enterpictureinpicture', onEnter);\n    video.addEventListener('leavepictureinpicture', onLeave);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnter);\n      video.removeEventListener('leavepictureinpicture', onLeave);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }, [avatarOwner, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  fileName?: string;\n  canReport?: boolean;\n  onReport: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  zoomLevelChange,\n  canDelete,\n  messageListType,\n  onReport,\n  onCloseMediaViewer,\n  onForward,\n  setZoomLevelChange,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {message && canDelete && (\n          <DeleteMessageModal\n            isOpen={isDeleteModalOpen}\n            isSchedule={messageListType === 'scheduled'}\n            onClose={closeDeleteModal}\n            message={message}\n          />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      {message && canDelete && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={message}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete } = (threadId && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      messageListType,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport {\n  IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV, IS_YA_BROWSER,\n} from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  shouldCloseOnClick?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\nconst MAX_LOOP_DURATION = 30; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden(true);\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden(false);\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) return;\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList={isProtected ? 'nodownload' : undefined}\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n    isMoving,\n  } = props;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            fullMediaBlobUrl || previewBlobUrl,\n            calculateMediaViewerDimensions(dimensions, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={localBlobUrl || fullMediaBlobUrl}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n    isFullscreen,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden, isFullscreen]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n  const isMoving = isMouseDown && scale > 1;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          isMoving={isMoving}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport {\n  getChatMediaMessageIds,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport windowSize from '../../util/windowSize';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, mediaId });\n    }\n  }, [handleClose, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={avatarOwner.id}\n        chatId={avatarOwner.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          message={message}\n          fileName={fileName}\n          canReport={canReport}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { shouldSkipHistoryAnimations } = global;\n\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        isChatWithSelf,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen, resetSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={searchRef}\n        value={search}\n        onChange={handleSearchChange}\n        onKeyDown={handleKeyDown}\n        placeholder={searchPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatId({ id: recipientId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatId, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (global.forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: GlobalState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string) => {\n    openChatWithDraft({ chatId: recipientId, text: requestedDraft!.text });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { botId, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ botId: botId!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [botId, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: global.dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: GlobalState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n) => {\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendTheme, sendViewport, windowSize]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport windowSize from '../../util/windowSize';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { TME_LINK_PREFIX } from '../../config';\nimport { selectCurrentChat, selectTheme, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: GlobalState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: GlobalState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  useOnChange(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp] as const);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n    }\n  }, [closeCloseModal, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const backButtonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButtonVisible && 'state-back',\n  );\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [\n    lang, handleBackClick, bot, MoreMenuButton, chat, openBotChat, handleRefreshClick, attachBot,\n    handleToggleClick, handleSettingsButtonClick, isBackButtonVisible, headerColor, backButtonClassName,\n  ]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={header}\n      hasCloseButton\n      style={`background-color: ${backgroundColor}`}\n    >\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={buildClassName('web-app-popup', !renderingPopupParams.title?.trim().length && 'without-title')}\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.text || button.type}\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                fluid\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = global.payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { cancelAttachBotInstall, confirmAttachBotInstall } = getActions();\n\n  const lang = useLang();\n\n  const name = useCurrentOrPrev(bot?.firstName, true);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      confirmHandler={confirmAttachBotInstall}\n      title={name}\n      textParts={lang('WebApp.AddToAttachmentText', name)}\n    />\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lSI7Gb2It7nFGpBE4IFs\",\"sticker\":\"sbJjdz4IEwYhlti5MyPA\",\"effect-sticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\",\"effectSticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiAvailableReaction } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useInterval from '../../../../hooks/useInterval';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewReactions.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  availableReactions: GlobalState['availableReactions'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.2;\nconst EFFECT_SIZE_MULTIPLIER = 0.6;\nconst ROTATE_INTERVAL = 3000;\nconst CLICK_DELAY = 4000;\nconst MAX_EMOJIS = 15;\n\nconst AnimatedCircleReaction: FC<{\n  size: number;\n  realIndex: number;\n  reaction: ApiAvailableReaction;\n  index: number;\n  maxLength: number;\n  handleClick: (index: number) => void;\n  isActivated: boolean;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, isActivated, canPlay,\n  reaction, index, maxLength, handleClick,\n}) => {\n  const mediaData = useMedia(`document${reaction.activateAnimation?.id}`);\n  const mediaDataAround = useMedia(`document${reaction.aroundAnimation?.id}`);\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n  const [isEffectEnded, markEffectEnded, unmarkEffectEnded] = useFlag(false);\n\n  const circleSize = (size - size * EMOJI_SIZE_MULTIPLIER) / 2;\n\n  const t = index / maxLength;\n  const angle = t * (Math.PI * 2);\n  const totalAngle = angle - (Math.PI / 6) * Math.cos(angle);\n  const scaleNotFull = 0.2 + (0.7 * (Math.sin(totalAngle) + 1)) / 2;\n  const scale = scaleNotFull > 0.85 ? 1 : scaleNotFull;\n\n  const x = Math.cos(totalAngle) * circleSize;\n  const y = Math.sin(totalAngle) * circleSize * 0.6;\n\n  const handleClickEmoji = useCallback(() => {\n    handleClick(realIndex);\n  }, [handleClick, realIndex]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n      unmarkEffectEnded();\n    }\n  }, [isActivated, animate, unmarkEffectEnded]);\n\n  return (\n    <>\n      {isActivated && !isEffectEnded && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n          onEnded={markEffectEnded}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        onClick={handleClickEmoji}\n        play={isAnimated && canPlay}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n        onEnded={inanimate}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewReactions: FC<OwnProps & StateProps> = ({\n  availableReactions, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isIntervalPaused, pauseInterval, unpauseInterval] = useFlag();\n  const lastUnpauseTimeout = useRef<NodeJS.Timeout>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedReactions = availableReactions?.filter((l) => l.isPremium)?.slice(0, MAX_EMOJIS) || [];\n\n  useInterval(() => {\n    setOffset((current) => cycleRestrict(renderedReactions.length, current + 1));\n  }, isIntervalPaused || !isActive ? undefined : ROTATE_INTERVAL);\n\n  const handleClickEmoji = useCallback((i: number) => {\n    setOffset(i);\n    pauseInterval();\n    if (lastUnpauseTimeout.current) clearTimeout(lastUnpauseTimeout.current);\n    lastUnpauseTimeout.current = setTimeout(() => {\n      unpauseInterval();\n    }, CLICK_DELAY);\n  }, [pauseInterval, unpauseInterval]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedReactions.map((l, i) => {\n        return (\n          <AnimatedCircleReaction\n            size={size}\n            reaction={l}\n            realIndex={i}\n            index={(i - offset + renderedReactions.length / 4) % renderedReactions.length}\n            maxLength={renderedReactions.length}\n            handleClick={handleClickEmoji}\n            isActivated={offset === i}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      availableReactions: global.availableReactions,\n    };\n  },\n)(PremiumFeaturePreviewReactions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport PremiumFeaturePreviewReactions from './previews/PremiumFeaturePreviewReactions';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  unique_reactions: 'PremiumPreviewReactions',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  unique_reactions: 'PremiumPreviewReactionsDescription',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'unique_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n          if (section === 'unique_reactions') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewReactions isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.unique_reactions)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.unique_reactions), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useOnChange from '../../../hooks/useOnChange';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  unique_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useOnChange(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {(premiumPromoOrder || PREMIUM_FEATURE_SECTIONS).map((section, index) => {\n                if (!PREMIUM_FEATURE_SECTIONS.includes(section)) return undefined;\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    promo: global.premiumModal?.promo,\n    isClosing: global.premiumModal?.isClosing,\n    isSuccess: global.premiumModal?.isSuccess,\n    isGift: global.premiumModal?.isGift,\n    monthsAmount: global.premiumModal?.monthsAmount,\n    fromUser: global.premiumModal?.fromUserId ? selectUser(global, global.premiumModal.fromUserId) : undefined,\n    toUser: global.premiumModal?.toUserId ? selectUser(global, global.premiumModal.toUserId) : undefined,\n    initialSection: global.premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {discount && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = global.giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description, ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = global.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || global.requestedDraft\n      || global.requestedAttachBotInChat || global.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                    <FullNameTitle peer={user} withEmojiStatus />\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n  const tgsUrl = localEffectAnimation && (localEffectAnimation in LOCAL_TGS_URLS)\n    ? LOCAL_TGS_URLS[localEffectAnimation as keyof typeof LOCAL_TGS_URLS]\n    : effectTgsUrl;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={tgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(LOCAL_TGS_URLS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview--image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  useHorizontalScroll(chatSelectionRef.current, undefined, true);\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^[^\\d]([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    e.currentTarget.value = e.currentTarget.value.replace(/\\n/, '');\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  checkedUsername,\n  isUsernameAvailable,\n  maxBioLength,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable, checkedUsername } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      maxBioLength,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !inRange(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n\nfunction inRange(x: number, min: number, max: number) {\n  return x >= min && x <= max;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  shouldArchiveAndMuteNewNonContact,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"web\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n        >\n          {lang('PrivacySettings.WebSessions')}\n          <span className=\"settings-item__current-value\">{webAuthCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NewChatsFromNonContacts')}\n        </h4>\n        <Checkbox\n          label={lang('ArchiveAndMute')}\n          subLabel={lang('ArchiveAndMuteInfo')}\n          checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n          onCheck={handleArchiveAndMuteChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  isUserId,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isPremium?: boolean;\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  isPremium,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = availableReactions?.filter((l) => (\n    !(l.isInactive || (!isPremium && l.isPremium))\n  )).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n      isPremium,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noAnimate?: boolean;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noAnimate,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia((hasThumbnail || isLottie) && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const isReady = mediaData && (!isVideo || IS_WEBM_SUPPORTED);\n  const transitionClassNames = useMediaTransition(isReady);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={isIntersecting && !noAnimate}\n          />\n        ) : isVideo ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={isIntersecting && !noAnimate}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData}\n            className={transitionClassNames}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","// extracted by mini-css-extract-plugin\nexport default {\"video\":\"h6jE3TEaqlzbs0ro0J2_\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noAnimate?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noAnimate,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noAnimate={noAnimate}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noAnimate={noAnimate}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport type { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady, isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isCurrentUserPremium && 'premium',\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n  canBuyPremium,\n  isCurrentUserPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive || (reaction.isPremium && !isCurrentUserPremium)\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            );\n          })}\n          {canBuyPremium && Boolean(\n            availableReactions\n              .filter((r) => r.isPremium && (!enabledReactions || enabledReactions.includes(r.reaction)))\n              .length,\n          ) && (\n            <Button\n              round\n              color=\"translucent\"\n              className={cn('blocked-button')}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openPremiumModal({\n                initialSection: 'unique_reactions',\n              })}\n            >\n              <i className=\"icon-lock-badge\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiSponsoredMessage, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onSendReaction?: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction!(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"heart-outline\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList, selectIsChatProtected, selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID, TME_LINK_PREFIX } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`${TME_LINK_PREFIX}${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = selectIsChatProtected(global, message.chatId);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: message.isForwardingAllowed && !isChatProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectIsSetPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isSetPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isSetPremium,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    openPremiumModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isEmoji = renderingStickerSet?.isEmoji;\n  const isButtonLocked = !renderingStickerSet?.installedDate && isSetPremium && !isCurrentUserPremium;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      if (isButtonLocked) {\n        openPremiumModal({ initialSection: 'animated_emoji' });\n        return;\n      }\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [isButtonLocked, onClose, openPremiumModal, renderingStickerSet, toggleStickerSet]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n    if (isButtonLocked) {\n      return lang('EmojiInput.UnlockPack', renderingStickerSet.title);\n    }\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      renderingStickerSet.installedDate ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={renderingStickerSet\n        ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {renderingStickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                clickArg={sticker}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={renderingStickerSet.installedDate ? 'danger' : 'primary'}\n              isShiny={isButtonLocked}\n              withPremiumGradient={isButtonLocked}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const isSetPremium = stickerSet && selectIsSetPremium(stickerSet);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSetPremium,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser, selectChatBot, selectIsPremiumPurchaseBlocked,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact, isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n  } = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const canReportChat = isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf);\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment, ApiChatMember, ApiSticker } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji } = getActions();\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  const { isCustomEmojiTooltipOpen, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji) && isOpen,\n    `#${EDITABLE_INPUT_MODAL_ID}`,\n    caption,\n    onCaptionUpdate,\n    customEmojiForEmoji,\n    !isReady,\n  );\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  const leftChars = (captionLimit - caption.length) <= 100 ? captionLimit - caption.length : undefined;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop disablePictureInPicture />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n            captionLimit={leftChars}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\nimport {\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isCustomEmojiPicker?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst EMOJI_PER_ROW_ON_DESKTOP = 8;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst EMOJI_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 10;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n  isCustomEmojiPicker,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isExpanded, expand] = useFlag(!stickerSet.isEmoji);\n  const lang = useLang();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some((l) => !l.isFree);\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const itemsPerRow = isEmoji ? EMOJI_PER_ROW_ON_DESKTOP : STICKERS_PER_ROW_ON_DESKTOP;\n  const margin = isEmoji ? EMOJI_MARGIN : STICKER_MARGIN;\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (itemSize + margin))\n    : itemsPerRow;\n\n  const shouldCutSet = isEmoji && !isExpanded && !stickerSet.installedDate && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const itemsBeforeCutout = shouldCutSet ? stickersPerRow * 3 : Infinity;\n  const height = Math.ceil((\n    !shouldCutSet ? stickerSet.count : Math.min(itemsBeforeCutout, stickerSet.count))\n    / stickersPerRow) * (itemSize + margin);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${isCustomEmojiPicker ? 'custom-emoji-set' : 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\">\n          {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n          {stickerSet.title}\n        </p>\n        {isRecent && (\n          <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n        )}\n        {!isRecent && isEmoji && !stickerSet.installedDate && (\n          <Button\n            className=\"symbol-set-add-button\"\n            withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n            onClick={handleAddClick}\n            pill\n            size=\"tiny\"\n            fluid\n          >\n            {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n          </Button>\n        )}\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, !isExpanded ? (itemsBeforeCutout - 1) : stickerSet.stickers.length)\n          .map((sticker) => (\n            <StickerButton\n              key={sticker.id}\n              sticker={sticker}\n              size={itemSize}\n              observeIntersection={observeIntersection}\n              noAnimate={!loadAndPlay}\n              isSavedMessages={isSavedMessages}\n              canViewSet\n              isCurrentUserPremium={isCurrentUserPremium}\n              onClick={onStickerSelect}\n              clickArg={sticker}\n              onUnfaveClick={stickerSet.id === FAVORITE_SYMBOL_SET_ID && favoriteStickerIdsSet?.has(sticker.id)\n                ? onStickerUnfave : undefined}\n              onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n              onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n            />\n          ))}\n        {!isExpanded && stickerSet.count > itemsBeforeCutout && (\n          <Button className=\"StickerButton custom-emoji set-expand\" round color=\"translucent\" onClick={expand}>\n            +{stickerSet.count - itemsBeforeCutout + 1}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className: string;\n  loadAndPlay: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  recentCustomEmoji: ApiSticker[];\n  featuredCustomEmojiIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  recentCustomEmoji,\n  stickerSetsById,\n  featuredCustomEmojiIds,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onCustomEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('custom-emoji-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('custom-emoji-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (recentCustomEmoji.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmoji,\n        count: recentCustomEmoji.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedCustomEmojiIds));\n\n    const filteredFeaturedIds = featuredCustomEmojiIds?.filter((id) => !addedCustomEmojiIds.includes(id)) || [];\n    const featuredSetIds = Object.values(pickTruthy(stickerSetsById, filteredFeaturedIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n      ...featuredSetIds,\n    ];\n  }, [addedCustomEmojiIds, featuredCustomEmojiIds, lang, recentCustomEmoji, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`custom-emoji-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            isSavedMessages={isSavedMessages}\n            isCustomEmojiPicker\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    const recentCustomEmoji = Object.values(pickTruthy(global.customEmojis.byId, global.recentCustomEmojis));\n\n    return {\n      stickerSetsById: setsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      recentCustomEmoji,\n      featuredCustomEmojiIds: global.customEmojis.featuredIds,\n    };\n  },\n)(CustomEmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map((l) => l.stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n  isCurrentUserPremium,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onCustomEmojiSelect,\n  addRecentCustomEmoji,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef.current);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (\n    isOpen ? captureEscKeyListener(clearCustomEmojiForEmoji) : undefined\n  ), [isOpen, clearCustomEmojiForEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji documentId={emoji.id} size={CUSTOM_EMOJI_SIZE} withSharedAnimation shouldPreloadPreview />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef.current);\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification, openPremiumModal } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: () => openPremiumModal(),\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, { useMemo, memo, useRef } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(global.openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: data.chat.username, messageId: data.messageId });\n  }, [data, openChatByUsername]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const statistics = global.statistics.currentMessage;\n    const messageId = global.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n  isChannelsPremiumLimitReached: boolean;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  isChannelsPremiumLimitReached,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n      isChannelsPremiumLimitReached: global.limitReachedModal?.limit === 'channels',\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId).filter((l) => l.isCreator && l.username);\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  currentUserId,\n  canDeleteMembers,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, closeManagement } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      serverTimeOffset: global.serverTimeOffset,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `${TME_LINK_PREFIX}${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions || []);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter((l) => !l.isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableActiveReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableActiveReactions?.map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n  serverTimeOffset,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text=\"\"\n          isRtl={isRtl}\n        >\n          {langStringSplit[1]}\n        </SafeLink>\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={customIcon} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const { closePaymentModal, openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closePaymentModal();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [closePaymentModal, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    error: global.payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: global.payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  const isSubmitDisabled = isLoading\n    || Boolean(step === PaymentStep.Checkout && invoice?.isRecurring && !isTosAccepted);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={closeModal}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n    } = global.payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useOnChange","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","shouldDeleteForAll","handleDeleteMessageForSelf","lang","useLang","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","messageListType","type","canReport","zoomLevelChange","onReport","onCloseMediaViewer","onForward","setZoomLevelChange","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","downloadMessageMedia","cancelMessageMediaDownload","downloadProgress","handleDownloadClick","handleZoomOut","handleZoomIn","MenuButton","onTrigger","round","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","onLeave","isSupported","setIsSupported","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","avatarOwnerId","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isMoving","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","selectMedia","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","fullscreenProp","checkIfFullscreen","useFullscreenStatus","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","isRtl","toFixed","selector","matches","messageId","isAvatar","settings","byKey","sender","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","formatMediaDateTime","date","shouldSkipHistoryAnimations","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","ShowTransition","noCloseTransition","Transition","activeKey","name","ReportModal","subject","currentUserId","chatOrUserIds","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","searchRef","resetSearch","useInputFocusOnOpen","handleSearchChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","getCanPostInChat","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","isManyMessages","forwardMessages","setForwardChatId","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","botId","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","renderInvite","contact","pick","getReadableErrorText","notifications","dismissNotification","localId","action","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","shouldRequestWriteAccess","request","bot","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","Number","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","frameRef","buttonText","queryId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","lastFrameSizeRef","frame","once","contentWindow","postMessage","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","useWebAppFrame","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","isAttachBot","destructive","hasSettings","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","confirmIsDestructive","fluid","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","cancelAttachBotInstall","confirmAttachBotInstall","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","AnimatedCircleReaction","realIndex","isActivated","reaction","maxLength","activateAnimation","mediaDataAround","aroundAnimation","isAnimated","animate","inanimate","isEffectEnded","markEffectEnded","unmarkEffectEnded","circleSize","angle","PI","totalAngle","cos","scaleNotFull","sin","handleClickEmoji","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","availableReactions","isIntervalPaused","pauseInterval","unpauseInterval","lastUnpauseTimeout","setOffset","setSize","renderedReactions","l","isPremium","slice","cycleRestrict","clientWidth","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","sticker","stickers","premium","renderedStickers","PREMIUM_FEATURE_TITLES","double_limits","unique_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","then","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","fullInfo","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","reduce","acc","gift","selectedGift","botUrl","handlePremiumClick","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","ReactionStaticEmoji","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","LOCAL_TGS_URLS","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","isVoice","activeDownloads","isLoading","searchChatId","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","profileId","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","teactExperimentControlled","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","textareaRef","labelText","fullClassName","textarea","htmlFor","ERROR_FIRST_NAME_MISSING","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","offsetWidth","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","handleDrag","splice","handleDragEnd","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","pill","isBlocked","isDragged","draggedTop","narrow","inactive","multiline","isStatic","secondaryIcon","handler","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","privacy","blocked","passcode","hasPasscode","isCurrentUserPremium","blockedCount","totalCount","webAuthCount","activeWebSessions","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","result","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","terminateWebAuthorization","renderingBot","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","userOrChat","renderContact","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","animatedEmoji","selectAnimatedEmoji","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","selectedReaction","defaultReaction","setDefaultReaction","isInactive","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","stickerSet","STICKER_SIZE_PICKER_HEADER","noAnimate","hasThumbnail","isLottie","isVideos","isIntersecting","useIsIntersecting","isReady","IS_WEBM_SUPPORTED","getFirstLetters","firstSticker","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","noContextMenu","renderPreview","addedSetIds","added","setIds","customEmojiSetIds","customEmojis","stickerSetsById","setsById","shouldSuggestStickers","shouldLoopStickers","openStickerSet","stickerSettingsRef","observeIntersectionForCovers","handleStickerSetClick","stickerSetInfo","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","values","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","r","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","openCustomEmojiSets","menuRef","scrollableRef","noReactions","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","handleOpenCustomEmojiSets","shortName","copyOptions","afterEffect","getMessageText","getMessageContact","mediaHash","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","MenuSeparator","Skeleton","inline","withWrap","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","selectStickerSet","every","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","loadStickers","cancelPollVote","closePoll","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","recentReactions","msg","handleReport","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","copyTextToClipboard","handleCopyNumber","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","canSendStickers","isSetPremium","selectIsSetPremium","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","toggleStickerSet","prevStickerSet","renderingStickerSet","isEmoji","isButtonLocked","installedDate","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","handleButtonClick","stickerSetId","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","suffix","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","canReportChat","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","openGiftPremiumModal","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","captionLimit","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","customEmojiForEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","addRecentCustomEmoji","addRecentEmoji","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isCustomEmojiTooltipOpen","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","closeEmojiTooltip","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","leftChars","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","onCustomEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","emoji","native","image","isLoaded","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","RECENT_SYMBOL_SET_ID","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","EMOJI_MARGIN","loadAndPlay","favoriteStickers","isCustomEmojiPicker","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","isConfirmModalOpen","openConfirmModal","closeConfirmModal","expand","isRecent","isPremiumSet","handleClearRecent","handleAddClick","isLocked","isFree","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","itemsPerRow","stickersPerRow","shouldCutSet","itemsBeforeCutout","Infinity","favoriteStickerIdsSet","canViewSet","onUnfaveClick","FAVORITE_SYMBOL_SET_ID","has","onFaveClick","onRemoveRecentClick","stickerSetIntersections","recentCustomEmoji","pickTruthy","recentCustomEmojis","addedCustomEmojiIds","canAnimate","featuredCustomEmojiIds","featuredIds","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","defaultSets","existingAddedSetIds","filteredFeaturedIds","featuredSetIds","noPopulatedSets","stickerSetEl","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","favorite","premiumSet","recentStickers","premiumStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","loadPremiumSetStickers","loadFeaturedEmojiStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","withSharedAnimation","shouldPreloadPreview","listEmojis","usePrevDuringAnimation","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","noFake","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","shouldPlay","selectShouldLoopStickers","isAdded","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","isChannelsPremiumLimitReached","limitReachedModal","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","maxPublicLinks","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","radioGroup","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","noAdmins","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","availableActiveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","closePaymentModal","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","requestId","stripeCredentials","smartGlocalCredentials","temporaryPassword","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","handleModalClose","isSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","handleFirstMonkeyLoad","playSegment","cropperResultOptions","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","labelClassName","accept"],"sourceRoot":""}