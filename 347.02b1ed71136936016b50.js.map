{"version":3,"file":"347.02b1ed71136936016b50.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/versionNotification.txt","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/modules/reducers/reactions.ts","webpack://telegram-t/./src/modules/actions/api/reactions.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/common/LocalAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/CallFallbackConfirm.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\n// @ts-ignore\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n    },\n  };\n});\n\naddReducer('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddReducer('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddReducer('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddReducer('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddReducer('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddReducer('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddReducer('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddReducer('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n","export default \"**Telegram Web Z was updated to version v1.32**\\n\\n**Harder**\\n• Create and share Video Stickers made from .webm files.\\n• 5 new reactions and interactive emoji: 🥰🤯🤔🤬👏\\n• Send entire folders as a file.\\n• Directly add chats to chat folders from Global Search.\\n\\n**Better**\\n• Redesigned group management pages with animated artwork.\\n• ‘Forward To’ menu has smooth infinite scroll on mobile.\\n• Spoiler animations re-hide text after a short period.\\n• Numerous layout fixes and improvements.\\n\\n**Faster**\\n• Media loads and scrolls faster in Shared Media and Global Search.\\n• Optimized some heavy background calculations.\\n• Memory usage optimizations.\\n\\n**Stronger**\\n• Fixed missing sticker suggestions (e.g. for ❤️ emoji).\\n• Fixed infinite spinning in Sticker panel.\\n• Fixed scroll jumps and missing sender names in local search results.\\n• Fixed highlight color when searching in dark mode.\\n• Fixed pasting text and media from clipboard on Firefox and iOS browsers.\\n• Media Viewer: Fixed navigating to the origin message on mobile.\\n• Media Viewer: Fixed lingering audio after moving to the next item.\\n• Reactions: Fixed unexpected interaction animations.\\n• Fixed jumping cursor when typing in Safari.\\n\";","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddReducer('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddReducer('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('requestNextManagementScreen', (global, actions, payload): GlobalState | undefined => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('sendMessageAction', (global, actions, payload) => {\n  (async () => {\n    const { action, chatId, threadId } = payload!;\n    if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n    const chat = selectChat(global, chatId)!;\n    if (!chat) return;\n\n    await callApi('sendMessageAction', {\n      peer: chat, threadId, action,\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global, action, payload) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadSeenBy', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSeenBy', { chat, messageId });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n      seenByUserIds: result,\n    }));\n  })();\n});\n\naddReducer('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddReducer('loadSendAs', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSendAs', { chat });\n    if (!result) {\n      global = updateChat(global, chatId, {\n        sendAsIds: [],\n      });\n      setGlobal(global);\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChat(global, chatId, {\n      sendAsIds: result.ids,\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddReducer('loadSponsoredMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSponsoredMessages', { chat });\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = updateSponsoredMessage(getGlobal(), chatId, result.messages[0]);\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    newGlobal = addChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  const cached = global.stickers.setsById;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      const id = addedSetIds[i];\n      if (cached[id].stickers) {\n        continue; // Already loaded\n      }\n      actions.loadStickers({ stickerSetId: id });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chatOrUser, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  replaceUserStatuses,\n  updateUsers,\n  addUserStatuses,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n} from '../../reducers';\nimport {\n  selectUser,\n  selectChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectLastServiceNotification,\n} from '../../selectors';\nimport { isUserId } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', () => {\n  void afterSync();\n});\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 10 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n    isSyncing: false,\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync() {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isUserId(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceUserStatuses(global, result.userStatusesById);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addUserStatuses(global, result.userStatusesById);\n\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    if (draft) {\n      acc[chatId] = draft;\n    }\n\n    return acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const result = await callApi('fetchUsers', { users });\n  if (!result) {\n    return;\n  }\n\n  const { users: updatedUsers, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateChat, updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddReducer('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddReducer('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddReducer('loadExportedChatInvites', (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  (async () => {\n    const result = await callApi('fetchExportedChatInvites', {\n      peer, admin, isRevoked, limit,\n    });\n    if (!result) {\n      return;\n    }\n    const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n    setGlobal(updateManagement(getGlobal(), chatId, update));\n  })();\n});\n\naddReducer('editExportedChatInvite', (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('editExportedChatInvite', {\n      peer,\n      link,\n      isRevoked,\n      expireDate,\n      usageLimit,\n      isRequestNeeded,\n      title,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    let invites = global.management.byChatId[chatId].invites || [];\n    const revokedInvites = global.management.byChatId[chatId].revokedInvites || [];\n    const { oldInvite, newInvite } = result;\n    invites = invites.filter((current) => current.link !== oldInvite.link);\n    if (newInvite.isRevoked) {\n      revokedInvites.unshift(newInvite);\n    } else {\n      invites.push(newInvite);\n    }\n    setGlobal(updateManagement(global, chatId, {\n      invites,\n      revokedInvites,\n    }));\n  })();\n});\n\naddReducer('exportChatInvite', (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('exportChatInvite', {\n      peer,\n      expireDate,\n      usageLimit,\n      isRequestNeeded,\n      title,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const invites = global.management.byChatId[chatId].invites || [];\n    setGlobal(updateManagement(global, chatId, {\n      invites: [...invites, result],\n    }));\n  })();\n});\n\naddReducer('deleteExportedChatInvite', (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('deleteExportedChatInvite', {\n      peer,\n      link,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const managementState = global.management.byChatId[chatId];\n    setGlobal(updateManagement(global, chatId, {\n      invites: managementState?.invites?.filter((invite) => invite.link !== link),\n      revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n    }));\n  })();\n});\n\naddReducer('deleteRevokedExportedChatInvites', (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  (async () => {\n    const result = await callApi('deleteRevokedExportedChatInvites', {\n      peer,\n      admin,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    setGlobal(updateManagement(global, chatId, {\n      revokedInvites: [],\n    }));\n  })();\n});\n\naddReducer('loadChatInviteImporters', (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      link,\n      offsetDate,\n      offsetUser,\n      limit,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n    if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) return;\n    setGlobal(updateManagement(global, chatId, {\n      inviteInfo: {\n        ...currentInviteInfo,\n        importers: result,\n      },\n    }));\n  })();\n});\n\naddReducer('loadChatInviteRequesters', (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      link,\n      offsetDate,\n      offsetUser,\n      limit,\n      isRequested: true,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n    if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) return;\n    setGlobal(updateManagement(global, chatId, {\n      inviteInfo: {\n        ...currentInviteInfo,\n        requesters: result,\n      },\n    }));\n  })();\n});\n\naddReducer('loadChatJoinRequests', (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      offsetDate,\n      offsetUser,\n      limit,\n      isRequested: true,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    setGlobal(updateChat(global, chatId, { joinRequests: result }));\n  })();\n});\n\naddReducer('hideChatJoinRequest', (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  (async () => {\n    const result = await callApi('hideChatJoinRequest', {\n      peer,\n      user,\n      isApproved,\n    });\n\n    if (!result) return;\n    global = getGlobal();\n    const targetChat = selectChat(global, chatId);\n    if (!targetChat) return;\n    setGlobal(updateChat(global, chatId, {\n      joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n    }));\n  })();\n});\n\naddReducer('hideAllChatJoinRequests', (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('hideAllChatJoinRequests', {\n      peer,\n      isApproved,\n      link,\n    });\n\n    if (!result) return;\n    global = getGlobal();\n    const targetChat = selectChat(global, chatId);\n    if (!targetChat) return;\n\n    setGlobal(updateChat(global, chatId, {\n      joinRequests: [],\n      fullInfo: {\n        ...targetChat.fullInfo,\n        recentRequesterIds: [],\n        requestsPending: 0,\n      },\n    }));\n  })();\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, pick, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, replaceUserStatuses, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchUsers', { users: [user] });\n    if (!result) {\n      return;\n    }\n\n    const { users, userStatusesById } = result;\n\n    global = getGlobal();\n\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n    setGlobal(replaceUserStatuses(global, {\n      ...global.users.statusesById,\n      ...userStatusesById,\n    }));\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddReducer('loadContactList', () => {\n  void loadContactList();\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('loadCommonChats', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  (async () => {\n    const maxId = user.commonChats?.maxId;\n    const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n    if (!result) {\n      return;\n    }\n\n    const { chats, chatIds, isFullyLoaded } = result;\n\n    global = getGlobal();\n    if (chats.length) {\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n    }\n    global = updateUser(global, user.id, {\n      commonChats: {\n        maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n        ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n        isFullyLoaded,\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (user.phoneNumber) {\n    result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('addContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n    });\n  }\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddReducer('addContact', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  void callApi('addContact', pick(user, ['id', 'accessHash', 'firstName', 'lastName', 'phoneNumber']));\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'requestSelfContact': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots');\n    if (!result) {\n      return;\n    }\n\n    const { ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport { GlobalState } from '../../global/types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiAppConfig, ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction } from '../../reducers/reactions';\nimport { addUsers, updateChatMessage } from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\naddReducer('loadAvailableReactions', () => {\n  (async () => {\n    const result = await callApi('getAvailableReactions');\n\n    if (!result) {\n      return;\n    }\n\n    // Preload animations\n    result.forEach((availableReaction) => {\n      if (availableReaction.aroundAnimation) {\n        mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.Lottie);\n      }\n      if (availableReaction.centerIcon) {\n        mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.Lottie);\n      }\n    });\n\n    setGlobal({\n      ...getGlobal(),\n      availableReactions: result,\n    });\n  })();\n});\n\naddReducer('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      animatedEffect: emoji || localEffect,\n      x: subtractXForEmojiInteraction(global, x),\n      y,\n      startSize,\n      isReversed,\n    },\n  };\n});\n\naddReducer('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n    x, y, startX, startY, startSize,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n\n  if (!global.activeEmojiInteraction) return undefined;\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      ...global.activeEmojiInteraction,\n      endX: subtractXForEmojiInteraction(global, x),\n      endY: y,\n      ...(startX && { x: subtractXForEmojiInteraction(global, startX) }),\n      ...(startY && { y: startY }),\n      ...(startSize && { startSize }),\n    },\n  };\n});\n\naddReducer('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n\n  if (!reaction) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddReducer('sendReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId,\n  }: { messageId: number; chatId: string } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddReducer('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddReducer('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddReducer('setDefaultReaction', (global, actions, payload) => {\n  const { reaction } = payload;\n\n  (async () => {\n    const result = await callApi('setDefaultReaction', { reaction });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      appConfig: {\n        ...global.appConfig,\n        defaultReaction: reaction,\n      } as ApiAppConfig,\n    });\n  })();\n});\n\naddReducer('stopActiveEmojiInteraction', (global) => {\n  return {\n    ...global,\n    activeEmojiInteraction: undefined,\n  };\n});\n\naddReducer('loadReactors', (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n\n  (async () => {\n    const result = await callApi('fetchMessageReactionsList', {\n      reaction,\n      chat,\n      messageId,\n      offset,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    if (result.users?.length) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    }\n\n    const { nextOffset, count, reactions } = result;\n\n    setGlobal(updateChatMessage(global, chatId, messageId, {\n      reactors: {\n        nextOffset,\n        count,\n        reactions: [\n          ...(message.reactors?.reactions || []),\n          ...reactions,\n        ],\n      },\n    }));\n  })();\n});\n\naddReducer('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddReducer('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteraction || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      ...global.activeEmojiInteraction,\n      x: subtractXForEmojiInteraction(global, x),\n      y,\n      startSize,\n      isReversed,\n    },\n  };\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutNewMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      setGlobal(leaveChat(global, update.id));\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      notifyAboutNewMessage({\n        chat,\n        message,\n      });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (chat) {\n        global = updateChat(global, chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            requestsPending,\n            recentRequesterIds,\n          },\n        });\n        setGlobal(global);\n        actions.loadChatJoinRequests({ chatId });\n      }\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText,\n} from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (global.activeEmojiInteraction || currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteraction: {\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction,\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const currentReactions = message?.reactions;\n\n      // `updateMessageReactions` happens with an interval so we try to avoid redundant global state updates\n      if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n        return;\n      }\n\n      setGlobal(updateChatMessage(global, chatId, id, { reactions: update.reactions }));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer, getGlobal } from '../../../lib/teact/teactn';\nimport { ApiUpdate } from '../../../api/types';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(global, groupCallId, participant.id, participant,\n            Boolean(nextOffset) || currentUserId === participant.id);\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {() => connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ISettings, LeftColumnContent } from '../../../types';\nimport { ApiChat } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../modules/selectors';\nimport { isChatArchived } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    isMessageListOpen: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isConnectionStatusMinimized,\n  isMessageListOpen,\n}) => {\n  const {\n    openChat,\n    openTipsChat,\n    setGlobalSearchDate,\n    setSettingOption, setGlobalSearchChatId,\n  } = getDispatch();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized,\n  );\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          {() => (\n            <ConnectionStatusOverlay\n              connectionStatus={connectionStatus}\n              connectionStatusText={connectionStatusText!}\n              onClick={toggleConnectionStatus}\n            />\n          )}\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isConnectionStatusMinimized,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n    };\n  },\n)(LeftMainHeader));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatFolder } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      {\n        id: ALL_FOLDER_ID,\n        title: lang.code === 'en' ? 'All' : lang('FilterAllChats'),\n      },\n      ...displayedFolders.map(({ id, title }) => ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && e.shiftKey && getKeyFromEvent(e) === 'f') {\n        e.preventDefault();\n        setContent(LeftColumnContent.GlobalSearch);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [content]);\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport const useResize = (\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) => {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('no-selection', 'cursor-ew-resize');\n  }\n\n  function initResize(event: React.MouseEvent<HTMLElement, MouseEvent>) {\n    document.body.classList.add('no-selection', 'cursor-ew-resize');\n\n    setInitialMouseX(event.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(event: React.MouseEvent<HTMLElement, MouseEvent>) {\n    event.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + event.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nconst useWindowSize = () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n\nexport default useWindowSize;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition, ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_MAC_OS, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    openCallFallbackConfirm,\n    requestNextManagementScreen,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  useEffect(() => {\n    if (!canSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (\n        IS_PWA && ((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && !e.shiftKey && getKeyFromEvent(e) === 'f'\n      ) {\n        e.preventDefault();\n        handleSearchClick();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [canSearch, handleSearchClick]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={openCallFallbackConfirm}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getDispatch();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n    setAudioPlayerMuted({ isMuted: false });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerMuted, setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../modules/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalState, MessageListType } from '../../global/types';\nimport {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser, MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import { RefObject } from 'react';\nimport React, { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getDispatch();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        id={id}\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ActiveReaction } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getDispatch();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId, ApiMediaFormat.Lottie);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId, ApiMediaFormat.Lottie);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            id={`reaction_emoji_${centerIconId}`}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            animationData={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            id={`reaction_effect_${effectId}`}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            animationData={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && message.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { NO_STICKER_SET_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isLottie, stickerSetId, isGif } = sticker;\n  const canDisplayGif = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = stickerSetId === NO_STICKER_SET_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const previewMediaHash = isGif && !canDisplayGif && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useWebpThumbnail(message);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  useEffect(() => {\n    if (!isGif || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isGif, shouldPlay]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {(!isMediaReady || (isGif && !canDisplayGif)) && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isGif && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isGif && canDisplayGif && isMediaReady && (\n        <video\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openUserInfo } = getDispatch();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getDispatch();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getDispatch();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../modules/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getDispatch();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getDispatch();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getDispatch();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import React, {\n  FC, memo, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from './helpers/animatedAssets';\nimport useAnimatedEmoji from './hooks/useAnimatedEmoji';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nconst QUALITY = 1;\n\ntype OwnProps = {\n  localSticker?: string;\n  localEffect?: string;\n  isOwn?: boolean;\n  soundId?: string;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\nconst LocalAnimatedEmoji: FC<OwnProps> = ({\n  localSticker,\n  localEffect,\n  isOwn,\n  soundId,\n  size = 'medium',\n  observeIntersection,\n  messageId,\n  chatId,\n  activeEmojiInteraction,\n}) => {\n  const {\n    playKey,\n    ref,\n    style,\n    width,\n    handleClick,\n    markAnimationLoaded,\n  } = useAnimatedEmoji(size, chatId, messageId, soundId, activeEmojiInteraction, isOwn, localEffect);\n  const id = `local_emoji_${localSticker}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [localStickerAnimationData, setLocalStickerAnimationData] = useState<string>();\n  useEffect(() => {\n    if (localSticker) {\n      getAnimationData(localSticker as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalStickerAnimationData(data);\n      });\n    }\n  }, [localSticker]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      // @ts-ignore teact feature\n      style={style}\n      onClick={handleClick}\n    >\n      {localStickerAnimationData && (\n        <AnimatedSticker\n          key={id}\n          id={id}\n          animationData={localStickerAnimationData}\n          size={width}\n          quality={QUALITY}\n          play={isIntersecting && playKey}\n          forceOnHeavyAnimation\n          noLoop\n          onLoad={markAnimationLoaded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(LocalAnimatedEmoji);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectMessageIdsByGroupId,\n  selectLocalAnimatedEmoji,\n  selectIsMessageProtected,\n  selectLocalAnimatedEmojiEffect,\n  selectDefaultReaction,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport LocalAnimatedEmoji from '../../common/LocalAnimatedEmoji';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  localSticker?: string;\n  localEffect?: string;\n  animatedEmojiEffect?: ApiSticker;\n  animatedEmojiSoundId?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  localSticker,\n  localEffect,\n  animatedEmojiEffect,\n  animatedEmojiSoundId,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteraction,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickInlineButton,\n    disableContextMenuHint,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = localSticker || animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && defaultReaction && !isInDocumentGroupNotLast;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n\n  let metaPosition!: MetaPosition;\n  if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            sticker={animatedEmoji}\n            effect={animatedEmojiEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        )}\n        {localSticker && (\n          <LocalAnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            localSticker={localSticker}\n            localEffect={localEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const localSticker = singleEmoji ? selectLocalAnimatedEmoji(global, singleEmoji) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender: canShowSender ? sender : undefined,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      animatedEmojiEffect: singleEmoji && isUserId(chatId) ? selectAnimatedEmojiEffect(global, singleEmoji) : undefined,\n      animatedEmojiSoundId: singleEmoji ? selectAnimatedEmojiSound(global, singleEmoji) : undefined,\n      localSticker,\n      localEffect: localSticker && isUserId(chatId) ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: selectDefaultReaction(global, chatId),\n      activeReaction: global.activeReactions[id],\n      activeEmojiInteraction: global.activeEmojiInteraction,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isUserId(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else if (isUserId(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, openUserInfo, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../modules/selectors';\nimport { getChatTitle, getUserFullName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getDispatch();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  const handleClick = () => {\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getDispatch } from '../../lib/teact/teactn';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getDispatch();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../modules/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n}) => {\n  const { focusNextReply } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getDispatch();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useState } from '../lib/teact/teact';\n\nimport useDebounce from './useDebounce';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const runDebounced = useDebounce(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickInlineButton } = getDispatch();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getDispatch();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../modules/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getDispatch();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE, SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n  selectUser,\n  selectUserStatus,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isUserId,\n  isChatAdmin,\n  isChatSuperGroup,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport Avatar from '../../common/Avatar';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    isPollModalOpen?: boolean;\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    serverTimeOffset: number;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n  } = getDispatch();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal);\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        openCalendar();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? openCalendar\n      : handleSend;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: Boolean(\n        !isChatWithSelf && !isChatWithBot && chat && chatUser\n        && isUserId(chatId) && selectUserStatus(global, chatId)?.wasOnline,\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n) => {\n  const { editMessage } = getDispatch();\n\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n\nexport default useEditing;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { emojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(Bundles.Extra, 'EmojiInteractionAnimation', !emojiInteraction);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport {\n  MessageListType,\n  MessageList as GlobalMessageList,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteraction,\n}) => {\n  const {\n    openChat,\n    unpinAllMessages,\n    loadUser,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    withBottomShift={withMessageListBottomShift}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleStartBot}\n                        >\n                          {lang('BotStart')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleRestartBot}\n                        >\n                          {lang('BotRestart')}\n                        </Button>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                    <SeenByModal isOpen={isSeenByModalOpen} />\n                    <ReactorListModal isOpen={isReactorListModalOpen} />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      {activeEmojiInteraction && (\n        <EmojiInteractionAnimation emojiInteraction={activeEmojiInteraction} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds }, activeEmojiInteraction } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      activeEmojiInteraction,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isUserId(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { ApiExportedInvite } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  shouldSkipAnimation,\n  isEditingInvite,\n  currentInviteInfo,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    addContact,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    addContact({ userId });\n  }, [addContact, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../modules/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  userId?: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    openUserInfo,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, loadCommonChats, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    commonChatIds, usersById, userStatusesById, chatsById, chatMessages, foundIds, chatId, lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n    }\n    if (resolvedUserId) {\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getDispatch();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  currentProfileUserId?: string;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    openUserInfo,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../modules/helpers';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessageMediaDownload } = getDispatch();\n\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  groupCallId?: string;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !groupCallId);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst CallFallbackConfirmAsync: FC<OwnProps> = ({ isOpen }) => {\n  const CallFallbackConfirm = useModuleLoader(Bundles.Calls, 'CallFallbackConfirm', !isOpen);\n\n  return CallFallbackConfirm ? <CallFallbackConfirm isOpen={isOpen} /> : undefined;\n};\n\nexport default memo(CallFallbackConfirmAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { LangCode } from '../../types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport CallFallbackConfirm from '../calls/CallFallbackConfirm.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isCallFallbackConfirmOpen: boolean;\n  addedSetIds?: string[];\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  isCallFallbackConfirmOpen,\n  addedSetIds,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n  } = getDispatch();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && (\n        <>\n          <GroupCall groupCallId={activeGroupCallId} />\n          <ActiveCallHeader groupCallId={activeGroupCallId} />\n        </>\n      )}\n      <DownloadManager />\n      <CallFallbackConfirm isOpen={isCallFallbackConfirmOpen} />\n      <UnreadCount isForAppBadge />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isCallFallbackConfirmOpen: Boolean(global.groupCalls.isFallbackConfirmOpen),\n      addedSetIds: global.stickers.added.setIds,\n    };\n  },\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","message","byChatId","activeDownloads","filter","map","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","join","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","text","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","result","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","Promise","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","sort","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","cached","setsById","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","releaseStatusTimeout","loadAndReplaceArchivedChats","CHAT_LIST_LOAD_SLICE","archived","withPinned","updateUsers","addUserStatuses","userStatusesById","updateChats","replaceChatListIds","chatIds","updateChatListSecondaryInfo","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","loadTopMessages","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","currentType","currentResults","timestamp","getDispatch","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","current","managementState","offsetDate","offsetUserId","offsetUser","currentInviteInfo","importers","isRequested","requesters","joinRequests","userId","isApproved","targetChat","importer","recentRequesterIds","requestsPending","afterSyncCallback","DEBUG","console","log","isSyncing","savedUsers","lastLocalServiceMessage","selectLastServiceNotification","savedPrivateChatIds","savedChats","currentChatId","selectedChat","isUserId","selectedChatUser","replaceUserStatuses","replaceChats","draftsById","replyingToById","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","reduce","acc","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","Array","prototype","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","all","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","statusesById","topPeers","lastRequestedAt","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","updateChatMutedState","phoneNumber","phone","updateContact","deleteContact","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","pick","runDebouncedForSearch","sendBotCommand","command","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","interactions","startX","startY","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","endX","endY","reaction","selectDefaultReaction","sendReaction","reactions","some","isChosen","animationLevel","settings","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","appConfig","defaultReaction","reactors","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","listType","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutNewMessage","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","photo","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","currentReactions","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","privacy","key","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","className","formatIntegerCompact","ConnectionStatus","useConnectionStatus","lang","hasMiddleHeader","isMinimized","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","replace","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","name","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","theme","selectTheme","isMessageListOpen","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","ripple","ariaLabel","buildClassName","handleSearchFocus","useCallback","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","langCode","href","FEEDBACK_URL","setPermanentWebVersion","clearWebsync","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","folderTabs","ALL_FOLDER_ID","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","IS_MAC_OS","metaKey","getKeyFromEvent","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","remove","style","handleMouseMove","event","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","add","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","handleResize","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","pendingJoinRequests","canExpandActions","joinChannel","openLocalTextSearch","restartBot","openCallFallbackConfirm","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","focus","searchInput","IS_PWA","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderInfo","renderBackButton","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCounter","isAudioPlayerRendered","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","animationData","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","views","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isLottie","isGif","canDisplayGif","IS_WEBM_SUPPORTED","isMemojiSticker","NO_STICKER_SET_ID","shouldLoad","mediaHash","previewMediaHash","previewUrl","getMessageMediaFormat","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","safePlay","autoPlay","playsInline","loop","muted","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","canAutoLoad","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","useHeavyAnimationCheck","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","openUserInfo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","currentOnRelease","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","recentReplierIds","recentRepliers","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","localSticker","soundId","playKey","useAnimatedEmoji","localStickerAnimationData","setLocalStickerAnimationData","getAnimationData","quality","APPENDIX_OWN","__html","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","selectIsDownloading","actualThreadInfo","isInDocumentGroup","documentGroupFirstMessageId","reactionMessage","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","animatedEmojiEffect","selectAnimatedEmojiEffect","animatedEmojiSoundId","selectAnimatedEmojiSound","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoLoadMedia","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","clickInlineButton","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","withCommentButton","withQuickReactionButton","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","effect","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","dangerouslySetInnerHTML","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","getUserFullName","chatInviteTitle","chatInviteHash","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useOnChange","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","useInterval","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","CalendarModal","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","SendAsMenu","MainButtonState","VOICE_RECORDING_FILENAME","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","editingMessage","canScheduleUntilOnline","selectUserStatus","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","canShowSendAs","sendMessageAction","useSendMessageAction","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachMedia","canAttachPolls","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","newHtml","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","editMessage","getTextWithEntitiesAsHtml","hasMessageMedia","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","files","getFilesFromDataTransferItems","newAttachments","file","useClipboardPaste","handleFileSelect","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","emojiInteraction","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canAddContact","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","shouldSkipAnimation","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","addContact","setEditingExportedInvite","deleteExportedChatInvite","backButtonRef","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","handleAddContact","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","renderingContentKey","renderHeaderContent","confirmIsDestructive","autoFocusSearch","isBackButton","buttonClassName","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","memberId","handler","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","CallFallbackConfirm","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isCallFallbackConfirmOpen","isFallbackConfirmOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}