{"version":3,"file":"640.c329e19eedaf84c239cd.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/modules/reducers/reactions.ts","webpack://telegram-t/./src/modules/actions/api/reactions.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/common/LocalAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/CallFallbackConfirm.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n    },\n  };\n});\n\naddReducer('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddReducer('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddReducer('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddReducer('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddReducer('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddReducer('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddReducer('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddReducer('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateUserSearch } from '../../reducers';\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddReducer('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddReducer('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('requestNextManagementScreen', (global, actions, payload): GlobalState | undefined => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('sendMessageAction', (global, actions, payload) => {\n  (async () => {\n    const { action, chatId, threadId } = payload!;\n    if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n    const chat = selectChat(global, chatId)!;\n    if (!chat) return;\n\n    await callApi('sendMessageAction', {\n      peer: chat, threadId, action,\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global, action, payload) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadSeenBy', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSeenBy', { chat, messageId });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n      seenByUserIds: result,\n    }));\n  })();\n});\n\naddReducer('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddReducer('loadSendAs', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSendAs', { chat });\n    if (!result) {\n      global = updateChat(global, chatId, {\n        sendAsIds: [],\n      });\n      setGlobal(global);\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChat(global, chatId, {\n      sendAsIds: result.ids,\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddReducer('loadSponsoredMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSponsoredMessages', { chat });\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = updateSponsoredMessage(getGlobal(), chatId, result.messages[0]);\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    newGlobal = addChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  const cached = global.stickers.setsById;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      const id = addedSetIds[i];\n      if (cached[id].stickers) {\n        continue; // Already loaded\n      }\n      actions.loadStickers({ stickerSetId: id });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateChat, updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddReducer('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddReducer('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddReducer('loadExportedChatInvites', (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  (async () => {\n    const result = await callApi('fetchExportedChatInvites', {\n      peer, admin, isRevoked, limit,\n    });\n    if (!result) {\n      return;\n    }\n    const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n    setGlobal(updateManagement(getGlobal(), chatId, update));\n  })();\n});\n\naddReducer('editExportedChatInvite', (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('editExportedChatInvite', {\n      peer,\n      link,\n      isRevoked,\n      expireDate,\n      usageLimit,\n      isRequestNeeded,\n      title,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    let invites = global.management.byChatId[chatId].invites || [];\n    const revokedInvites = global.management.byChatId[chatId].revokedInvites || [];\n    const { oldInvite, newInvite } = result;\n    invites = invites.filter((current) => current.link !== oldInvite.link);\n    if (newInvite.isRevoked) {\n      revokedInvites.unshift(newInvite);\n    } else {\n      invites.push(newInvite);\n    }\n    setGlobal(updateManagement(global, chatId, {\n      invites,\n      revokedInvites,\n    }));\n  })();\n});\n\naddReducer('exportChatInvite', (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('exportChatInvite', {\n      peer,\n      expireDate,\n      usageLimit,\n      isRequestNeeded,\n      title,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const invites = global.management.byChatId[chatId].invites || [];\n    setGlobal(updateManagement(global, chatId, {\n      invites: [...invites, result],\n    }));\n  })();\n});\n\naddReducer('deleteExportedChatInvite', (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('deleteExportedChatInvite', {\n      peer,\n      link,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const managementState = global.management.byChatId[chatId];\n    setGlobal(updateManagement(global, chatId, {\n      invites: managementState?.invites?.filter((invite) => invite.link !== link),\n      revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n    }));\n  })();\n});\n\naddReducer('deleteRevokedExportedChatInvites', (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  (async () => {\n    const result = await callApi('deleteRevokedExportedChatInvites', {\n      peer,\n      admin,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    setGlobal(updateManagement(global, chatId, {\n      revokedInvites: [],\n    }));\n  })();\n});\n\naddReducer('loadChatInviteImporters', (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      link,\n      offsetDate,\n      offsetUser,\n      limit,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n    if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) return;\n    setGlobal(updateManagement(global, chatId, {\n      inviteInfo: {\n        ...currentInviteInfo,\n        importers: result,\n      },\n    }));\n  })();\n});\n\naddReducer('loadChatInviteRequesters', (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      link,\n      offsetDate,\n      offsetUser,\n      limit,\n      isRequested: true,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n    if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) return;\n    setGlobal(updateManagement(global, chatId, {\n      inviteInfo: {\n        ...currentInviteInfo,\n        requesters: result,\n      },\n    }));\n  })();\n});\n\naddReducer('loadChatJoinRequests', (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      offsetDate,\n      offsetUser,\n      limit,\n      isRequested: true,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    setGlobal(updateChat(global, chatId, { joinRequests: result }));\n  })();\n});\n\naddReducer('hideChatJoinRequest', (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  (async () => {\n    const result = await callApi('hideChatJoinRequest', {\n      peer,\n      user,\n      isApproved,\n    });\n\n    if (!result) return;\n    global = getGlobal();\n    const targetChat = selectChat(global, chatId);\n    if (!targetChat) return;\n    setGlobal(updateChat(global, chatId, {\n      joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n    }));\n  })();\n});\n\naddReducer('hideAllChatJoinRequests', (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('hideAllChatJoinRequests', {\n      peer,\n      isApproved,\n      link,\n    });\n\n    if (!result) return;\n    global = getGlobal();\n    const targetChat = selectChat(global, chatId);\n    if (!targetChat) return;\n\n    setGlobal(updateChat(global, chatId, {\n      joinRequests: [],\n      fullInfo: {\n        ...targetChat.fullInfo,\n        recentRequesterIds: [],\n        requestsPending: 0,\n      },\n    }));\n  })();\n});\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiMessage, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  replaceThreadParam,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 10 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddReducer('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getDispatch();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    if (draft) {\n      acc[chatId] = draft;\n    }\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, pick, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, replaceUserStatuses, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchUsers', { users: [user] });\n    if (!result) {\n      return;\n    }\n\n    const { users, userStatusesById } = result;\n\n    global = getGlobal();\n\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n    setGlobal(replaceUserStatuses(global, {\n      ...global.users.statusesById,\n      ...userStatusesById,\n    }));\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddReducer('loadContactList', () => {\n  void loadContactList();\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('loadCommonChats', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  (async () => {\n    const maxId = user.commonChats?.maxId;\n    const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n    if (!result) {\n      return;\n    }\n\n    const { chats, chatIds, isFullyLoaded } = result;\n\n    global = getGlobal();\n    if (chats.length) {\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n    }\n    global = updateUser(global, user.id, {\n      commonChats: {\n        maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n        ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n        isFullyLoaded,\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (user.phoneNumber) {\n    result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('addContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n    });\n  }\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddReducer('addContact', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  void callApi('addContact', pick(user, ['id', 'accessHash', 'firstName', 'lastName', 'phoneNumber']));\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'requestSelfContact': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots');\n    if (!result) {\n      return;\n    }\n\n    const { ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport { GlobalState } from '../../global/types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiAppConfig, ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction } from '../../reducers/reactions';\nimport { addUsers, updateChatMessage } from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\naddReducer('loadAvailableReactions', () => {\n  (async () => {\n    const result = await callApi('getAvailableReactions');\n\n    if (!result) {\n      return;\n    }\n\n    // Preload animations\n    result.forEach((availableReaction) => {\n      if (availableReaction.aroundAnimation) {\n        mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.Lottie);\n      }\n      if (availableReaction.centerIcon) {\n        mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.Lottie);\n      }\n    });\n\n    setGlobal({\n      ...getGlobal(),\n      availableReactions: result,\n    });\n  })();\n});\n\naddReducer('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      animatedEffect: emoji || localEffect,\n      x: subtractXForEmojiInteraction(global, x),\n      y,\n      startSize,\n      isReversed,\n    },\n  };\n});\n\naddReducer('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n    x, y, startX, startY, startSize,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n\n  if (!global.activeEmojiInteraction) return undefined;\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      ...global.activeEmojiInteraction,\n      endX: subtractXForEmojiInteraction(global, x),\n      endY: y,\n      ...(startX && { x: subtractXForEmojiInteraction(global, startX) }),\n      ...(startY && { y: startY }),\n      ...(startSize && { startSize }),\n    },\n  };\n});\n\naddReducer('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddReducer('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddReducer('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddReducer('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddReducer('setDefaultReaction', (global, actions, payload) => {\n  const { reaction } = payload;\n\n  (async () => {\n    const result = await callApi('setDefaultReaction', { reaction });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      appConfig: {\n        ...global.appConfig,\n        defaultReaction: reaction,\n      } as ApiAppConfig,\n    });\n  })();\n});\n\naddReducer('stopActiveEmojiInteraction', (global) => {\n  return {\n    ...global,\n    activeEmojiInteraction: undefined,\n  };\n});\n\naddReducer('loadReactors', (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n\n  (async () => {\n    const result = await callApi('fetchMessageReactionsList', {\n      reaction,\n      chat,\n      messageId,\n      offset,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    if (result.users?.length) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    }\n\n    const { nextOffset, count, reactions } = result;\n\n    setGlobal(updateChatMessage(global, chatId, messageId, {\n      reactors: {\n        nextOffset,\n        count,\n        reactions: [\n          ...(message.reactors?.reactions || []),\n          ...reactions,\n        ],\n      },\n    }));\n  })();\n});\n\naddReducer('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddReducer('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteraction || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      ...global.activeEmojiInteraction,\n      x: subtractXForEmojiInteraction(global, x),\n      y,\n      startSize,\n      isReversed,\n    },\n  };\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutNewMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      setGlobal(leaveChat(global, update.id));\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      notifyAboutNewMessage({\n        chat,\n        message,\n      });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (chat) {\n        global = updateChat(global, chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            requestsPending,\n            recentRequesterIds,\n          },\n        });\n        setGlobal(global);\n        actions.loadChatJoinRequests({ chatId });\n      }\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText,\n} from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (global.activeEmojiInteraction || currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteraction: {\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction,\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const currentReactions = message?.reactions;\n\n      // `updateMessageReactions` happens with an interval so we try to avoid redundant global state updates\n      if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n        return;\n      }\n\n      setGlobal(updateChatMessage(global, chatId, id, { reactions: update.reactions }));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer, getGlobal } from '../../../lib/teact/teactn';\nimport { ApiUpdate } from '../../../api/types';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(global, groupCallId, participant.id, participant,\n            Boolean(nextOffset) || currentUserId === participant.id);\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {() => connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ISettings, LeftColumnContent } from '../../../types';\nimport { ApiChat } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../modules/selectors';\nimport { isChatArchived } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n}) => {\n  const {\n    openChat,\n    openTipsChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n  } = getDispatch();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          {() => (\n            <ConnectionStatusOverlay\n              connectionStatus={connectionStatus}\n              connectionStatusText={connectionStatusText!}\n              onClick={toggleConnectionStatus}\n            />\n          )}\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n    };\n  },\n)(LeftMainHeader));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatFolder } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      {\n        id: ALL_FOLDER_ID,\n        title: lang.code === 'en' ? 'All' : lang('FilterAllChats'),\n      },\n      ...displayedFolders.map(({ id, title }) => ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <div className={fabClassName}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && e.shiftKey && getKeyFromEvent(e) === 'f') {\n        e.preventDefault();\n        setContent(LeftColumnContent.GlobalSearch);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [content]);\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport const useResize = (\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) => {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('no-selection', 'cursor-ew-resize');\n  }\n\n  function initResize(event: React.MouseEvent<HTMLElement, MouseEvent>) {\n    document.body.classList.add('no-selection', 'cursor-ew-resize');\n\n    setInitialMouseX(event.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(event: React.MouseEvent<HTMLElement, MouseEvent>) {\n    event.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + event.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nconst useWindowSize = () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n\nexport default useWindowSize;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition, ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_MAC_OS, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    openCallFallbackConfirm,\n    requestNextManagementScreen,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  useEffect(() => {\n    if (!canSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (\n        IS_PWA && ((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && !e.shiftKey && getKeyFromEvent(e) === 'f'\n      ) {\n        e.preventDefault();\n        handleSearchClick();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [canSearch, handleSearchClick]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={openCallFallbackConfirm}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getDispatch();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n    setAudioPlayerMuted({ isMuted: false });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerMuted, setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../modules/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalState, MessageListType } from '../../global/types';\nimport {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser, MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import { RefObject } from 'react';\nimport React, { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getDispatch();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        id={id}\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ActiveReaction } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getDispatch();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId, ApiMediaFormat.Lottie);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId, ApiMediaFormat.Lottie);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            id={`reaction_emoji_${centerIconId}`}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            animationData={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            id={`reaction_effect_${effectId}`}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            animationData={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { NO_STICKER_SET_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isLottie, stickerSetId, isGif } = sticker;\n  const canDisplayGif = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = stickerSetId === NO_STICKER_SET_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const previewMediaHash = isGif && !canDisplayGif && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useWebpThumbnail(message);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  useEffect(() => {\n    if (!isGif || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isGif, shouldPlay]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {(!isMediaReady || (isGif && !canDisplayGif)) && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isGif && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isGif && canDisplayGif && isMediaReady && (\n        <video\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getDispatch();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getDispatch();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getDispatch();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../modules/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getDispatch();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getDispatch();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getDispatch();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import React, {\n  FC, memo, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from './helpers/animatedAssets';\nimport useAnimatedEmoji from './hooks/useAnimatedEmoji';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nconst QUALITY = 1;\n\ntype OwnProps = {\n  localSticker?: string;\n  localEffect?: string;\n  isOwn?: boolean;\n  soundId?: string;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\nconst LocalAnimatedEmoji: FC<OwnProps> = ({\n  localSticker,\n  localEffect,\n  isOwn,\n  soundId,\n  size = 'medium',\n  observeIntersection,\n  messageId,\n  chatId,\n  activeEmojiInteraction,\n}) => {\n  const {\n    playKey,\n    ref,\n    style,\n    width,\n    handleClick,\n    markAnimationLoaded,\n  } = useAnimatedEmoji(size, chatId, messageId, soundId, activeEmojiInteraction, isOwn, localEffect);\n  const id = `local_emoji_${localSticker}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [localStickerAnimationData, setLocalStickerAnimationData] = useState<string>();\n  useEffect(() => {\n    if (localSticker) {\n      getAnimationData(localSticker as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalStickerAnimationData(data);\n      });\n    }\n  }, [localSticker]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    >\n      {localStickerAnimationData && (\n        <AnimatedSticker\n          key={id}\n          id={id}\n          animationData={localStickerAnimationData}\n          size={width}\n          quality={QUALITY}\n          play={isIntersecting && playKey}\n          forceOnHeavyAnimation\n          noLoop\n          onLoad={markAnimationLoaded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(LocalAnimatedEmoji);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectMessageIdsByGroupId,\n  selectLocalAnimatedEmoji,\n  selectIsMessageProtected,\n  selectLocalAnimatedEmojiEffect,\n  selectDefaultReaction,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport LocalAnimatedEmoji from '../../common/LocalAnimatedEmoji';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  localSticker?: string;\n  localEffect?: string;\n  animatedEmojiEffect?: ApiSticker;\n  animatedEmojiSoundId?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  localSticker,\n  localEffect,\n  animatedEmojiEffect,\n  animatedEmojiSoundId,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteraction,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickInlineButton,\n    disableContextMenuHint,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = localSticker || animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && defaultReaction && !isInDocumentGroupNotLast;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n\n  let metaPosition!: MetaPosition;\n  if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            sticker={animatedEmoji}\n            effect={animatedEmojiEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        )}\n        {localSticker && (\n          <LocalAnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            localSticker={localSticker}\n            localEffect={localEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const localSticker = singleEmoji ? selectLocalAnimatedEmoji(global, singleEmoji) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender: canShowSender ? sender : undefined,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      animatedEmojiEffect: singleEmoji && isUserId(chatId) ? selectAnimatedEmojiEffect(global, singleEmoji) : undefined,\n      animatedEmojiSoundId: singleEmoji ? selectAnimatedEmojiSound(global, singleEmoji) : undefined,\n      localSticker,\n      localEffect: localSticker && isUserId(chatId) ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteraction: global.activeEmojiInteraction,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../modules/selectors';\nimport { getChatTitle, getUserFullName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getDispatch();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  const handleClick = () => {\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getDispatch } from '../../lib/teact/teactn';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getDispatch();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../modules/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n}) => {\n  const { focusNextReply } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getDispatch();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useState } from '../lib/teact/teact';\n\nimport useDebounce from './useDebounce';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const runDebounced = useDebounce(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickInlineButton } = getDispatch();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getDispatch();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../modules/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getDispatch();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE, SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n  selectUser,\n  selectUserStatus,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isUserId,\n  isChatAdmin,\n  isChatSuperGroup,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport Avatar from '../../common/Avatar';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    isPollModalOpen?: boolean;\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    serverTimeOffset: number;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n  } = getDispatch();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal);\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        openCalendar();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? openCalendar\n      : handleSend;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: Boolean(\n        !isChatWithSelf && !isChatWithBot && chat && chatUser\n        && isUserId(chatId) && selectUserStatus(global, chatId)?.wasOnline,\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n) => {\n  const { editMessage } = getDispatch();\n\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n\nexport default useEditing;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { emojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(Bundles.Extra, 'EmojiInteractionAnimation', !emojiInteraction);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport {\n  MessageListType,\n  MessageList as GlobalMessageList,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteraction,\n}) => {\n  const {\n    openChat,\n    unpinAllMessages,\n    loadUser,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    withBottomShift={withMessageListBottomShift}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleStartBot}\n                        >\n                          {lang('BotStart')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleRestartBot}\n                        >\n                          {lang('BotRestart')}\n                        </Button>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                    <SeenByModal isOpen={isSeenByModalOpen} />\n                    <ReactorListModal isOpen={isReactorListModalOpen} />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      {activeEmojiInteraction && (\n        <EmojiInteractionAnimation emojiInteraction={activeEmojiInteraction} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds }, activeEmojiInteraction } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      activeEmojiInteraction,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isUserId(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { ApiExportedInvite } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  shouldSkipAnimation,\n  isEditingInvite,\n  currentInviteInfo,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    addContact,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    addContact({ userId });\n  }, [addContact, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../modules/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, loadCommonChats, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    commonChatIds, usersById, userStatusesById, chatsById, chatMessages, foundIds, chatId, lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getDispatch();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst CLOSE_ANIMATION_DURATION = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, CLOSE_ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack(isChatSelected && (\n    contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers\n  ), () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../modules/helpers';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessageMediaDownload } = getDispatch();\n\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  groupCallId?: string;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !groupCallId);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst CallFallbackConfirmAsync: FC<OwnProps> = ({ isOpen }) => {\n  const CallFallbackConfirm = useModuleLoader(Bundles.Calls, 'CallFallbackConfirm', !isOpen);\n\n  return CallFallbackConfirm ? <CallFallbackConfirm isOpen={isOpen} /> : undefined;\n};\n\nexport default memo(CallFallbackConfirmAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { LangCode } from '../../types';\nimport { ApiMessage, ApiUpdateAuthorizationStateType, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport CallFallbackConfirm from '../calls/CallFallbackConfirm.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  authState?: ApiUpdateAuthorizationStateType;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isCallFallbackConfirmOpen: boolean;\n  addedSetIds?: string[];\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  connectionState,\n  authState,\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  isCallFallbackConfirmOpen,\n  addedSetIds,\n}) => {\n  const {\n    sync,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n  } = getDispatch();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n      sync();\n    }\n  }, [connectionState, authState, sync]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && (\n        <>\n          <GroupCall groupCallId={activeGroupCallId} />\n          <ActiveCallHeader groupCallId={activeGroupCallId} />\n        </>\n      )}\n      <DownloadManager />\n      <CallFallbackConfirm isOpen={isCallFallbackConfirmOpen} />\n      <UnreadCount isForAppBadge />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      connectionState: global.connectionState,\n      authState: global.authState,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isCallFallbackConfirmOpen: Boolean(global.groupCalls.isFallbackConfirmOpen),\n      addedSetIds: global.stickers.added.setIds,\n    };\n  },\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","message","byChatId","activeDownloads","filter","map","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","join","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","text","parseMessageInput","versionNotification","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","result","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","Promise","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","sort","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","cached","setsById","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","getDispatch","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","current","managementState","offsetDate","offsetUserId","offsetUser","currentInviteInfo","importers","isRequested","requesters","joinRequests","userId","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","reduce","acc","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","updateChatMutedState","phoneNumber","phone","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","pick","runDebouncedForSearch","sendBotCommand","command","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","interactions","startX","startY","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","endX","endY","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","animationLevel","settings","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","appConfig","defaultReaction","reactors","areDeepEqual","value1","value2","type1","isArray1","Array","isArray","array1","array2","every","member1","object1","object2","key1","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutNewMessage","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","photo","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","currentReactions","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","privacy","key","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","className","formatIntegerCompact","ConnectionStatus","useConnectionStatus","lang","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","replace","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","name","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","theme","selectTheme","isMessageListOpen","areChatsLoaded","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","ripple","ariaLabel","buildClassName","handleSearchFocus","useCallback","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","langCode","href","FEEDBACK_URL","setPermanentWebVersion","clearWebsync","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","folderTabs","ALL_FOLDER_ID","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","handleMouseEnter","handleMouseLeave","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","IS_MAC_OS","metaKey","getKeyFromEvent","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","remove","style","handleMouseMove","event","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","add","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","handleResize","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","pendingJoinRequests","canExpandActions","joinChannel","openLocalTextSearch","restartBot","openCallFallbackConfirm","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","focus","searchInput","IS_PWA","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderInfo","renderBackButton","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCounter","isAudioPlayerRendered","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","animationData","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","views","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isLottie","isGif","canDisplayGif","IS_WEBM_SUPPORTED","isMemojiSticker","NO_STICKER_SET_ID","shouldLoad","mediaHash","previewMediaHash","previewUrl","getMessageMediaFormat","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","safePlay","autoPlay","playsInline","loop","muted","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","canAutoLoad","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","useHeavyAnimationCheck","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","recentReplierIds","recentRepliers","peerId","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","localSticker","soundId","playKey","useAnimatedEmoji","localStickerAnimationData","setLocalStickerAnimationData","getAnimationData","quality","APPENDIX_OWN","__html","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","selectIsDownloading","actualThreadInfo","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","animatedEmojiEffect","selectAnimatedEmojiEffect","animatedEmojiSoundId","selectAnimatedEmojiSound","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoLoadMedia","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","clickInlineButton","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","withCommentButton","withQuickReactionButton","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","effect","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","dangerouslySetInnerHTML","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","getUserFullName","chatInviteTitle","chatInviteHash","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useOnChange","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","useInterval","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","CalendarModal","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","SendAsMenu","MainButtonState","VOICE_RECORDING_FILENAME","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","editingMessage","canScheduleUntilOnline","selectUserStatus","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","canShowSendAs","sendMessageAction","useSendMessageAction","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachMedia","canAttachPolls","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","newHtml","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","editMessage","getTextWithEntitiesAsHtml","hasMessageMedia","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","files","getFilesFromDataTransferItems","newAttachments","all","file","useClipboardPaste","handleFileSelect","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","emojiInteraction","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canAddContact","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","shouldSkipAnimation","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","addContact","setEditingExportedInvite","deleteExportedChatInvite","backButtonRef","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","handleAddContact","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","renderingContentKey","renderHeaderContent","confirmIsDestructive","autoFocusSearch","isBackButton","buttonClassName","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","memberId","handler","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","CallFallbackConfirm","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","authState","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isCallFallbackConfirmOpen","isFallbackConfirmOpen","sync","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}