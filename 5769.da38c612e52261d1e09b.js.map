{"version":3,"file":"5769.da38c612e52261d1e09b.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (global.premiumModal?.promo && global.premiumModal?.isOpen) {\n    global = {\n      ...global,\n      premiumModal: {\n        ...global.premiumModal,\n        isOpen: false,\n      },\n    };\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload) => {\n  const { chatId, text, files } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId });\n  }\n\n  return {\n    ...global,\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  };\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload) => {\n  const { folderId } = payload;\n  return {\n    ...global,\n    deleteFolderDialogModal: folderId,\n  };\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global) => {\n  return {\n    ...global,\n    deleteFolderDialogModal: undefined,\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectScheduledMessages,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('changeForwardRecipient', (global) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  };\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noAuthors: payload,\n      noCaptions: payload && global.forwardMessages.noCaptions, // `noCaptions` cannot be true when `noAuthors` is false\n    },\n  };\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noCaptions: payload,\n      noAuthors: payload, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\n\nimport { APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectChatMessage, selectCurrentMessageList, selectIsTrustedBot } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, action, payload) => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global) => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      [isCustomEmoji ? 'customEmoji' : 'added']: {\n        setIds: order,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n\naddActionHandler('requestConfetti', (global, actions, payload) => {\n  const {\n    top, left, width, height,\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return {\n    ...global,\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload) => {\n  const { limit } = payload;\n\n  return {\n    ...global,\n    limitReachedModal: {\n      limit,\n    },\n  };\n});\n\naddActionHandler('closeLimitReachedModal', (global) => {\n  return {\n    ...global,\n    limitReachedModal: undefined,\n  };\n});\n\naddActionHandler('closeStickerSetModal', (global) => {\n  return {\n    ...global,\n    openedStickerSetShortName: undefined,\n  };\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload) => {\n  const { setIds } = payload;\n  return {\n    ...global,\n    openedCustomEmojiSetIds: setIds,\n  };\n});\n\naddActionHandler('closeCustomEmojiSets', (global) => {\n  return {\n    ...global,\n    openedCustomEmojiSetIds: undefined,\n  };\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload) => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', () => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        setGlobal({\n          ...getGlobal(),\n          isUpdateAvailable: true,\n        });\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('closePaymentModal', (global) => {\n  const status = global.payment.status;\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  global = {\n    ...global,\n    payment: {\n      ...global.payment,\n      status,\n    },\n  };\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'failed',\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload) => {\n  const isHidden = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isHidden,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_STATE } from '../../initialState';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  migrateCache(global, cloneDeep(INITIAL_STATE));\n\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { GlobalActions } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  if (threadId === MAIN_THREAD_ID) {\n    const result = await callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n\n    if (!result) {\n      draft.isLocal = true;\n    }\n  }\n  global = getGlobal();\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload) => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions,\n  } = global.forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = updateChatMessage(getGlobal(), chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload) => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsPeerIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatId', async (global, actions, payload) => {\n  const { id } = payload;\n  let user = selectUser(global, id);\n  if (user && selectForwardsContainVoiceMessages(global)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: getTranslation('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n      });\n      return;\n    }\n  }\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  });\n\n  actions.exitMessageSelectMode();\n  actions.forwardMessages({ isSilent: true });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiStickerSetInfo, ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global, actions) => {\n  void loadStickerSets(global.stickers.added.hash);\n  void loadCustomEmojiSets(global.customEmojis.added.hash);\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadPremiumStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadPremiumSetStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadPremiumGifts', async () => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    premiumGifts: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadCustomEmojiSets(hash?: string) {\n  const addedCustomEmojis = await callApi('fetchCustomEmojiSets', { hash });\n  if (!addedCustomEmojis) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  ));\n}\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetInfo: ApiStickerSetInfo) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetInfo },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if ('shortName' in stickerSetInfo && global.openedStickerSetShortName === stickerSetInfo.shortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global) => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global) => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  });\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    actions.showNotification({\n      message: getTranslation('StickerPack.ErrorNotFound'),\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { migrateChat } from './chats';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable, checkedUsername: username });\n  setGlobal(global);\n\n  if (isUsernameAvailable === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic' });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { GlobalState, Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        global = getGlobal();\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  if (previousGlobal?.connectionState === connectionState && previousGlobal?.authState === authState) return;\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async () => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeWebSessions: {\n      byHash: result,\n      orderedHashes: Object.keys(result),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  callApi('fetchFullUser', { id, accessHash });\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  bot = selectUser(getGlobal(), botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, botId, theme, buttonText,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload) => {\n  if (!global.webApp?.url) return undefined;\n  return {\n    ...global,\n    webApp: {\n      ...global.webApp,\n      slug: payload.slug,\n    },\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachBots(hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(bot, isEnabled);\n});\n\nasync function toggleAttachBot(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleAttachBot', { bot, isEnabled });\n  await loadAttachBots();\n}\n\nasync function loadAttachBots(hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      requestedAttachBotInstall: {\n        botId,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: { chatId, botId, startParam },\n        },\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global) => {\n  const { requestedAttachBotInstall } = global;\n\n  const { botId, onConfirm } = requestedAttachBotInstall!;\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInstall: undefined,\n  });\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  await toggleAttachBot(bot, true);\n  if (onConfirm) {\n    const { action, payload } = onConfirm;\n    getActions()[action](payload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInstall: undefined,\n  };\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload) => {\n  const { botId, filter, startParam } = payload;\n  const currentChatId = selectCurrentMessageList(global)?.chatId;\n\n  const { attachMenu: { bots } } = global;\n  const bot = bots[botId];\n  if (!bot) return;\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || botId,\n      botId,\n      startParam,\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInChat: {\n      botId,\n      filter: supportedFilters,\n      startParam,\n    },\n  });\n});\n\naddActionHandler('cancelAttachBotInChat', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInChat: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ApiChat, ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const inputInvoice = selectPaymentInputInvoice(global);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const { requestInfo, saveInfo } = payload;\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(inputInvoice, requestInfo, saveInfo);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo({\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload) => {\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm({ slug: payload.slug });\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm({\n      chat,\n      messageId: payload.messageId,\n    });\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice);\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  });\n});\n\nasync function getPaymentForm(inputInvoice: ApiRequestInputInvoice): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice } = result;\n\n  let global = setPaymentForm(getGlobal(), form);\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload) => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider, temporaryPassword } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  setGlobal(updatePayment(global, { status: 'pending' }));\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' });\n  global = closeInvoice(global);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step ?? PaymentStep.Checkout);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload) => {\n  if (!global.premiumModal) return undefined;\n  const { isClosed } = payload || {};\n  return {\n    ...global,\n    premiumModal: {\n      ...global.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  };\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload) => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload) => {\n  const { forUserId } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  setGlobal({\n    ...global,\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  });\n});\n\naddActionHandler('closeGiftPremiumModal', (global) => {\n  setGlobal({\n    ...global,\n    giftPremiumModal: { isOpen: false },\n  });\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, { password }) => {\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } });\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } });\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout });\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo(inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport type { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport type { ApiChat } from '../../api/types';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport type { ApiAppConfig } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.find((l) => l.isUnread);\n\n        if (!unread) return undefined;\n\n        const reaction = unread?.reaction;\n\n        return [messageId, {\n          messageId,\n          reaction,\n        }];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        global = updateChat(global, update.chatId, {\n          unreadCount: (chat.unreadCount || 0) + 1,\n          ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        });\n      }\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (isLocal && message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isLocal) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        setGlobal({\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        });\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, getGlobal());\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        }));\n      } else if (media) {\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      setGlobal({\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      });\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n        actions.openPremiumModal({ isSuccess: true });\n      }\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n            isCallPanelVisible: undefined,\n            phoneCall: undefined,\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(getGlobal())!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        void checkNavigatorUserMediaPermissions(call.isVideo);\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { inputInvoice } = global.payment;\n\n      if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n        const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n        if (message && message.content.invoice) {\n          const { amount, currency, title } = message.content.invoice;\n\n          actions.showNotification({\n            message: langProvider.getTranslation('PaymentInfoHint', [\n              formatCurrency(amount, currency, langProvider.getTranslation.code),\n              title,\n            ]),\n          });\n        }\n      }\n\n      // On the production host, the payment frame receives a message with the payment event,\n      // after which the payment form closes. In other cases, the payment form must be closed manually.\n      // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n      if (!IS_PRODUCTION_HOST) {\n        global = closeInvoice(global);\n      }\n\n      if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n        return !IS_PRODUCTION_HOST ? global : undefined;\n      }\n\n      return {\n        ...global,\n        payment: {\n          ...global.payment,\n          status: 'paid',\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <MenuItem\n              icon=\"permissions\"\n              onClick={handleChangelogClick}\n            >\n              Beta Changelog\n            </MenuItem>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={handleSwitchToLegacy}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder(FIRST_FOLDER_INDEX, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || isInAllChatsFolder) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div className=\"ChatFolders\">\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchQuery({ query: '' });\n      setGlobalSearchDate({ date: undefined });\n      setGlobalSearchChatId({ id: undefined });\n      resetChatCreation();\n      setTimeout(() => {\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const isChatOpen = Boolean(selectCurrentChat(global)?.id);\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { ManagementScreens } from '../../types';\n\nimport { ANIMATION_LEVEL_MIN } from '../../config';\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  noAnimation?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 320;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  noAnimation,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n    showNotification,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const lang = useLang();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (shouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, shouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else if (noAnimation) {\n      // The second RAF is necessary because teact must update the state and render the async component\n      requestAnimationFrame(() => {\n        requestAnimationFrame(setFocusInSearchInput);\n      });\n    } else {\n      setTimeout(setFocusInSearchInput, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [noAnimation, openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys({\n    'Mod+F': handleHotkeySearchClick,\n  });\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && !shouldSendJoinRequest && (canSubscribe || shouldJoinToSend) && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && shouldSendJoinRequest && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang('ChannelJoinRequest')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const noAnimation = global.settings.byKey.animationLevel === ANIMATION_LEVEL_MIN;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      noAnimation,\n    };\n  },\n)(HeaderActions));\n\nfunction setFocusInSearchInput() {\n  const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n  searchInput?.focus();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, {\n  useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number) => {\n    const rate = PLAYBACK_RATES[newRate];\n    setAudioPlayerPlaybackRate({ playbackRate: rate });\n    setPlaybackRate(rate);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (isContextMenuOpen) return;\n    updatePlaybackRate(playbackRate === 1 ? 2 : 1);\n  }, [isContextMenuOpen, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0] || 1;\n    return (\n      <Button\n        round\n        className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Playback Rate\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handlePlaybackClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <span className=\"playback-button-inner\">\n          {playbackRate === 1 ? 2 : displayRate}Х\n        </span>\n      </Button>\n    );\n  }, [handleBeforeContextMenu, handleContextMenu, handlePlaybackClick, playbackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n        >\n          {renderPlaybackRateMenuItem(0.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(0.75, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(2, playbackRate, updatePlaybackRate)}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(rate: number, currentRate: number, onClick: (rate: number) => void) {\n  return (\n    <MenuItem\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={currentRate === PLAYBACK_RATES[rate] ? 'check' : undefined}\n      customIcon={currentRate !== PLAYBACK_RATES[rate] ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  animationLevel: AnimationLevel;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n  animationLevel,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} animationLevel={animationLevel} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} animationLevel={animationLevel} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(GroupCallTopPane));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_LOADING = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  memoFirstUnreadIdRef,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isGift && 'premium-gift',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {isGift && renderGift()}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={buildClassName('pictogram', isRoundVideo && 'round')}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            tgsUrl={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// eslint-disable-next-line max-len\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: openModal,\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, (emoji || localEffect) && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch, size,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction, size,\n  ]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, undefined, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme] as const);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme] as const);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"dots\":\"Nlcnrzv_f5cSxFsPOGt2\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"canvas\":\"a_WnxsI6X0B4j7QRRoOA\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useInterval from '../../../hooks/useInterval';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\nconst BLUR_RADIUS = 25;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const canvasRef = useCanvasBlur(thumbnail?.dataUri, false, undefined, BLUR_RADIUS, width, height);\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <canvas ref={canvasRef} className={styles.canvas} width={width} height={height} />\n      <div className={styles.dots} />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl] as const);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { calculateDimensionsForMessageMedia, ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReaction) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            noUserColors={isOwn}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            <MessageText\n              message={message}\n              emojiSize={emojiSize}\n              highlight={highlight}\n              isProtected={isProtected}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n              withTranslucentThumbs={isCustomShape}\n            />\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo, transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsername = chat?.username;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasReply?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiBotInfo, ApiMessage, ApiRestrictionReason } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {!botInfo && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n      const shouldShrink = width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE;\n\n      if (shouldShrink || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n  );\n  const hasStickers = Boolean(stickers?.length) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!,\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n  const prevDraft = usePrevious(draft);\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage || !lastSyncTime) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, lastSyncTime, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [\n    chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage, prevDraft, loadCustomEmojis,\n  ]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({\n        chatId, username: usernameLowered, query, offset,\n      });\n    }\n  }, [isAllowed, usernameLowered, chatId, queryInlineBot, query, offset]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback(() => {\n    isMouseInside.current = true;\n    onActivate();\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((l) => {\n      l.style.stroke = color;\n      l.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(false)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(true)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(false)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(true)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { hasPreview } from '../../../util/files';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    openLimitReachedModal,\n    openPremiumModal,\n    addRecentCustomEmoji,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setInnerHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const setHtml = useCallback((newHtml: string) => {\n    setInnerHtml(newHtml);\n    requestAnimationFrame(() => {\n      processMessageInputForCustomEmoji();\n    });\n  }, []);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (newAttachments && newAttachments.some((l) => l.size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal],\n  );\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  useEffect(() => {\n    if (!html || editingMessage) return;\n    sendMessageAction({ type: 'typing' });\n  }, [editingMessage, html, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    EDITABLE_INPUT_CSS_SELECTOR,\n    setHtml,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const { isCustomEmojiTooltipOpen, closeCustomEmojiTooltip, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji && !attachments.length),\n    EDITABLE_INPUT_CSS_SELECTOR,\n    html,\n    setHtml,\n    customEmojiForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef, setHtml]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCustomEmojiTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu, setHtml]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: () => openPremiumModal({ initialSection: 'animated_emoji' }),\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: () => openChat({ id: currentUserId, shouldReplaceHistory: true }),\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, openChat, openPremiumModal, showNotification]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage, lastSyncTime);\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, [handleSetAttachments]);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, captionLimit,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      const isQuick = requestedDraftFiles.every((file) => hasPreview(file));\n      handleFileSelect(requestedDraftFiles, isQuick);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        captionLimit={captionLimit}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n        shouldSuggestCustomEmoji={shouldSuggestCustomEmoji}\n        customEmojiForEmoji={customEmojiForEmoji}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {(isChatWithBot && isBotMenuButtonCommands\n            && botCommands !== false && !activeVoiceRecording && !editingMessage) && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={buildClassName('symbol-menu-button', isSymbolMenuOpen && 'activated')}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            noFocusInterception={attachments.length > 0}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId\n      && chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId) ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatGroup, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, CLOSE_ANIMATION_DURATION);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      isGiftPremiumModalOpen: global.giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined),\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport type { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createMessageHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createMessageHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: GlobalState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_AMOUNT = IS_SINGLE_COLUMN_LAYOUT ? 50 : 100;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = DEFAULT_CONFETTI_AMOUNT) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiUser;\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n  requestedDraft?: GlobalState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useInterval(checkAppVersion, APP_OUTDATED_TIMEOUT_MS, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      checkAppVersion();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId && !isPhoneCallActive) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId, isPhoneCallActive]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      lastSyncTime,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall && selectUser(global, requestedAttachBotInstall.botId),\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isPremiumModalOpen: global.premiumModal?.isOpen,\n      limitReached: global.limitReachedModal?.limit,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      deleteFolderDialogId: global.deleteFolderDialogModal,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","premiumModal","promo","isOpen","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectScheduledMessages","selectChatMessages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","selectChat","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","setIds","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","customEmojis","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","isHidden","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_STATE","isScreenLocked","invalidAttemptsCount","initApi","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","threadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","user","selectUser","isDeletedUser","replyToMsgId","isLocal","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","poll","option","offset","shouldResetVoters","offsets","nextOffset","loadPollOptionResults","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","getActions","shortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","updateGifSearch","addedStickers","updateStickerSets","sets","loadStickerSets","added","addedCustomEmojis","loadCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","loadFavoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","loadFeaturedStickers","premiumGifts","cachedSet","selectStickerSet","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","openPremiumModal","className","newGifs","current","unfave","unfaveSticker","stickerSetId","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","searchWords","updateStickersForEmoji","loadStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","timestamp","searchMessagesByDate","ManagementProgress","username","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","previousGlobal","loadTopMessages","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","threadInfo","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","addCallback","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userOrChat","avatarHash","userSearch","updateUserSearchFetchingStatus","searchUsers","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","queryId","resultId","scheduleDate","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","isWriteAllowed","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","selectPaymentInputInvoice","saveInfo","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","step","isClosed","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","defaultReaction","reactors","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","isActiveChat","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateReactions","currentReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","r","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","emojiStatus","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","reorderStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","needRating","ratingPhoneCall","isCallPanelVisible","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","checkNavigatorUserMediaPermissions","isVideo","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","maxFolders","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","classList","remove","useLayoutEffect","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","ANIMATION_LEVEL_MIN","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","requestAnimationFrame","setFocusInSearchInput","handleHotkeySearchClick","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","Promise","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","renderPlaybackRateMenuItem","rate","currentRate","customIcon","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","voice","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","handlePlaybackClick","PlaybackRateButton","displayRate","entries","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","forceOpen","onHide","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","_","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","isChatWithBot","isSelectModeActive","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_LOADING","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","isEmbedded","appearanceOrder","isLastInList","memoFirstUnreadIdRef","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isVisible","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","role","AnimatedIconFromSticker","play","noLoop","nonInteractive","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","activeReaction","isInMeta","stopActiveReaction","centerIconId","effectId","mediaHashCenterIcon","mediaHashEffect","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","tgsUrl","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","openModal","actionText","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","withSharedAnimation","cacheBuster","isLowPriority","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","CustomEmoji","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","setProperty","dimensionsStyle","ProgressSpinner","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","withVideo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","canvasRef","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","useTimeout","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","recentReplierIds","recentRepliers","hasUnread","commentsText","AnimatedCounter","recentReactors","recentReaction","isOutside","metaChildren","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsername","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","selectIsDownloading","actualThreadInfo","hasUnreadReaction","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","forwardAuthor","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","MessageText","withTranslucentThumbs","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","entry","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","handleResize","contentRect","useResizeObserver","windowHeight","normalHeight","String","clientHeight","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","shouldShrink","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","STYLE_TAG_REGEX","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","stripCustomEmoji","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","entity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","html","setInnerHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","setHtml","newHtml","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","handleSetAttachments","newValue","newAttachments","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","useEmojiTooltip","insertHtmlAndUpdateCursor","EDITABLE_INPUT_ID","selection","getSelection","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertTextAndUpdateCursor","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","prevDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","customEmojiIds","prevHtml","useDraft","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","textContents","getElementsByTagName","node","HTMLElement","tagName","replaceWith","createTextNode","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","trimEnd","preparePastedHtml","containsCustomEmoji","items","getFilesFromDataTransferItems","all","file","textToPaste","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","hasPreview","handleCustomEmojiSelect","isFree","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onCustomEmojiSelect","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","pinnedIds","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldLoadFullChat","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createMessageHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","DEFAULT_CONFETTI_AMOUNT","CONFETTI_COLORS","confettiRef","isRafStartedRef","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","currentUser","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","closePaymentModal","clearReceipt","checkAppVersion","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","toggle","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}