{"version":3,"file":"860.71a26210d53a0e37c47e.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/common/ReportMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/getSenderName.ts","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/ui/RangeSlider.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/systemFilesDialog.ts","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helper/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/common/helpers/animatedAssets.ts","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isChatPrivate } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId, messageId, sender, isAvatar, message, closeMediaViewer, focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const isFromChat = sender.id < 0;\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isFromChat ? (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar ? lang('lng_mediaview_profile_photo') : formatMediaDateTime(lang, message!.date * 1000)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isChatPrivate(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, { FC, useMemo } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaDownload from '../../hooks/useMediaDownload';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    isDownloadStarted,\n    downloadProgress,\n    handleDownloadClick,\n  } = useMediaDownload(\n    message && isVideo ? getMessageMediaHash(message, 'download') : undefined,\n    fileName,\n  );\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloadStarted ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloadStarted ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloadStarted && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleDownloadClick}\n        >\n          {isDownloadStarted ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default MediaViewerActions;\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, { FC, useState, useEffect } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: OnChangeHandler;\n};\n\ntype OnChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => void;\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, onSeek)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(downloadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * downloadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(currentTime: number, duration: number, bufferedProgress: number, onSeek: OnChangeHandler) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\">\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n        <input\n          min=\"0\"\n          max=\"100\"\n          step={0.01}\n          type=\"range\"\n          onInput={onSeek}\n          className=\"player-seekline-input\"\n          value={percentagePlayed || 0}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Button from '../ui/Button';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  downloadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  downloadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      videoRef.current!.play();\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    e.stopPropagation();\n\n    videoRef.current!.currentTime = (Number(e.target.value) * videoRef.current!.duration) / 100;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif ? handleMouseOver : undefined}\n      onMouseOut={!isGif ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : downloadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={!isPlayed || isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser, ApiDimensions,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageDocument,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions, getMessageFileSize,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../hooks/useMediaWithDownloadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageId?: number;\n  senderId?: number;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const isSingleSlide = Boolean(webPagePhoto || webPageVideo);\n  const messageIds = useMemo(() => {\n    return isSingleSlide && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isSingleSlide, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<number | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(false);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const blobUrlPictogram = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const blobUrlPreview = useMedia(\n    previewMediaHash,\n    undefined,\n    isAvatar && previewMediaHash && previewMediaHash.startsWith('profilePhoto')\n      ? ApiMediaFormat.DataUri\n      : ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaData)) || blobUrlPreview || blobUrlPictogram;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed && !IS_TOUCH_ENV) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else if (!(e.target && (e.target as HTMLElement).closest('.MediaViewerFooter'))) {\n          close();\n        }\n\n        return true;\n      } : undefined,\n    });\n  }, [close, isFooterHidden, isGif, isPhoto, isZoomed, selectNextMedia, selectPreviousMedia]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const handleToggleFooterVisibility = useCallback(() => {\n    if (IS_TOUCH_ENV && (isPhoto || isGif)) {\n      setIsFooterHidden(!isFooterHidden);\n    }\n  }, [isFooterHidden, isGif, isPhoto]);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  function renderSlide(isActive: boolean) {\n    if (isAvatar) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaData || blobUrlPreview,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div\n          key={messageId}\n          className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}\n          onClick={handleToggleFooterVisibility}\n        >\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaData || blobUrlPreview || blobUrlPictogram,\n            message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaData}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n              downloadProgress={downloadProgress}\n              fileSize={videoSize!}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHidden={isFooterHidden && (!isVideo || isGif)}\n              isForVideo={isVideo && !isGif}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaData || blobUrlPreview}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={isAvatar}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getCanPostInChat, getChatTitle, isChatPrivate, sortChatIds,\n} from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick, unique } from '../../util/iteratees';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './ForwardPicker.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  pinnedIds?: number[];\n  activeListIds?: number[];\n  archivedListIds?: number[];\n  orderedPinnedIds?: number[];\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\nconst MODAL_HIDE_DELAY_MS = 300;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  pinnedIds,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isOpen) {\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        setTimeout(() => {\n          requestAnimationFrame(() => {\n            if (inputRef.current) {\n              inputRef.current.focus();\n            }\n          });\n        }, FOCUS_DELAY_MS);\n      }\n    } else {\n      if (inputRef.current) {\n        inputRef.current.blur();\n      }\n\n      setTimeout(() => {\n        setFilter('');\n      }, MODAL_HIDE_DELAY_MS);\n    }\n  }, [isOpen]);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ];\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang, pinnedIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadMoreChats, chatIds, Boolean(filter));\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.currentTarget.value);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      setForwardChatId({ id: viewportIds[index === -1 ? 0 : index] });\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={exitForwardMode}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={inputRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={lang('ForwardTo')}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={exitForwardMode}\n      className=\"ForwardPicker\"\n      header={modalHeader}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => setForwardChatId({ id })}\n            >\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">Sorry, nothing found.</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      pinnedIds: orderedPinnedIds.active,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissDialog' | 'acceptInviteConfirmation'>;\n\nconst Dialogs: FC<StateProps & DispatchProps> = ({ dialogs, dismissDialog, acceptInviteConfirmation }) => {\n  const lang = useLang();\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, participantsCount, isChannel,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      dismissDialog();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={title}\n      >\n        {participantsCount !== undefined && <p>{participantsText}</p>}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>{joinText}</Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={dismissDialog}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={dismissDialog}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {dialogs.map(renderDialog)}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissDialog', 'acceptInviteConfirmation']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(url);\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(defaultSelectedDate);\n      setCurrentMonthAndYear(new Date(defaultSelectedDate.getFullYear(), defaultSelectedDate.getMonth(), 1));\n    }\n  }, [defaultSelectedDate, isOpen, prevIsOpen]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < defaultSelectedDate.getTime()) {\n      setSelectedDate(defaultSelectedDate);\n      setSelectedHours(formatInputTime(defaultSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(defaultSelectedDate.getMinutes()));\n    }\n  }, [defaultSelectedDate, isTimeInputFocused, isFutureMode, selectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay();\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(date)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMessagesByDate' | 'closeHistoryCalendar'>;\n\nconst HistoryCalendar: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, selectedAt, searchMessagesByDate, closeHistoryCalendar,\n}) => {\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      selectedAt: global.historyCalendarSelectedAt,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesByDate', 'closeHistoryCalendar',\n  ]),\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isChatPrivate(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: number;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'reportMessages' | 'exitMessageSelectMode'>;\n\nconst ReportMessageModal: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  messageIds,\n  reportMessages,\n  exitMessageSelectMode,\n  onClose,\n}) => {\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined, (setGlobal, actions): DispatchProps => pick(actions, [\n    'reportMessages', 'exitMessageSelectMode',\n  ]),\n)(ReportMessageModal));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  selectedMessageIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages'>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  selectedMessageIds,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount);\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              <MenuItem\n                icon=\"forward\"\n                ariaLabel=\"Forward Messages\"\n                onClick={openForwardMenuForSelectedMessages}\n              >\n                <span className=\"item-text\">\n                  {lang('Forward')}\n                </span>\n              </MenuItem>\n            )}\n            {canReportMessages && (\n              <MenuItem\n                icon=\"flag\"\n                onClick={openReportModal}\n                disabled={!canReportMessages}\n                ariaLabel={lang('Conversation.ReportMessages')}\n              >\n                <span className=\"item-text\">\n                  {lang('Report')}\n                </span>\n              </MenuItem>\n            )}\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={openDeleteModal}\n              disabled={!canDeleteMessages}\n              ariaLabel={lang('EditAdminGroupDeleteMessages')}\n            >\n              <span className=\"item-text\">\n                {lang('Delete')}\n              </span>\n            </MenuItem>\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      selectedMessageIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['exitMessageSelectMode', 'openForwardMenuForSelectedMessages']),\n)(MessageSelectToolbar));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatPrivate, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  withUsername?: boolean;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  isMuted,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    isMuted,\n    handleDelete: openDeleteModal,\n  }, true);\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isChatPrivate(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n      isMuted,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: number[];\n  usersById: Record<number, ApiUser>;\n  recentlyFoundChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n      onReset();\n      setTimeout(() => {\n        addRecentlyFoundChatId({ id });\n      }, SEARCH_CLOSE_TIMEOUT_MS);\n    },\n    [openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  localContactIds?: number[];\n  localChatIds?: number[];\n  localUserIds?: number[];\n  globalChatIds?: number[];\n  globalUserIds?: number[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: number) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById),\n    ];\n  }, [\n    searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById, usersById,\n  ]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]),\n      chatsById, true);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: number;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: number) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport {\n  getChatTitle,\n  getSenderTitle,\n  isChatPrivate,\n  isChatGroup,\n} from '../../../../modules/helpers';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport function getSenderName(\n  lang: LangFn, message: ApiMessage, chatsById: Record<number, ApiChat>, usersById: Record<number, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isChatPrivate(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getSenderTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if (isChatPrivate(senderId) && (sender as ApiUser).isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: number) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            target=\"searchResult\"\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n  onScreenSelect,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadProfilePhotos'>;\n\nconst SettingsMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  loadProfilePhotos,\n  currentUser,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadProfilePhotos']),\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showDialog'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showDialog,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, notifySettings, notifyExceptions, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showDialog']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet, pick } from '../../../../util/iteratees';\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: number[];\n  loadedArchivedChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isChatPrivate(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: number[];\n  selectedIds: number[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: number) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isChatPrivate(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: number[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, useMemo, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './RangeSlider.scss';\n\ntype OwnProps = {\n  options?: string[];\n  range?: { min: number; max: number; step?: number };\n  label?: string;\n  value: number;\n  disabled?: boolean;\n  onChange: (value: number) => void;\n};\n\nconst RangeSlider: FC<OwnProps> = ({\n  options,\n  range,\n  label,\n  value,\n  disabled,\n  onChange,\n}) => {\n  const lang = useLang();\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onChange(Number(event.currentTarget.value));\n  }, [onChange]);\n\n  const className = buildClassName(\n    'RangeSlider',\n    disabled && 'disabled',\n  );\n\n  const trackWidth = useMemo(() => {\n    if (options) {\n      return (value / (options.length - 1)) * 100;\n    } else if (range) {\n      const possibleValuesLength = (range.max - range.min) / (range.step || 1);\n      return ((value - range.min) / possibleValuesLength) * 100;\n    }\n    return 0;\n  }, [value, options, range]);\n\n  const [min, max, step] = useMemo(() => {\n    if (options) {\n      return [0, options.length - 1, 1];\n    } else if (range) {\n      return [range.min, range.max, range.step || 1];\n    }\n\n    return [0, 0, 0];\n  }, [range, options]);\n\n  return (\n    <div className={className}>\n      {label && (\n        <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <span className=\"label\" dir=\"auto\">{label}</span>\n          {range && (\n            <span className=\"value\" dir=\"auto\">{value}</span>\n          )}\n        </div>\n      )}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          // @ts-ignore\n          style={`width: ${trackWidth}%`}\n        />\n        <input\n          min={min}\n          max={max}\n          value={value}\n          step={step}\n          type=\"range\"\n          onChange={handleChange}\n        />\n        {options && (\n          <div className=\"slider-options\">\n            {options.map((option, index) => (\n              <div\n                className={buildClassName('slider-option no-selection', index === value && 'active')}\n                onClick={() => onChange(index)}\n              >\n                {option}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RangeSlider);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(lottieData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'messageTextSize' |\n  'animationLevel' |\n  'messageSendKeyCombo' |\n  'shouldAutoDownloadMediaFromContacts' |\n  'shouldAutoDownloadMediaInPrivateChats' |\n  'shouldAutoDownloadMediaInGroups' |\n  'shouldAutoDownloadMediaInChannels' |\n  'shouldAutoPlayGifs' |\n  'shouldAutoPlayVideos' |\n  'shouldSuggestStickers' |\n  'shouldLoopStickers'\n)> & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldAutoDownloadMediaFromContacts,\n  shouldAutoDownloadMediaInPrivateChats,\n  shouldAutoDownloadMediaInGroups,\n  shouldAutoDownloadMediaInChannels,\n  shouldAutoPlayGifs,\n  shouldAutoPlayVideos,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          // TODO Remove memo-killer\n          range={{ min: 12, max: 20 }}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoDownloadMedia')}</h4>\n\n        <Checkbox\n          label={lang('Contacts')}\n          checked={shouldAutoDownloadMediaFromContacts}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaFromContacts: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadPrivateChats')}\n          checked={shouldAutoDownloadMediaInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInPrivateChats: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadGroupChats')}\n          checked={shouldAutoDownloadMediaInGroups}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInGroups: isChecked })}\n        />\n        <Checkbox\n          label={lang('FilterChannels')}\n          checked={shouldAutoDownloadMediaInChannels}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInChannels: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={shouldAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={shouldAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayVideos: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldAutoDownloadMediaFromContacts',\n        'shouldAutoDownloadMediaInPrivateChats',\n        'shouldAutoDownloadMediaInGroups',\n        'shouldAutoDownloadMediaInChannels',\n        'shouldAutoPlayGifs',\n        'shouldAutoPlayVideos',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(\n    document.thumbnail?.dataUri,\n    Boolean(previewBlobUrl),\n    true,\n  );\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || localBlobUrl, 'slow');\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, downloadProgress,\n  } = useMediaWithDownloadProgress(localMediaHash, !isDownloadAllowed);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isDownloadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasDownloadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        {shouldRenderThumb && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n          />\n        )}\n        {shouldRenderFullMedia && (\n          <img\n            src={previewBlobUrl || localBlobUrl}\n            className={`full-media ${transitionClassNames}`}\n            alt=\"\"\n          />\n        )}\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={downloadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' |\n  'updateNotificationSettings' | 'updateWebNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n  updateWebNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasWebNotifications: e.target.checked });\n          }}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasPushNotifications: e.target.checked });\n          }}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            disabled={!hasWebNotifications}\n            range={{\n              min: 0,\n              max: 10,\n            }}\n            value={notificationSoundVolume}\n            onChange={(volume) => {\n              updateWebNotificationSettings({ notificationSoundVolume: volume });\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n    hasWebNotifications: global.settings.byKey.hasWebNotifications,\n    hasPushNotifications: global.settings.byKey.hasPushNotifications,\n    notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n  'updateWebNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings' | 'loadContentSettings' | 'updateContentSettings'\n)>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n  loadContentSettings,\n  updateContentSettings,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber?.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen?.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto?.visibility,\n      visibilityPrivacyForwarding: privacy.forwards?.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite?.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings', 'loadContentSettings', 'updateContentSettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<number, ApiChat>;\n  usersById?: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive className=\"no-icon\">\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        className=\"no-icon\"\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isChatPrivate,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<number, ApiChat>;\n  usersByIds: Record<number, ApiUser>;\n  blockedIds: number[];\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n  unblockContact,\n}) => {\n  const handleUnblockClick = useCallback((contactId: number) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: number, i: number, viewportOffset: number) {\n    const isPrivate = isChatPrivate(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">\n              List is empty\n            </div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={() => {\n        }}\n        className=\"not-implemented\"\n        ariaLabel=\"Add a blocked user\"\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isChatPrivate, prepareChatList,\n} from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<number[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isChatPrivate(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: number[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  contactIds?: number[];\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive, onReset,\n  filter, usersById, contactIds, loadContactList, openChat, serverTimeOffset,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n    },\n    [openChat],\n  );\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, isUserBot, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: number[];\n  onSelectedMemberIdsChange: (ids: number[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return !user || !isUserBot(user) || user.canBeInvitedToGroup;\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds,\n    currentUserId, usersById,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: number[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = creationError || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<number[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","const IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nconst preventDefault = (e: Event) => {\n  e.preventDefault();\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    preventDefault(e);\n  }\n}\n\nexport function disableScrolling() {\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  window.ontouchmove = preventDefault; // mobile\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  // eslint-disable-next-line no-null/no-null\n  window.ontouchmove = null;\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n}) => {\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const { positionX, positionY, style } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport { selectAllowedMessageActions, selectCurrentMessageList } from '../../../modules/selectors';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${Math.abs(message.chatId)}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectStickerSet, selectStickerSetByShortName } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={handleSelect}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { fromSticker, stickerSetShortName }: OwnProps) => {\n    return {\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { selectChat, selectNotifySettings, selectNotifyExceptions } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { isChatPrivate, getCanDeleteChat, selectIsChatMuted } from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateChatMutedState' | 'enterMessageSelectMode' | 'sendBotCommand' | 'restartBot'\n)>;\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canDeleteChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canLeave,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n  sendBotCommand,\n  restartBot,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'Subscribe' : 'Join Group')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate: isChatPrivate(chat.id),\n      canDeleteChat: getCanDeleteChat(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n    'sendBotCommand',\n    'restartBot',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'openHistoryCalendar' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'openHistoryCalendar',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  useEffect(() => {\n    setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [items, shouldRemoveSelectionOnReset]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n  usersById?: Record<number, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: number, forceFocus = false) => {\n    const user = usersById?.[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD, EDITABLE_INPUT_MODAL_ID } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  isReady?: boolean;\n  currentUserId?: number;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  isReady,\n  currentUserId,\n  groupChatMembers,\n  usersById,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => a.mimeType.startsWith('image/'));\n  const areAllVideos = renderingAttachments.every((a) => a.mimeType.startsWith('video/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={Boolean(attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">Sending stickers is not allowed in this chat.</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">You have no saved Stickers.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, className, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          // @ts-ignore\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker, shouldPreserveInput?: boolean) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  isOpen, allowedAttachmentOptions, isLeftColumnShown,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_FOR_QUICK_UPLOAD).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n  sendBotCommand,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandMenu: FC<OwnProps & DispatchProps> = ({\n  isOpen, botCommands, onClose, sendBotCommand,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandMenu));\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../../hooks/useTransitionForMedia';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(mediaBlobUrl, 'slow');\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        {shouldRenderThumb && (\n          <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        )}\n        {shouldRenderFullMedia && (\n          <img src={mediaBlobUrl} className={`${transitionClassNames} full-media`} alt=\"\" />\n        )}\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={shouldRenderFullMedia ? mediaBlobUrl : (thumbnail?.dataUri) || thumbnailDataUrl}\n      transitionClassNames={shouldRenderFullMedia ? transitionClassNames : undefined}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({ inlineResult, observeIntersection, onClick }) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: number;\n  isGallery?: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  onSelectResult: (inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('startBot' | 'openChat' | 'sendInlineBotResult')>;\n\nconst InlineBotTooltip: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  loadMore,\n  onClose,\n  openChat,\n  startBot,\n  onSelectResult,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !renderedInlineBotResults || (!renderedInlineBotResults.length && !switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'video':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'startBot', 'openChat', 'sendInlineBotResult',\n  ]),\n)(InlineBotTooltip));\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  useHistoryBack(isActive, onClose);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = foundResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: number[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{summary.question}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  isMuted,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, chat, progress, isMuted,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'leaveChannel' | 'deleteChannel' | 'deleteChat' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteChat,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'leaveChannel', 'deleteChannel', 'deleteChat', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  updateChatMemberBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n\n    return { chat, usersById };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<number, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: number[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<number>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: number) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: number;\n  isChannel: boolean;\n  usersById: Record<number, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<number, ApiUser>;\n  currentUserId?: number;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.adminRights) || {});\n    setCustomTitle(((selectedChatMember?.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  useHistoryBack(isActive, onClose);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById, undefined, serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: number) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: number;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { pick } from '../../util/iteratees';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","withGlobal","global","chatId","messageId","isAvatar","sender","isChatPrivate","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","lang","useLang","isFromChat","senderTitle","getSenderTitle","className","onClick","Avatar","key","size","chat","user","dir","renderText","formatMediaDateTime","date","mediaData","isVideo","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","isDownloadStarted","downloadProgress","handleDownloadClick","useMediaDownload","getMessageMediaHash","undefined","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","height","clientHeight","REM","handleResize","throttle","window","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","stopEvent","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","timeout","setTimeout","clearTimeout","body","remove","downloadedPercent","totalSize","percentagePlayed","percentageBuffered","min","max","step","type","onInput","value","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","memo","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","useRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","current","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","play","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","handleSeek","Number","target","toggleControls","togglePayingStateBySpace","preventDefault","wrapperStyle","width","videoStyle","onMouseOver","onMouseOut","ref","autoPlay","playsInline","loop","muted","onEnded","onDoubleClick","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","isSeeking","handleStartSeek","handleStopSeek","disabled","onChange","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","getBoundingClientRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","ANIMATION_DURATION","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","isFromSharedMedia","isFromSearch","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isSingleSlide","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","isGhostAnimation","isFooterHidden","setIsFooterHidden","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","getMediaHash","isFull","photos","getChatAvatarHash","blobUrlPictogram","useMedia","ApiMediaFormat","previewMediaHash","blobUrlPreview","startsWith","fullMediaData","useMediaWithDownloadProgress","getMessageMediaFormat","localBlobUrl","bestImageData","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","getMessageFileName","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","toggle","forceUpdate","useForceUpdate","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","textParts","renderMessageText","hasFooter","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","matches","getTopOffset","top","fromTop","left","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","captureEvents","excludedClosestSelector","onSwipe","SwipeDirection","handlePan","handleToggleFooterVisibility","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","useHistoryBack","ShowTransition","isRtl","Transition","activeKey","name","chats","byId","chatsById","listIds","orderedPinnedIds","currentUserId","pinnedIds","active","activeListIds","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","filter","setFilter","focus","blur","chatIds","priorityIds","unique","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","viewportIds","getMore","useInfiniteScroll","handleFilterChange","containerRef","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","dialog","invite","hash","title","participantsCount","isChannel","participantsText","joinText","isText","renderInvite","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","useFlag","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","getTime","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","i","push","gridDate","lastRowDaysCount","buildCalendarGrid","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","formatDateToString","code","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","label","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canPost","openForwardMenuForSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isReportModalOpen","openReportModal","closeReportModal","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","destructive","onSelect","buttonRef","activeElement","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","withUsername","contextActions","useChatContextActions","handleDelete","handleClick","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","query","handleChatClick","handlePickerItemClick","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","theme","selectTheme","isLoading","searchChatId","CURRENT_TYPE","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","getSenderName","senderName","isChatGroup","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","onPlay","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","onScreenSelect","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","currentUser","loadProfilePhotos","profileId","ProfileInfo","forceShowSelf","ChatExtra","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","notifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","data","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","noLoop","onLoad","pill","fluid","narrow","multiline","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","mode","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","event","isTouched","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","find","isMinimized","canClose","Checkbox","checked","isSelected","withChatType","archivedPinnedIds","chatFilter","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","range","handleChange","trackWidth","possibleValuesLength","option","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","shouldRenderFullMedia","useTransitionForMedia","getFirstLetters","hasThumbnail","stickers","firstSticker","isAnimated","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","ANIMATION_LEVEL_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldAutoDownloadMediaFromContacts","shouldAutoDownloadMediaInPrivateChats","shouldAutoDownloadMediaInGroups","shouldAutoDownloadMediaInChannels","shouldAutoPlayGifs","shouldAutoPlayVideos","shouldSuggestStickers","shouldLoopStickers","setSettingOption","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleStickerSetClick","stickerSets","installedDate","onCheck","isChecked","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","previewBlobUrl","thumbRef","useCanvasBlur","thumbnail","dataUri","shouldRenderThumb","isDownloadAllowed","setIsDownloadAllowed","fullMedia","wasDownloadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","onCapture","onDrag","onRelease","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","volume","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","phoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","ip","sessions","handler","dateActive","chatsByIds","usersByIds","countryList","phoneCodes","phoneCodeList","blockedIds","unblockContact","handleUnblockClick","contactId","viewportOffset","isPrivate","CHAT_HEIGHT_PX","formatPhoneNumberWithCode","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","contactIds","serverTimeOffset","resultIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","isUserBot","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","passive","ontouchmove","onkeydown","enableScrolling","getCopyLabel","hasSelection","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCloseAnimationEnd","onCopyLink","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","useContextMenuPosition","Menu","noOptions","isScheduled","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","abs","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canDeleteChat","getCanDeleteChat","canStartBot","canRestartBot","canSubscribe","canSearch","canMute","canLeave","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleSubscribe","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","from","input","div","contentEditable","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","setTooltipItemVisible","selector","first","isFullyVisible","position","fastSmoothScroll","useKeyboardNavigation","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","isReady","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_FOR_QUICK_UPLOAD","areAllPhotos","mimeType","areAllVideos","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollHeight","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","noAnimate","onUnfaveClick","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","shouldPlay","canSendStickers","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","fullClassName","buttonClassName","gif","videoData","shouldRenderVideo","isVideoReady","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","isLeftColumnShown","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","withAvatar","botCommand","bot","botCommands","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","isForGallery","inlineResult","webThumbnail","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","loadMore","startBot","onSelectResult","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","foundResult","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","getAllowedAttachmentOptions","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","linkedChatId","isBasicGroup","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickPermissions","handleClickAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","updateChatMemberBannedRights","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","hasLinkedChat","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","isOwner","handleAdminMemberClick","getMemberStatus","promotedByUser","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","field","handleErrorModalClose","PaymentStep","shippingOption","getShippingPrices","concat","acc","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","path","location","cropperResultOptions","quality","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL"],"sourceRoot":""}