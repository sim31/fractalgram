{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/config.ts","webpack:///./src/serviceWorker/progressive.ts","webpack:///./src/util/generateIdFor.ts","webpack:///./src/util/schedulers.ts","webpack:///./src/serviceWorker/pushNotification.ts","webpack:///./src/serviceWorker.ts","webpack:///./src/serviceWorker/assetCache.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Set","window","innerHeight","requestStates","Map","async","respondForProgressive","e","url","request","range","headers","bytes","exec","start","Number","originalEnd","end","match","fileSize","mimeType","Response","Uint8Array","buffer","status","statusText","cacheKey","cachedArrayBuffer","cachedHeaders","cache","self","caches","open","Promise","all","then","arrayBuffer","undefined","json","fetchFromCache","partInfo","params","clientId","client","clients","messageId","store","id","String","Math","random","replace","generateIdFor","requestState","promise","race","ms","resolve","setTimeout","reject","Error","assign","set","catch","finally","delete","postMessage","type","requestPart","err","process","fullSize","partSize","min","byteLength","arrayBufferPart","slice","put","Request","JSON","stringify","saveToCache","Boolean","addEventListener","result","data","clickBuffer","shownNotifications","pendingNotifications","getChatId","custom","from_id","parseInt","chat_id","channel_id","getMessageId","msg_id","showNotification","chatId","body","title","registration","icon","badge","vibrate","flushNotifications","fn","shouldRunFirst","shouldRunLast","waitingTimeout","args","clearTimeout","debounce","groupLimit","count","keys","reduce","groupId","length","map","group","handleNotification","notification","has","push","focusChatMessage","payload","focus","error","ASSET_CACHE_PATTERN","waitUntil","skipWaiting","claim","respondWith","includes","startsWith","cached","remote","fetch","clone","respondWithCache","getPushData","mute","True","description","getNotificationData","appUrl","location","href","close","clientsInScope","matchAll","filter","scope","openWindow","newClient","notifyClients","source","add"],"mappings":"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","file":"serviceWorker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const PAGE_TITLE = 'Telegram';\nexport const INACTIVE_MARKER = ' [Inactive]';\n\nexport const APP_NAME = process.env.APP_NAME || 'Telegram WebZ';\nexport const APP_VERSION = process.env.APP_VERSION || 'dev';\n\nexport const DEBUG = (\n  process.env.APP_ENV !== 'production' && process.env.APP_ENV !== 'perf' && process.env.APP_ENV !== 'test'\n);\nexport const DEBUG_MORE = false;\n\nexport const IS_TEST = process.env.APP_ENV === 'test';\nexport const IS_PERF = process.env.APP_ENV === 'perf';\n\nexport const DEBUG_ALERT_MSG = 'Shoot!\\nSomething went wrong, please see the error details in Dev Tools Console.';\nexport const DEBUG_GRAMJS = false;\n\nexport const SESSION_USER_KEY = 'user_auth';\nexport const LEGACY_SESSION_KEY = 'GramJs:sessionId';\n\nexport const GLOBAL_STATE_CACHE_DISABLED = false;\nexport const GLOBAL_STATE_CACHE_KEY = 'tt-global-state';\nexport const GLOBAL_STATE_CACHE_CHAT_LIST_LIMIT = 30;\nexport const GLOBAL_STATE_CACHE_USER_LIST_LIMIT = 5000;\n\nexport const MEDIA_CACHE_DISABLED = false;\nexport const MEDIA_CACHE_NAME = 'tt-media';\nexport const MEDIA_CACHE_NAME_AVATARS = 'tt-media-avatars';\nexport const MEDIA_PROGRESSIVE_CACHE_DISABLED = false;\nexport const MEDIA_PROGRESSIVE_CACHE_NAME = 'tt-media-progressive';\nexport const MEDIA_CACHE_MAX_BYTES = 512 * 1024; // 512 KB\nexport const CUSTOM_BG_CACHE_NAME = 'tt-custom-bg';\nexport const LANG_CACHE_NAME = 'tt-lang-packs-v4';\nexport const ASSET_CACHE_NAME = 'tt-assets';\n\nexport const API_UPDATE_THROTTLE = 300;\nexport const API_THROTTLE_RESET_UPDATES = new Set([\n  'newMessage', 'newScheduledMessage', 'deleteMessages', 'deleteScheduledMessages', 'deleteHistory',\n]);\n\nexport const DOWNLOAD_WORKERS = 16;\nexport const UPLOAD_WORKERS = 16;\n\nconst isBigScreen = typeof window !== 'undefined' && window.innerHeight >= 900;\n\nexport const MIN_PASSWORD_LENGTH = 1;\n\nexport const MESSAGE_LIST_SENSITIVE_AREA = 750;\nexport const MESSAGE_LIST_SLICE = isBigScreen ? 60 : 40;\nexport const MESSAGE_LIST_VIEWPORT_LIMIT = MESSAGE_LIST_SLICE * 2;\n\nexport const CHAT_HEIGHT_PX = 72;\nexport const CHAT_LIST_SLICE = isBigScreen ? 30 : 25;\nexport const CHAT_LIST_LOAD_SLICE = 100;\nexport const SHARED_MEDIA_SLICE = 42;\nexport const MESSAGE_SEARCH_SLICE = 42;\nexport const GLOBAL_SEARCH_SLICE = 20;\nexport const MEMBERS_SLICE = 30;\nexport const MEMBERS_LOAD_SLICE = 200;\nexport const PINNED_MESSAGES_LIMIT = 50;\nexport const BLOCKED_LIST_LIMIT = 100;\nexport const PROFILE_PHOTOS_LIMIT = 40;\nexport const PROFILE_SENSITIVE_AREA = 500;\n\nexport const TOP_CHAT_MESSAGES_PRELOAD_LIMIT = 20;\nexport const ALL_CHATS_PRELOAD_DISABLED = false;\n\nexport const ANIMATION_LEVEL_MIN = 0;\nexport const ANIMATION_LEVEL_MED = 1;\nexport const ANIMATION_LEVEL_MAX = 2;\nexport const ANIMATION_LEVEL_DEFAULT = ANIMATION_LEVEL_MAX;\n\nexport const DEFAULT_MESSAGE_TEXT_SIZE_PX = 16;\n\nexport const DRAFT_DEBOUNCE = 10000; // 10s\n\nexport const EDITABLE_INPUT_ID = 'editable-message-text';\nexport const EDITABLE_INPUT_MODAL_ID = 'editable-message-text-modal';\n\n// Screen width where Pinned Message / Audio Player in the Middle Header can be safely displayed\nexport const SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1440; // px\n// Screen width where Pinned Message / Audio Player in the Middle Header shouldn't collapse with ChatInfo\nexport const SAFE_SCREEN_WIDTH_FOR_CHAT_INFO = 1150; // px\n\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1275; // px\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN = 925; // px\nexport const MOBILE_SCREEN_MAX_WIDTH = 600; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_WIDTH = 950; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_HEIGHT = 450; // px\n\nexport const LOCAL_MESSAGE_ID_BASE = 1e9;\n\nexport const ANIMATION_END_DELAY = 100;\n\nexport const STICKER_SIZE_INLINE_DESKTOP_FACTOR = 13;\nexport const STICKER_SIZE_INLINE_MOBILE_FACTOR = 11;\nexport const STICKER_SIZE_AUTH = 160;\nexport const STICKER_SIZE_AUTH_MOBILE = 120;\nexport const STICKER_SIZE_PICKER = 64;\nexport const STICKER_SIZE_GENERAL_SETTINGS = 48;\nexport const STICKER_SIZE_PICKER_HEADER = 32;\nexport const STICKER_SIZE_SEARCH = 64;\nexport const STICKER_SIZE_MODAL = 64;\nexport const STICKER_SIZE_TWO_FA = 160;\nexport const STICKER_SIZE_DISCUSSION_GROUPS = 140;\nexport const STICKER_SIZE_FOLDER_SETTINGS = 80;\nexport const RECENT_STICKERS_LIMIT = 20;\nexport const MEMOJI_STICKER_ID = 'MEMOJI_STICKER';\n\nexport const MENU_TRANSITION_DURATION = 200;\nexport const SLIDE_TRANSITION_DURATION = 450;\nexport const LAYERS_TRANSITION_DURATION = 450;\n\nexport const CONTENT_TYPES_FOR_QUICK_UPLOAD = 'image/png,image/gif,image/jpeg,video/mp4,video/avi,video/quicktime';\n\n// eslint-disable-next-line max-len\nexport const RE_LINK_TEMPLATE = '((ftp|https?):\\\\/\\\\/)?((www\\\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\\\.[a-zA-Z0-9()]{1,6})\\\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)';\nexport const RE_TME_LINK = /^(?:https?:\\/\\/)?(?:t\\.me\\/)([\\d\\w_]+)(?:\\/([\\d]+))?$/gm;\nexport const RE_TME_INVITE_LINK = /^(?:https?:\\/\\/)?(?:t\\.me\\/joinchat\\/)([\\d\\w_]+)?$/gm;\n\n// MTProto constants\nexport const SERVICE_NOTIFICATIONS_USER_ID = 777000;\nexport const ALL_FOLDER_ID = 0;\nexport const ARCHIVED_FOLDER_ID = 1;\nexport const DELETED_COMMENTS_CHANNEL_ID = 777;\nexport const MAX_MEDIA_FILES_FOR_ALBUM = 10;\nexport const MAX_ACTIVE_PINNED_CHATS = 5;\nexport const SCHEDULED_WHEN_ONLINE = 0x7FFFFFFE;\nexport const DEFAULT_LANG_PACK = 'android';\nexport const LANG_PACKS = ['android', 'ios', 'tdesktop', 'macos'];\nexport const TIPS_USERNAME = 'TelegramTips';\nexport const FEEDBACK_URL = 'https://bugs.telegram.org/?tag_ids=41&sort=time';\nexport const LIGHT_THEME_BG_COLOR = '#A2AF8E';\nexport const DARK_THEME_BG_COLOR = '#0F0F0F';\nexport const DARK_THEME_PATTERN_COLOR = '#0a0a0a8c';\nexport const DEFAULT_PATTERN_COLOR = 'rgba(90, 110, 70, 0.6)';\n","import { pause } from '../util/schedulers';\nimport generateIdFor from '../util/generateIdFor';\nimport {\n  DEBUG,\n  MEDIA_CACHE_MAX_BYTES,\n  MEDIA_PROGRESSIVE_CACHE_DISABLED,\n  MEDIA_PROGRESSIVE_CACHE_NAME,\n} from '../config';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\ntype PartInfo = {\n  type: 'PartInfo';\n  arrayBuffer: ArrayBuffer;\n  mimeType: 'string';\n  fullSize: number;\n};\n\ntype RequestStates = {\n  resolve: (response: PartInfo) => void;\n  reject: () => void;\n};\n\nconst MB = 1024 * 1024;\nconst DEFAULT_PART_SIZE = 0.5 * MB;\nconst MAX_END_TO_CACHE = 2 * MB - 1; // We only cache the first 2 MB of each file\nconst PART_TIMEOUT = 30000;\n\nconst requestStates = new Map<string, RequestStates>();\n\nexport async function respondForProgressive(e: FetchEvent) {\n  const { url } = e.request;\n  const range = e.request.headers.get('range');\n  const bytes = /^bytes=(\\d+)-(\\d+)?$/g.exec(range || '')!;\n  const start = Number(bytes[1]);\n  const originalEnd = Number(bytes[2]);\n\n  let end = originalEnd;\n  if (!end || (end - start + 1) > DEFAULT_PART_SIZE) {\n    end = start + DEFAULT_PART_SIZE - 1;\n  }\n\n  // Optimization for Safari\n  if (start === 0 && end === 1) {\n    const match = e.request.url.match(/fileSize=(\\d+)&mimeType=([\\w/]+)/);\n    const fileSize = match && Number(match[1]);\n    const mimeType = match && match[2];\n\n    if (fileSize && mimeType) {\n      return new Response(new Uint8Array(2).buffer, {\n        status: 206,\n        statusText: 'Partial Content',\n        headers: [\n          ['Content-Range', `bytes 0-1/${fileSize}`],\n          ['Accept-Ranges', 'bytes'],\n          ['Content-Length', '2'],\n          ['Content-Type', mimeType],\n        ],\n      });\n    }\n  }\n\n  const cacheKey = `${url}?start=${start}&end=${end}`;\n  const [cachedArrayBuffer, cachedHeaders] = !MEDIA_PROGRESSIVE_CACHE_DISABLED ? await fetchFromCache(cacheKey) : [];\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log(\n      `FETCH PROGRESSIVE ${cacheKey} (request: ${start}-${originalEnd}) CACHED: ${Boolean(cachedArrayBuffer)}`,\n    );\n  }\n\n  if (cachedArrayBuffer) {\n    return new Response(cachedArrayBuffer, {\n      status: 206,\n      statusText: 'Partial Content',\n      headers: cachedHeaders,\n    });\n  }\n\n  let partInfo;\n  try {\n    partInfo = await requestPart(e, { url, start, end });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('FETCH PROGRESSIVE', err);\n    }\n  }\n\n  if (!partInfo) {\n    return new Response('', {\n      status: 500,\n      statusText: 'Failed to fetch progressive part',\n    });\n  }\n\n  const { arrayBuffer, fullSize, mimeType } = partInfo;\n\n  const partSize = Math.min(end - start + 1, arrayBuffer.byteLength);\n  end = start + partSize - 1;\n  const arrayBufferPart = arrayBuffer.slice(0, partSize);\n  const headers = [\n    ['Content-Range', `bytes ${start}-${end}/${fullSize}`],\n    ['Accept-Ranges', 'bytes'],\n    ['Content-Length', String(partSize)],\n    ['Content-Type', mimeType],\n  ];\n\n  if (!MEDIA_PROGRESSIVE_CACHE_DISABLED && partSize <= MEDIA_CACHE_MAX_BYTES && end < MAX_END_TO_CACHE) {\n    saveToCache(cacheKey, arrayBufferPart, headers);\n  }\n\n  return new Response(arrayBufferPart, {\n    status: 206,\n    statusText: 'Partial Content',\n    headers,\n  });\n}\n\n// We can not cache 206 responses: https://github.com/GoogleChrome/workbox/issues/1644#issuecomment-638741359\nasync function fetchFromCache(cacheKey: string) {\n  const cache = await self.caches.open(MEDIA_PROGRESSIVE_CACHE_NAME);\n\n  return Promise.all([\n    cache.match(`${cacheKey}&type=arrayBuffer`).then((r) => (r ? r.arrayBuffer() : undefined)),\n    cache.match(`${cacheKey}&type=headers`).then((r) => (r ? r.json() : undefined)),\n  ]);\n}\n\nasync function saveToCache(cacheKey: string, arrayBuffer: ArrayBuffer, headers: HeadersInit) {\n  const cache = await self.caches.open(MEDIA_PROGRESSIVE_CACHE_NAME);\n\n  return Promise.all([\n    cache.put(new Request(`${cacheKey}&type=arrayBuffer`), new Response(arrayBuffer)),\n    cache.put(new Request(`${cacheKey}&type=headers`), new Response(JSON.stringify(headers))),\n  ]);\n}\n\nasync function requestPart(\n  e: FetchEvent,\n  params: { url: string; start: number; end: number },\n): Promise<PartInfo | undefined> {\n  if (!e.clientId) {\n    return undefined;\n  }\n\n  // eslint-disable-next-line no-restricted-globals\n  const client = await self.clients.get(e.clientId);\n  if (!client) {\n    return undefined;\n  }\n\n  const messageId = generateIdFor(requestStates);\n  const requestState = {} as RequestStates;\n\n  const promise = Promise.race([\n    pause(PART_TIMEOUT).then(() => Promise.reject(new Error('ERROR_PART_TIMEOUT'))),\n    new Promise<PartInfo>((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    }),\n  ]);\n\n  requestStates.set(messageId, requestState);\n  promise\n    .catch(() => undefined)\n    .finally(() => {\n      requestStates.delete(messageId);\n    });\n\n  client.postMessage({\n    type: 'requestPart',\n    messageId,\n    params,\n  });\n\n  return promise;\n}\n\nself.addEventListener('message', (e) => {\n  const { type, messageId, result } = e.data as {\n    type: string;\n    messageId: string;\n    result: PartInfo;\n  };\n\n  if (type === 'partResponse') {\n    const requestState = requestStates.get(messageId);\n    if (requestState) {\n      requestState.resolve(result);\n    }\n  }\n});\n","export default (store: AnyLiteral) => {\n  let id;\n\n  do {\n    id = String(Math.random()).replace('0.', 'id');\n  } while (store.hasOwnProperty(id));\n\n  return id;\n};\n","type Scheduler =\n  typeof requestAnimationFrame\n  | typeof onTickEnd\n  | typeof runNow;\n\nexport function debounce<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n  shouldRunLast = true,\n) {\n  let waitingTimeout: number | undefined;\n\n  return (...args: Parameters<F>) => {\n    if (waitingTimeout) {\n      clearTimeout(waitingTimeout);\n      waitingTimeout = undefined;\n    } else if (shouldRunFirst) {\n      // @ts-ignore\n      fn(...args);\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    waitingTimeout = self.setTimeout(() => {\n      if (shouldRunLast) {\n        // @ts-ignore\n        fn(...args);\n      }\n\n      waitingTimeout = undefined;\n    }, ms);\n  };\n}\n\nexport function throttle<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n) {\n  let interval: number | undefined;\n  let isPending: boolean;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    isPending = true;\n    args = _args;\n\n    if (!interval) {\n      if (shouldRunFirst) {\n        isPending = false;\n        // @ts-ignore\n        fn(...args);\n      }\n\n      // eslint-disable-next-line no-restricted-globals\n      interval = self.setInterval(() => {\n        if (!isPending) {\n          // eslint-disable-next-line no-restricted-globals\n          self.clearInterval(interval!);\n          interval = undefined;\n          return;\n        }\n\n        isPending = false;\n        // @ts-ignore\n        fn(...args);\n      }, ms);\n    }\n  };\n}\n\nexport function throttleWithRaf<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastRaf, fn);\n}\n\nexport function throttleWithPrimaryRaf<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastPrimaryRaf, fn);\n}\n\nexport function throttleWithTickEnd<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(onTickEnd, fn);\n}\n\nexport function throttleWithNow<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(runNow, fn);\n}\n\nexport function throttleWith<F extends AnyToVoidFunction>(schedulerFn: Scheduler, fn: F) {\n  let waiting = false;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    args = _args;\n\n    if (!waiting) {\n      waiting = true;\n\n      schedulerFn(() => {\n        waiting = false;\n        // @ts-ignore\n        fn(...args);\n      });\n    }\n  };\n}\n\nexport function onTickEnd(cb: NoneToVoidFunction) {\n  Promise.resolve().then(cb);\n}\n\nexport function onIdle(cb: NoneToVoidFunction) {\n  // eslint-disable-next-line no-restricted-globals\n  if (self.requestIdleCallback) {\n    // eslint-disable-next-line no-restricted-globals\n    self.requestIdleCallback(cb);\n  } else {\n    onTickEnd(cb);\n  }\n}\n\nfunction runNow(fn: NoneToVoidFunction) {\n  fn();\n}\n\nexport const pause = (ms: number) => new Promise((resolve) => {\n  setTimeout(() => resolve(), ms);\n});\n\nexport function rafPromise() {\n  return new Promise((resolve) => {\n    fastRaf(resolve);\n  });\n}\n\nlet fastRafCallbacks: NoneToVoidFunction[] | undefined;\nlet fastRafPrimaryCallbacks: NoneToVoidFunction[] | undefined;\n\n// May result in an immediate execution if called from another `requestAnimationFrame` callback\nexport function fastRaf(callback: NoneToVoidFunction, isPrimary = false) {\n  if (!fastRafCallbacks) {\n    fastRafCallbacks = isPrimary ? [] : [callback];\n    fastRafPrimaryCallbacks = isPrimary ? [callback] : [];\n\n    requestAnimationFrame(() => {\n      const currentCallbacks = fastRafCallbacks!;\n      const currentPrimaryCallbacks = fastRafPrimaryCallbacks!;\n      fastRafCallbacks = undefined;\n      fastRafPrimaryCallbacks = undefined;\n      currentPrimaryCallbacks.forEach((cb) => cb());\n      currentCallbacks.forEach((cb) => cb());\n    });\n  } else if (isPrimary) {\n    fastRafPrimaryCallbacks!.push(callback);\n  } else {\n    fastRafCallbacks.push(callback);\n  }\n}\n\nexport function fastPrimaryRaf(callback: NoneToVoidFunction) {\n  fastRaf(callback, true);\n}\n","import { APP_NAME, DEBUG } from '../config';\nimport { debounce } from '../util/schedulers';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nenum Boolean {\n  True = '1',\n  False = '0'\n}\n\ntype PushData = {\n  custom: {\n    msg_id?: string;\n    channel_id?: string;\n    chat_id?: string;\n    from_id?: string;\n  };\n  mute: Boolean;\n  badge: Boolean;\n  loc_key: string;\n  loc_args: string[];\n  random_id: number;\n  title: string;\n  description: string;\n};\n\ntype NotificationData = {\n  messageId?: number;\n  chatId?: number;\n  title: string;\n  body: string;\n};\n\nconst clickBuffer: Record<string, NotificationData> = {};\nconst shownNotifications = new Set();\nlet pendingNotifications: Record<number, NotificationData[]> = {};\n\nfunction getPushData(e: PushEvent | Notification): PushData | undefined {\n  try {\n    return e.data.json();\n  } catch (error) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.log('[SW] Unable to parse push notification data', e.data);\n    }\n    return undefined;\n  }\n}\n\nfunction getChatId(data: PushData) {\n  if (data.custom.from_id) {\n    return parseInt(data.custom.from_id, 10);\n  }\n  // Chats and channels have negative IDs\n  if (data.custom.chat_id) {\n    return parseInt(data.custom.chat_id, 10) * -1;\n  }\n  if (data.custom.channel_id) {\n    return parseInt(data.custom.channel_id, 10) * -1;\n  }\n  return undefined;\n}\n\nfunction getMessageId(data: PushData) {\n  if (!data.custom.msg_id) return undefined;\n  return parseInt(data.custom.msg_id, 10);\n}\n\nfunction getNotificationData(data: PushData): NotificationData {\n  return {\n    chatId: getChatId(data),\n    messageId: getMessageId(data),\n    title: data.title || APP_NAME,\n    body: data.description,\n  };\n}\n\nfunction showNotification({\n  chatId,\n  messageId,\n  body,\n  title,\n}: NotificationData) {\n  return self.registration.showNotification(title, {\n    body,\n    data: {\n      chatId,\n      messageId,\n    },\n    icon: 'icon-192x192.png',\n    badge: 'icon-192x192.png',\n    vibrate: [200, 100, 200],\n  });\n}\n\nasync function showNotifications(groupLimit: number = 1) {\n  const count = Object.keys(pendingNotifications).reduce<number>((result, groupId) => {\n    result += pendingNotifications[Number(groupId)].length;\n    return result;\n  }, 0);\n  // if we have more than groupLimit notification groups we send only one notification\n  if (Object.keys(pendingNotifications).length > groupLimit) {\n    await showNotification({\n      title: APP_NAME,\n      body: `You have ${count} new Telegram notifications`,\n    });\n  } else {\n    // Else we send a notification per group\n    await Promise.all(Object.keys(pendingNotifications)\n      // eslint-disable-next-line no-async-without-await/no-async-without-await\n      .map(async (groupId) => {\n        const group = pendingNotifications[Number(groupId)];\n        if (group.length > groupLimit) {\n          return showNotification({\n            title: APP_NAME,\n            body: `You have ${count} notifications from ${group[0].title}`,\n            chatId: Number(groupId),\n          });\n        }\n        return Promise.all(group.map(showNotification));\n      }));\n  }\n\n  // Clear all pending notifications\n  pendingNotifications = {};\n}\n\nconst flushNotifications = debounce(showNotifications, 1000, false);\n\nasync function handleNotification(notification: NotificationData, groupLimit?: number) {\n  // Dont show already triggered notification\n  if (shownNotifications.has(notification.messageId)) {\n    shownNotifications.delete(notification.messageId);\n    return;\n  }\n\n  const groupId = notification.chatId || 0;\n  if (!pendingNotifications[groupId]) {\n    pendingNotifications[groupId] = [];\n  }\n  pendingNotifications[groupId].push(notification);\n  await flushNotifications(groupLimit);\n}\n\nexport function handlePush(e: PushEvent) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('[SW] Push received event', e);\n    if (e.data) {\n      // eslint-disable-next-line no-console\n      console.log('[SW] Push received with data', e.data.json());\n    }\n  }\n  const data = getPushData(e);\n\n  // Do not show muted notifications\n  if (!data || data.mute === Boolean.True) return;\n\n  const notification = getNotificationData(data);\n  e.waitUntil(handleNotification(notification));\n}\n\nasync function focusChatMessage(client: WindowClient, data: { chatId?: number; messageId?: number }) {\n  const {\n    chatId,\n    messageId,\n  } = data;\n  if (!chatId) return;\n  client.postMessage({\n    type: 'focusMessage',\n    payload: {\n      chatId,\n      messageId,\n    },\n  });\n  // Catch \"focus not allowed\" DOM Exceptions\n  try {\n    await client.focus();\n  } catch (error) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('[SW] ', error);\n    }\n  }\n}\n\nexport function handleNotificationClick(e: NotificationEvent) {\n  const appUrl = self.location.href.replace('serviceWorker.js', '');\n  e.notification.close(); // Android needs explicit close.\n  const { data } = e.notification;\n  const notifyClients = async () => {\n    const clients = await self.clients.matchAll({ type: 'window' }) as WindowClient[];\n    const clientsInScope = clients.filter((client) => client.url === self.registration.scope);\n    e.waitUntil(Promise.all(clientsInScope.map((client) => {\n      clickBuffer[client.id] = data;\n      return focusChatMessage(client, data);\n    })));\n    if (!self.clients.openWindow || clientsInScope.length > 0) return undefined;\n\n    // If there is no opened client we need to open one and wait until it is fully loaded\n    const newClient = await self.clients.openWindow(appUrl);\n    if (newClient) {\n      // Store notification data until client is fully loaded\n      clickBuffer[newClient.id] = data;\n    }\n    return undefined;\n  };\n  e.waitUntil(notifyClients());\n}\n\nexport function handleClientMessage(e: ExtendableMessageEvent) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('[SW] New message from client', e);\n  }\n  if (!e.data) return;\n  const source = e.source as WindowClient;\n  if (e.data.type === 'clientReady') {\n    // focus on chat message when client is fully ready\n    if (clickBuffer[source.id]) {\n      e.waitUntil(focusChatMessage(source, clickBuffer[source.id]));\n      delete clickBuffer[source.id];\n    }\n  }\n  if (e.data.type === 'newMessageNotification') {\n    // store messageId for already shown notification\n    const notification: NotificationData = e.data.payload;\n    e.waitUntil(handleNotification(notification, 3));\n    shownNotifications.add(notification.messageId);\n  }\n}\n","import { DEBUG } from './config';\nimport { respondForProgressive } from './serviceWorker/progressive';\nimport { respondWithCache, clearAssetCache } from './serviceWorker/assetCache';\nimport { handlePush, handleNotificationClick, handleClientMessage } from './serviceWorker/pushNotification';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nconst ASSET_CACHE_PATTERN = /[0-9a-f]{20}.*\\.(js|css|woff2?|svg|png|jpg|json|wasm)$/;\n\nself.addEventListener('install', (e) => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('ServiceWorker installed');\n  }\n\n  // Activate worker immediately\n  e.waitUntil(self.skipWaiting());\n});\n\nself.addEventListener('activate', (e) => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('ServiceWorker activated');\n  }\n\n  // Become available to all pages\n  e.waitUntil(clearAssetCache());\n  e.waitUntil(self.clients.claim());\n});\n\n// eslint-disable-next-line no-restricted-globals\nself.addEventListener('fetch', (e: FetchEvent) => {\n  e.respondWith((() => {\n    const { url } = e.request;\n\n    if (url.includes('/progressive/')) {\n      return respondForProgressive(e);\n    }\n\n    if (url.startsWith('http') && url.match(ASSET_CACHE_PATTERN)) {\n      return respondWithCache(e);\n    }\n\n    return fetch(e.request);\n  })());\n});\n\nself.addEventListener('push', handlePush);\nself.addEventListener('notificationclick', handleNotificationClick);\nself.addEventListener('message', handleClientMessage);\n","import { ASSET_CACHE_NAME } from '../config';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport async function respondWithCache(e: FetchEvent) {\n  const cache = await self.caches.open(ASSET_CACHE_NAME);\n  const cached = await cache.match(e.request);\n\n  if (cached) {\n    return cached;\n  }\n\n  const remote = await fetch(e.request);\n  cache.put(e.request, remote.clone());\n\n  return remote;\n}\n\nexport function clearAssetCache() {\n  return self.caches.delete(ASSET_CACHE_NAME);\n}\n"],"sourceRoot":""}