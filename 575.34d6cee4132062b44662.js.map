{"version":3,"file":"575.34d6cee4132062b44662.js","mappings":"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","sources":["webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/SlideTransition.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/BotAttachModal.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../global/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  canReport?: boolean;\n  onReport: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  canReport,\n  onReport,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n          {canReport && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={onReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { TextPart } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nconst formatFileSize = (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n\nexport default formatFileSize;\n","import React, {\n  FC, useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 1500;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    let timeout: number | undefined;\n    if (!isVisible || !isPlayed || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlayed, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && renderFileSize(bufferedProgress, fileSize)}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className=\"playback-rate-menu\"\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(loadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * loadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './VideoPlayer.scss';\n\nimport VideoPlayerControls from './VideoPlayerControls';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  areControlsVisible: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleMouseOut = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (e.target === videoRef.current) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!isGif && !IS_TOUCH_ENV ? handleMouseMove : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration || 0 : 0}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport {\n  getChatAvatarHash,\n  getMessageDocument,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { AVATAR_FULL_DIMENSIONS, calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setIsFooterHidden?: (isHidden: boolean) => void;\n  isFooterHidden?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    messageId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    profilePhotoIndex,\n    origin,\n    animationLevel,\n    isFooterHidden,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    onClose,\n    onFooterClick,\n    setIsFooterHidden,\n  } = props;\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n\n  const isOpen = Boolean(avatarOwner || messageId);\n  const isAvatar = Boolean(avatarOwner);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const toggleControls = useCallback((isVisible) => {\n    setIsFooterHidden?.(!isVisible);\n  }, [setIsFooterHidden]);\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  if (isAvatar) {\n    return (\n      <div key={chatId} className=\"MediaViewerContent\">\n        {renderPhoto(\n          fullMediaBlobUrl || previewBlobUrl,\n          calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n          !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        )}\n      </div>\n    );\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={`MediaViewerContent ${hasFooter ? 'has-footer' : ''}`}\n    >\n      {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      )}\n      {isVideo && ((!isActive && IS_TOUCH_ENV) ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      ) : (\n        <VideoPlayer\n          key={messageId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          areControlsVisible={!isFooterHidden}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          volume={volume}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isHidden={isFooterHidden && IS_TOUCH_ENV}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        origin,\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MediaViewerOrigin } from '../../types';\n\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport arePropsShallowEqual from '../../util/arePropsShallowEqual';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD, RealTouchEvent } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport useTimeout from '../../hooks/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  getMessageId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMessage: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  isActive?: boolean;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isZoomed?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = 40;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 0.6;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_X_THRESHOLD = 40;\nconst CLICK_Y_THRESHOLD = 80;\nlet cancelAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  messageId,\n  getMessageId,\n  selectMessage,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  isActive,\n  hasFooter,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const [activeMessageId, setActiveMessageId] = useState<number | undefined>(messageId);\n  const forceUpdate = useForceUpdate();\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(true);\n\n  const {\n    isZoomed,\n    onClose,\n  } = rest;\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMessageDebounced = useDebouncedCallback(selectMessage, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const handleToggleFooterVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = window.innerHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < CLICK_X_THRESHOLD) return;\n    if (!isFooter && e.pageX > window.innerWidth - CLICK_X_THRESHOLD) return;\n    setIsFooterHidden(!isFooterHidden);\n  }, [isFooterHidden]);\n\n  useTimeout(() => setIsFooterHidden(false), ANIMATION_DURATION - 150);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !containerRef.current || isZoomed || !activeMessageId) {\n      return undefined;\n    }\n    let lastTransform = { x: 0, y: 0, scale: 1 };\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (e: MouseEvent) => {\n      if (transformRef.current.scale !== 1) return false;\n      let direction = 0;\n      if (window.innerHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return false;\n      }\n      if (e.pageX < CLICK_X_THRESHOLD) {\n        direction = -1;\n      } else if (e.pageX > window.innerWidth - CLICK_X_THRESHOLD) {\n        direction = 1;\n      }\n      const mId = getMessageId(activeMessageId, direction);\n      if (mId) {\n        const offset = (window.innerWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMessageId(mId);\n        selectMessageDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n      }\n      return direction !== 0;\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      excludedClosestSelector: '.MediaViewerFooter',\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        lastGestureTime = Date.now();\n        if (arePropsShallowEqual(transformRef.current, { x: 0, y: 0, scale: 1 })) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }) => {\n        if (checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS) {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= window.innerWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const h = 10;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: lastTransform.x + dragOffsetX,\n              y: lastTransform.y + dragOffsetY,\n              scale,\n            });\n          }\n          return;\n        }\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > h || (absOffsetX > h && absOffsetY < h)) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            setTransform({\n              x: dragOffsetX,\n              y: 0,\n              scale,\n            });\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > h || (absOffsetY > h && absOffsetX < h)) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          setTransform({\n            x: 0,\n            y: dragOffsetY,\n            scale,\n          });\n        }\n      },\n      onZoom: (e, {\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        // Calculate current scale based on zoom factor and limits, add max zoom margin for bounce back effect\n        const scale = Math.min(MAX_ZOOM * 3, Math.max(lastTransform.scale * zoomFactor, MIN_ZOOM));\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        setTransform({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n      },\n      onClick(e) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n          return undefined;\n        }\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return undefined;\n          lastTransform = {\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          };\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        return animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n      },\n      onRelease: () => {\n        const absX = Math.abs(transformRef.current.x);\n        const absY = Math.abs(transformRef.current.y);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n\n        clearSwipeDirectionDebounced();\n        setIsActiveDebounced(true);\n\n        // If scale is less than 1 we need to bounce back\n        if (scale < 1) {\n          lastTransform = { x: 0, y: 0, scale: 1 };\n          return animateNumber({\n            from: [x, y, scale],\n            to: [0, 0, 1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n        }\n        if (scale > 1) {\n          if (!content || !initialContentRect) {\n            lastTransform = {\n              x,\n              y,\n              scale,\n            };\n            return undefined;\n          }\n          // Get current content boundaries\n          const boundaries = content.getBoundingClientRect();\n          const s1 = Math.min(scale, MAX_ZOOM);\n          const scaleFactor = s1 / scale;\n\n          // Calculate new position based on the last zoom center to keep the zoom center\n          // at the same position when bouncing back from max zoom\n          let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n          let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n          // Arbitrary pan velocity coefficient\n          const k = 0.15;\n\n          // If scale didn't change, we need to add inertia to pan gesture\n          if (lastTransform.scale === scale) {\n            // Calculate user gesture velocity\n            const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n            const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n            // Add extra distance based on gesture velocity and last pan delta\n            x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n            y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n          }\n\n          // If content is outside window we calculate offset boundaries\n          // based on initial content rect and current scale\n          if (boundaries.width > window.innerWidth) {\n            const minOffsetX = -initialContentRect.left * s1;\n            const maxOffsetX = window.innerWidth - initialContentRect.right * s1;\n            x1 = Math.min(minOffsetX, Math.max(maxOffsetX, x1));\n          } else {\n            // Else we center the content on the screen\n            x1 = (window.innerWidth - window.innerWidth * s1) / 2;\n          }\n\n          if (boundaries.height > window.innerHeight) {\n            const minOffsetY = -initialContentRect.top * s1;\n            const maxOffsetY = window.innerHeight - initialContentRect.bottom * s1;\n            y1 = Math.min(minOffsetY, Math.max(maxOffsetY, y1));\n          } else {\n            y1 = (window.innerHeight - window.innerHeight * s1) / 2;\n          }\n          lastTransform = {\n            x: x1,\n            y: y1,\n            scale: s1,\n          };\n          cancelAnimation = animateNumber({\n            from: [x, y, scale],\n            to: [x1, y1, s1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n          return undefined;\n        }\n        lastTransform = {\n          x,\n          y,\n          scale,\n        };\n        if (absY >= SWIPE_Y_THRESHOLD) return onClose();\n        // Bounce back if vertical swipe is below threshold\n        if (absY > 0) {\n          return animateNumber({\n            from: y,\n            to: 0,\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: 0,\n              y: value,\n              scale,\n            }),\n          });\n        }\n        // Get horizontal swipe direction\n        const direction = x < 0 ? 1 : -1;\n        const mId = getMessageId(activeMessageId, x < 0 ? 1 : -1);\n        // Get the direction of the last pan gesture.\n        // Could be different from the total horizontal swipe direction\n        // if user starts a swipe in one direction and then changes the direction\n        // we need to cancel slide transition\n        const dirX = panDelta.x < 0 ? -1 : 1;\n        if (mId && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n          const offset = (window.innerWidth + SLIDES_GAP) * direction;\n          // If image is shifted by more than SWIPE_X_THRESHOLD,\n          // We shift everything by one screen width and then set new active message id\n          transformRef.current.x += offset;\n          setActiveMessageId(mId);\n          selectMessageDebounced(mId);\n        }\n        // Then we always return to the original position\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: transformRef.current.scale,\n          }),\n        });\n        return undefined;\n      },\n    });\n  }, [\n    isZoomed,\n    onClose,\n    setTransform,\n    getMessageId,\n    activeMessageId,\n    selectMessageDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n  ]);\n\n  if (!activeMessageId) return undefined;\n\n  const nextMessageId = getMessageId(activeMessageId, 1);\n  const previousMessageId = getMessageId(activeMessageId, -1);\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {previousMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-window.innerWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={previousMessageId}\n          />\n        </div>\n      )}\n      {activeMessageId && (\n        <div\n          className={`MediaViewerSlide ${isActive ? 'MediaViewerSlide--active' : ''}`}\n          onClick={handleToggleFooterVisibility}\n          ref={activeSlideRef}\n          style={getAnimationStyle(offsetX, offsetY, scale)}\n        >\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={activeMessageId}\n            isActive={isActive && isActiveRef.current}\n            setIsFooterHidden={setIsFooterHidden}\n            isFooterHidden={isFooterHidden || isZoomed || scale !== 1}\n          />\n        </div>\n      )}\n      {nextMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(window.innerWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={nextMessageId}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: React.ReactNode;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.Transition__slide--active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import React, { FC } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Transition, { ChildrenFn, TransitionProps } from '../ui/Transition';\n\nconst SlideTransition: FC<TransitionProps & { children: ChildrenFn }> = ({ children, ...props }) => {\n  if (IS_TOUCH_ENV) return children(true, true, 1);\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Transition {...props}>{children}</Transition>;\n};\n\nexport default SlideTransition;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = useCallback(() => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  }, [zoomLevel]);\n\n  const handleZoomIn = useCallback(() => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  }, [zoomLevel]);\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../hooks/usePrevious';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureEvents } from '../../util/captureEvents';\nimport windowSize from '../../util/windowSize';\nimport { AVATAR_FULL_DIMENSIONS, MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport PanZoom from './PanZoom';\nimport SenderInfo from './SenderInfo';\nimport SlideTransition from './SlideTransition';\nimport ZoomControls from './ZoomControls';\nimport ReportModal from '../common/ReportModal';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  isChatWithSelf,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const { isGif } = video || webPageVideo || {};\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const singleMessageId = webPagePhoto || webPageVideo ? messageId : undefined;\n\n  const messageIds = useMemo(() => {\n    return singleMessageId\n      ? [singleMessageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [singleMessageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 && !IS_TOUCH_ENV ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({\n    x: 0,\n    y: 0,\n  });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const avatarPhoto = avatarOwner?.photos?.[profilePhotoIndex!];\n  const canReport = !!avatarPhoto && profilePhotoIndex! > 0 && !isChatWithSelf;\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({\n      x: 0,\n      y: 0,\n    });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({\n        x: 0,\n        y: 0,\n      });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  }, [close, chatId, threadId, focusMessage, toggleChatInfo, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId,\n      messageIds: [messageId],\n    });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  const selectMessage = useCallback((id?: number) => openMediaViewer({\n    chatId,\n    threadId,\n    messageId: id,\n    origin,\n  }, {\n    forceOnHeavyAnimation: true,\n  }), [chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (!fromId) return undefined;\n    const index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      return messageIds[index + direction];\n    }\n    return undefined;\n  }, [messageIds]);\n\n  const nextMessageId = getMessageId(messageId, 1);\n  const previousMessageId = getMessageId(messageId, -1);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({\n      x,\n      y,\n    });\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: closeMediaViewer,\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectMessage(previousMessageId);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectMessage(nextMessageId);\n          break;\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [isOpen, nextMessageId, previousMessageId, selectMessage]);\n\n  useEffect(() => {\n    if (isZoomed || IS_TOUCH_ENV) return undefined;\n    const element = document.querySelector<HTMLDivElement>('.MediaViewerSlide--active');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .Spoiler, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: close,\n    });\n  }, [close, isGif, isZoomed, messageId]);\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={close}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          isZoomed={isZoomed}\n          message={message}\n          fileName={fileName}\n          canReport={canReport}\n          onReport={openReportModal}\n          onCloseMediaViewer={close}\n          onForward={handleForward}\n          onZoomToggle={handleZoomToggle}\n          isAvatar={isAvatar}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <PanZoom\n        noWrap={!canPanZoomWrap}\n        canPan={isZoomed}\n        panDeltaX={panDelta.x}\n        panDeltaY={panDelta.y}\n        zoomLevel={zoomLevel}\n        onPan={handlePan}\n      >\n        <SlideTransition\n          activeKey={selectedMediaMessageIndex}\n          name={slideAnimation}\n        >\n          {(isActive: boolean) => (\n            <MediaViewerSlides\n              messageId={messageId}\n              getMessageId={getMessageId}\n              chatId={chatId}\n              isPhoto={isPhoto}\n              isGif={isGif}\n              threadId={threadId}\n              avatarOwnerId={avatarOwner && avatarOwner.id}\n              profilePhotoIndex={profilePhotoIndex}\n              origin={origin}\n              isOpen={isOpen}\n              hasFooter={hasFooter}\n              isZoomed={isZoomed}\n              isActive={isActive}\n              isVideo={isVideo}\n              animationLevel={animationLevel}\n              onClose={close}\n              selectMessage={selectMessage}\n              onFooterClick={handleFooterClick}\n            />\n          )}\n        </SlideTransition>\n      </PanZoom>\n      {!isFirst && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n          onClick={() => selectMessage(previousMessageId)}\n        />\n      )}\n      {!isLast && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n          onClick={() => selectMessage(nextMessageId)}\n        />\n      )}\n      <ZoomControls\n        isShown={isZoomed}\n        onChangeZoom={handleZoomValue}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        isChatWithSelf,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n)(MediaViewer));\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  loadMore?: NoneToVoidFunction;\n  onFilterChange: (filter: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  loadMore,\n  onFilterChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  const resetFilter = useCallback(() => {\n    onFilterChange('');\n  }, [onFilterChange]);\n  useInputFocusOnOpen(filterRef, isOpen, resetFilter);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalState } from '../../global/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  sortChatIds,\n} from '../../global/helpers';\nimport { unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n  currentUserId?: string;\n  switchBotInline?: GlobalState['switchBotInline'];\n};\n\nconst ForwardPicker: FC<OwnProps & StateProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  currentUserId,\n  isOpen,\n  switchBotInline,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n    openChatWithText,\n    resetSwitchBotInline,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const chatAndContactIds = useMemo(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, filter, currentUserId),\n      ...(contactIds ? filterUsersByName(contactIds, usersById, filter) : []),\n    ]), chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, contactIds, currentUserId, filter, isOpen, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    if (switchBotInline) {\n      const text = `@${switchBotInline.botUsername} ${switchBotInline.query}`;\n      openChatWithText({ chatId: userId, text });\n      resetSwitchBotInline();\n    } else {\n      setForwardChatId({ id: userId });\n    }\n  }, [openChatWithText, resetSwitchBotInline, setForwardChatId, switchBotInline]);\n\n  const renderingChatAndContactIds = useCurrentOrPrev(chatAndContactIds, true)!;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={renderingChatAndContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={exitForwardMode}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n      switchBotInline,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n      switchBotInline,\n    };\n  },\n)(ForwardPicker));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url));\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import useWindowSize from '../../../hooks/useWindowSize';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_close' | 'iframe_ready';\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'main_button_pressed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: rgba(90,90,90,0.3) transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: rgba(90, 90, 90, 0.3);\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (isOpen: boolean, isSimpleView: boolean, onEvent: (event: WebAppInboundEvent) => void) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLIFrameElement>(null);\n  const ignoreEventsRef = useRef<boolean>(false);\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, []);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, []);\n\n  const sendViewport = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n      },\n    });\n  }, [sendEvent]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport();\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        sendCustomStyle(SCROLLBAR_STYLE);\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendTheme, sendViewport]);\n\n  useEffect(() => {\n    if (windowSize) {\n      sendViewport();\n    }\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    }\n  }, [isOpen, sendViewport]);\n\n  return {\n    ref, sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalState } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport windowSize from '../../util/windowSize';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { selectCurrentChat, selectTheme } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport useWebAppFrame, { WebAppInboundEvent } from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: GlobalState['webApp'];\n};\n\ntype StateProps = {\n  isInstalled?: boolean;\n  chat?: ApiChat;\n  theme?: ThemeKey;\n};\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst LINK_PREFIX = 'https://t.me/';\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  isInstalled,\n  theme,\n}) => {\n  const {\n    closeWebApp, sendWebViewData, prolongWebView, toggleBotInAttachMenu, openTelegramLink, openChat,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const lang = useLang();\n  const {\n    url, bot, buttonText, queryId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      const linkUrl = LINK_PREFIX + event.eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_data_send') {\n      const { eventData } = event;\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const { eventData } = event;\n      const themeParams = extractCurrentThemeParams();\n      // Validate colors if they are present\n      const color = !eventData.color || validateHexColor(eventData.color) ? eventData.color\n        : themeParams.button_color;\n      const textColor = !eventData.text_color || validateHexColor(eventData.text_color) ? eventData.text_color\n        : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n  }, [bot, buttonText, closeWebApp, openTelegramLink, sendWebViewData]);\n\n  const {\n    ref, reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      bot: bot!,\n      queryId: queryId!,\n      peer: chat!,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleBotInAttachMenu({\n      botId: bot!.id,\n      isEnabled: !isInstalled,\n    });\n  }, [bot, isInstalled, toggleBotInAttachMenu]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={closeWebApp}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachMenuBot && (\n            <MenuItem icon={isInstalled ? 'stop' : 'install'} onClick={handleToggleClick} destructive={isInstalled}>\n              {lang(isInstalled ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [lang, closeWebApp, bot, MoreMenuButton, handleRefreshClick, isInstalled, handleToggleClick, chat, openBotChat]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) setMainButton(undefined);\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={closeWebApp}\n      header={header}\n      hasCloseButton\n    >\n      {isOpen && (\n        <>\n          <iframe\n            ref={ref}\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox=\"allow-scripts allow-same-origin allow-popups allow-forms\"\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { bot } = webApp || {};\n    const isInstalled = Boolean(bot && global.attachMenu.bots[bot.id]);\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n\n    return {\n      isInstalled,\n      chat,\n      theme,\n    };\n  },\n)(WebAppModal));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, { FC } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ApiUser } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n};\n\nconst BotAttachModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { closeBotAttachRequestModal, confirmBotAttachRequest } = getActions();\n\n  const lang = useLang();\n\n  const name = bot?.firstName;\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={closeBotAttachRequestModal}\n      confirmHandler={confirmBotAttachRequest}\n      title={name}\n      textParts={lang('WebApp.AddToAttachmentText', name)}\n    />\n  );\n};\n\nexport default BotAttachModal;\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys([['meta+C', handleCopy]]);\n};\n\nexport default useCopySelectedMessages;\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n  } = getActions();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const fullName = getUserFullName(user);\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"medium\" />\n                    <div className=\"title\">\n                      <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n                    </div>\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n    };\n  },\n)(ReactorListModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 240;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectAnimationData = useMedia(`sticker${effectAnimationId}`, !effectAnimationId, ApiMediaFormat.Lottie);\n\n  const [localEffectAnimationData, setLocalEffectAnimationData] = useState<string | undefined>();\n  useEffect(() => {\n    if (localEffectAnimation) {\n      getAnimationData(localEffectAnimation as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalEffectAnimationData(data);\n      });\n    }\n  }, [localEffectAnimation]);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        id={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        animationData={localEffectAnimationData || effectAnimationData}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(ANIMATED_STICKERS_PATHS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, loadContactList, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FakeIcon from '../../common/FakeIcon';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n            {chat.fakeType && <FakeIcon fakeType={chat.fakeType} />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview--image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    deleteChatFolder,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n}) => {\n  const { loadProfilePhotos, loadAuthorizations } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n    checkUsername,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n)(SettingsEditProfile));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n};\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    showDialog,\n  } = getActions();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [orderedFolderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n    };\n  },\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isUserId } from '../../../../global/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n  const isVideo = stickerSet.isVideos;\n\n  const firstLetters = useMemo(() => {\n    if ((isVideo && !IS_WEBM_SUPPORTED) || !mediaData) return getFirstLetters(stickerSet.title, 2);\n    return undefined;\n  }, [isVideo, mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {isVideo ? (\n        <video src={mediaData} className={transitionClassNames} loop autoPlay />\n      ) : (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n          clickArg={undefined}\n          noContextMenu\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ISettings, TimeFormat } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup, { IRadioOption } from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'shouldSuggestStickers' |\n    'shouldLoopStickers' |\n    'timeFormat'\n  )> & {\n    stickerSetIds?: string[];\n    stickerSetsById?: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  defaultReaction,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ISettings, LangCode } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"src-components-left-settings-SettingsActiveSession-module__SettingsActiveSession\",\"settingsActiveSession\":\"src-components-left-settings-SettingsActiveSession-module__SettingsActiveSession\",\"iconDevice\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice\",\"iconDevice__android\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__android\",\"iconDeviceAndroid\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__android\",\"iconDevice__apple\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__apple\",\"iconDeviceApple\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__apple\",\"iconDevice__brave\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__brave\",\"iconDeviceBrave\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__brave\",\"iconDevice__chrome\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__chrome\",\"iconDeviceChrome\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__chrome\",\"iconDevice__edge\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__edge\",\"iconDeviceEdge\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__edge\",\"iconDevice__firefox\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__firefox\",\"iconDeviceFirefox\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__firefox\",\"iconDevice__linux\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__linux\",\"iconDeviceLinux\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__linux\",\"iconDevice__opera\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__opera\",\"iconDeviceOpera\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__opera\",\"iconDevice__safari\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__safari\",\"iconDeviceSafari\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__safari\",\"iconDevice__samsung\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__samsung\",\"iconDeviceSamsung\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__samsung\",\"iconDevice__ubuntu\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__ubuntu\",\"iconDeviceUbuntu\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__ubuntu\",\"iconDevice__unknown\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__unknown\",\"iconDeviceUnknown\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__unknown\",\"iconDevice__vivaldi\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__vivaldi\",\"iconDeviceVivaldi\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__vivaldi\",\"iconDevice__windows\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__windows\",\"iconDeviceWindows\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__windows\",\"iconDevice__xbox\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__xbox\",\"iconDeviceXbox\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__xbox\",\"title\":\"src-components-left-settings-SettingsActiveSession-module__title\",\"note\":\"src-components-left-settings-SettingsActiveSession-module__note\",\"date\":\"src-components-left-settings-SettingsActiveSession-module__date\",\"box\":\"src-components-left-settings-SettingsActiveSession-module__box\",\"actionHeader\":\"src-components-left-settings-SettingsActiveSession-module__actionHeader\",\"actionName\":\"src-components-left-settings-SettingsActiveSession-module__actionName\",\"headerButton\":\"src-components-left-settings-SettingsActiveSession-module__headerButton\"};","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n    if (ttlDays <= 7) {\n      return '7';\n    }\n    if (ttlDays <= 30) {\n      return '30';\n    }\n    if (ttlDays <= 90) {\n      return '90';\n    }\n    if (ttlDays <= 180) {\n      return '180';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => [{\n    label: lang('Weeks', 1, 'i'),\n    value: '7',\n  }, {\n    label: lang('Months', 1, 'i'),\n    value: '30',\n  }, {\n    label: lang('Months', 3, 'i'),\n    value: '90',\n  }, {\n    label: lang('Months', 6, 'i'),\n    value: '180',\n  }], [lang]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadContactList,\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, filter)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadContactList}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  availableReactions,\n  selectedReaction,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = availableReactions?.filter((l) => !l.isInactive).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || screen === SettingsScreens.QuickReaction\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    loadContactList,\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    loadContactList,\n    setGlobalSearchQuery,\n  } = getActions();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React, {\n  FC, useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChatFolder } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else {\n          const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n          copyTextToClipboard(clipboardText);\n        }\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, memo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady, ApiMediaFormat.Lottie);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n  const { transitionClassNames: animatedClassNames } = useShowTransition(shouldRenderAnimated);\n  const { shouldRender: shouldRenderStatic, transitionClassNames: staticClassNames } = useShowTransition(\n    !isReady || !isAnimationLoaded, undefined, true,\n  );\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isReady ? [staticClassNames] : undefined,\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          id={`select_${reaction.reaction}`}\n          className={cn('animated', [animatedClassNames])}\n          animationData={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  FC, memo, useLayoutEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiUser } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onSendReaction: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onDownload,\n  onSaveGif,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined, onCopyMessages);\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"heart-outline\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? getUserFullName(seenByRecentUsers[0])\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { MessageListType } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsMessageProtected,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport buildClassName from '../../../util/buildClassName';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n  } = getActions();\n\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canShowSeenBy={canShowSeenBy}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: !isProtected && canCopy,\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n    };\n  },\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectStickerSetByShortName,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n                isSavedMessages={isSavedMessages}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiBotCommand, ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser, selectChatBot,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact, isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n  } = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const canReportChat = isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf);\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n    };\n  },\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonimous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonimous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonimous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n  onStickerFave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n            onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n            isSavedMessages={isSavedMessages}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { selectIsChatWithSelf } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  isSavedMessages,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadRecentStickers();\n      sendMessageAction({ type: 'chooseSticker' });\n    }\n  }, [loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n          noContextMenu\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n    };\n  },\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const lang = useLang();\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    return { stickers, isSavedMessages };\n  },\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsIds?: string[];\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  chatId,\n  selectedSendAsId,\n  sendAsIds,\n}) => {\n  const { saveDefaultSendAs } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsIds && !sendAsIds.length) {\n      onClose();\n    }\n  }, [sendAsIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsIds?.map((id, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const fullName = user ? getUserFullName(user) : chat?.title;\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleUserSelect(id)}\n            focus={selectedSendAsIndex === index}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              <div className=\"title\">\n                <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n              </div>\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport renderText from '../common/helpers/renderText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isSomeModalOpen, onModalToggle,\n}) => {\n  const { loadStickers, toggleStickerSet } = getActions();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            clickArg={undefined}\n            onClick={openModal}\n            noContextMenu\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'StatisticViews', isPlain: true },\n    {\n      name: 'forwards', title: 'PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{cell.isApproximate ? `≈${field}` : field}</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views)}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import React, {\n  FC, memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messageId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  isGroup,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  useEffect(() => {\n    if (!isActive) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    // Show Loading component if message was already selected for improving transition animation\n    const messageId = global.statistics.currentMessageId;\n\n    return {\n      statistics, dcId, isGroup, messageId,\n    };\n  },\n)(Statistics));\n","import React, {\n  FC, memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiMessageStatistics, StatisticsGraph } from '../../../api/types';\nimport { selectChat } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const statistics = global.statistics.currentMessage;\n    const messageId = global.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport {\n  ApiChat, ApiChatBannedRights, ApiExportedInvite, ApiMediaFormat,\n} from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, filter);\n  }, [chat.fullInfo?.members, currentUserId, filter]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiExportedInvite, ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  isProtected?: boolean;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  isProtected,\n}) => {\n  const {\n    checkPublicLink,\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      isProtected: chat?.isProtected,\n    };\n  },\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../global/selectors';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, loadContactList } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadContactList, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      openChat({ id });\n    }\n  }, [noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES } from '../../../config';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('Invite').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `t.me/${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"inviteDuck\"\n                size={STICKER_SIZE_INVITES}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              icon=\"link\"\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                icon=\"link\"\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    if (enabledReactions) {\n      setIsLoading(false);\n      setIsTouched(false);\n      setLocalEnabledReactions(enabledReactions);\n    }\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableReactions?.filter((l) => !l.isInactive).map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  about,\n  date,\n  isChannel,\n  user,\n  serverTimeOffset,\n  chatId,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport getAnimationData from '../../common/helpers/animatedAssets';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('JoinRequest').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"section\">\n        <div className=\"section-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"joinRequestDucks\"\n              size={STICKER_SIZE_JOIN_REQUESTS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n        {Boolean(chat?.joinRequests?.length) && (\n          <div className=\"bulk-actions\">\n            <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n            <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n          </div>\n        )}\n      </div>\n      <div className=\"section\">\n        <div className=\"custom-scroll\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, lang('PaymentCheckoutMethod'))}\n        {paymentProvider && renderCheckoutItem(\n          buildClassName('provider', paymentProvider.toLowerCase()),\n          paymentProvider,\n          lang('PaymentCheckoutProvider'),\n        )}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, lang('PaymentShippingAddress'))}\n        {name && renderCheckoutItem('icon-user', name, lang('PaymentCheckoutName'))}\n        {phone && renderCheckoutItem('icon-phone', phone, lang('PaymentCheckoutPhoneNumber'))}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, lang('PaymentCheckoutShippingMethod'))}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('PaymentCardName')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getActions();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {\n        };\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isLoading}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n    };\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<string>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<string>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import React, {\n  FC, useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["cache","Map","useBlurSync","dataUri","blurredRef","useRef","isChanged","useOnChange","current","undefined","img","Image","src","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","delay","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","Boolean","createGhost","source","origin","ghost","document","createElement","classList","add","draggable","oncontextmenu","stopEvent","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","mediaData","isVideo","isZoomed","fileName","isAvatar","canReport","onReport","onCloseMediaViewer","onForward","onZoomToggle","downloadMessageMedia","cancelMessageMediaDownload","getActions","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaHash","handleDownloadClick","useCallback","lang","useLang","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","className","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","useFlag","seekerRef","isSeekingRef","isSeeking","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","map","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","loadedPercent","totalSize","formatFileSize","Menu","positionY","autoClose","onClose","rate","disabled","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","videoRef","setIsPlayed","IS_TOUCH_ENV","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseMove","handleMouseOut","target","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","ownProps","chatId","threadId","messageId","avatarOwnerId","profilePhotoIndex","mediaViewer","selectChatMessage","senderId","avatarOwner","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","isFooterHidden","onFooterClick","setIsFooterHidden","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isFromSharedMedia","isFromSearch","isGhostAnimation","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","renderPhoto","calculateMediaViewerDimensions","textParts","renderMessageText","hasFooter","onContextMenu","imageSize","canDrag","Spinner","renderVideoPreview","alt","ANIMATION_DURATION","cancelAnimation","SwipeDirection","getMessageId","selectMessage","rest","containerRef","activeSlideRef","transformRef","x","y","scale","swipeDirectionRef","isActiveRef","activeMessageId","setActiveMessageId","setTransform","selectMessageDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","handleToggleFooterVisibility","isFooter","innerHeight","pageY","pageX","innerWidth","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","timingFunctions","onUpdate","isNotPassive","excludedClosestSelector","checkIfControlTarget","arePropsShallowEqual","event","captureEvent","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","abs","absOffsetY","h","Vertical","Horizontal","onZoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MAX_ZOOM","scaleFactor","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","centerX","centerY","absX","absY","boundaries","s1","x1","y1","k","Vx","Vy","minOffsetX","maxOffsetX","right","minOffsetY","top","maxOffsetY","bottom","dirX","nextMessageId","previousMessageId","offsetX","offsetY","getAnimationStyle","checkIfInsideSelector","selector","matches","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","zoomLevel","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","onMouseDown","newDragData","onMouseUp","deltaX","deltaY","getNewMatrixData","sender","isUserId","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","chat","renderText","formatMediaDateTime","date","Transition","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","setZoomLevel","handleZoomOut","handleZoomIn","step","type","Number","settings","byKey","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","singleMessageId","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","setPanDelta","avatarPhoto","getMessageFileName","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","windowHeight","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handlePan","useHistoryBack","onBack","handleKeyDown","shouldCloseOnVideo","ShowTransition","isRtl","activeKey","name","ReportModal","subject","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","loadMore","onFilterChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","resetFilter","useInputFocusOnOpen","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","Modal","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","i","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","switchBotInline","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","setForwardChatId","exitForwardMode","openChatWithText","resetSwitchBotInline","setFilter","markIsShown","unmarkIsShown","chatAndContactIds","priorityIds","unique","chatIds","getCanPostInChat","MAIN_THREAD_ID","usersById","getGlobal","users","sortChatIds","filterChatsByName","filterUsersByName","handleSelectUser","botUsername","query","renderingChatAndContactIds","useCurrentOrPrev","getErrorHeader","error","isSlowMode","hasErrorKey","pick","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","showNotification","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","isText","renderInvite","contact","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","push","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","handleClose","getUserStatus","label","Checkbox","checked","onCheck","webApp","bot","isInstalled","attachMenu","bots","selectCurrentChat","theme","selectTheme","closeWebApp","sendWebViewData","prolongWebView","toggleBotInAttachMenu","openTelegramLink","openChat","mainButton","setMainButton","buttonText","queryId","isSimple","handleEvent","eventType","linkUrl","eventData","path_full","data","themeParams","extractCurrentThemeParams","validateHexColor","button_color","textColor","text_color","is_visible","trim","is_active","isProgressVisible","is_progress_visible","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","useWindowSize","frame","once","contentWindow","postMessage","JSON","stringify","is_expanded","theme_params","sendCustomStyle","handleMessage","parse","err","useWebAppFrame","shouldShowMainButton","useInterval","peer","handleMainButtonClick","handleRefreshClick","handleToggleClick","botId","isEnabled","openBotChat","MoreMenuButton","isMenuOpen","isAttachMenuBot","destructive","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","getUserFullName","closeBotAttachRequestModal","confirmBotAttachRequest","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","messageListType","canDelete","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useHotkeys","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","handleClick","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","isClosing","startClosing","stopClosing","chosenTab","setChosenTab","canShowFilters","count","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","l","reaction","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","find","ReactionStaticEmoji","fullName","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","ANIMATED_STICKERS_PATHS","stopActiveEmojiInteraction","isHiding","startHiding","isPlaying","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectAnimationData","localEffectAnimationData","setLocalEffectAnimationData","getAnimationData","then","startSize","isReversed","AnimatedSticker","animationData","play","quality","IS_ANDROID","noLoop","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","getChatTitle","isVerified","VerifiedIcon","fakeType","FakeIcon","Link","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","description","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","isVoice","activeDownloads","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","sessionCount","activeSessions","orderedHashes","currentUser","loadProfilePhotos","loadAuthorizations","profileId","ProfileInfo","forceShowSelf","ChatExtra","langName","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","username","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","currentFirstName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","orderedFolderIds","foldersById","recommended","recommendedChatFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","STICKER_SIZE_FOLDER_SETTINGS","pill","fluid","narrow","multiline","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleChange","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","isTouched","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","STICKER_SIZE_PICKER_HEADER","stickerSet","isIntersecting","useIsIntersecting","mediaHash","lottieData","useMediaTransition","firstLetters","getFirstLetters","hasThumbnail","isVideos","IS_WEBM_SUPPORTED","stickers","firstSticker","isLottie","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","noContextMenu","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","stickerSetIds","added","setIds","stickerSetsById","setsById","defaultReaction","appConfig","messageTextSize","messageSendKeyCombo","shouldSuggestStickers","shouldLoopStickers","timeFormat","stickerSettingsRef","observeIntersectionForCovers","setSticker","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleStickerSetClick","handleMessageSendComboChange","newCombo","handleSuggestStickersChange","newValue","handleShouldLoopStickersChange","stickerSets","installedDate","RadioGroup","options","selected","fromSticker","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","context","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","blockedCount","totalCount","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","handler","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","availableReactions","selectedReaction","setDefaultReaction","isInactive","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","clientY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","isReady","selectAnimation","isActivated","activate","deactivate","markAnimationLoaded","shouldRenderAnimated","animatedClassNames","shouldRenderStatic","staticClassNames","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onDownload","onSaveGif","onShowSeenBy","onShowReactors","onCopyMessages","menuRef","scrollableRef","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","noReactions","withReactions","markIsReady","unmarkIsReady","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","option","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","recentReactions","msg","handleReport","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","requestCalendar","calendar","useSchedule","stickerSetAccessHash","isScheduleRequested","isPreloadedGlobally","handleButtonClick","STICKER_SIZE_MODAL","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","canReportChat","chatBot","REPLIES_USER_ID","selectChatBot","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","isQuiz","shouldBeAnonimous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","isLoaded","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","favoriteStickers","onStickerSelect","onStickerUnfave","onStickerFave","stickersPerRow","STICKER_SIZE_PICKER","favoriteStickerIdsSet","noAnimate","onUnfaveClick","has","onFaveClick","stickerSetIntersections","favorite","recentStickers","addedSetIds","shouldPlay","loadRecentStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","sendMessageAction","useSendMessageAction","areAddedLoaded","allSets","noPopulatedSets","stickerSetEl","handleStickerSelect","handleStickerUnfave","handleStickerFave","fullClassName","buttonClassName","onUnsaveClick","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","handleMouseDown","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","currentMessageId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","loadMessageStatistics","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","acc","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","maxLength","noAdmins","adminIds","shouldUseSearchResults","listedIds","noScrollRestore","memberId","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","secondaryIcon","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","SUPPORTED_PROVIDERS","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","canRenderFooter","PaymentStep","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","cropperResultOptions","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","DEBUG","console","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","handleModalClose","labelClassName","accept"],"sourceRoot":""}