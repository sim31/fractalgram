{"version":3,"sources":["webpack:///./src/modules/actions/ui/localSearch.ts","webpack:///./src/modules/actions/ui/chats.ts","webpack:///./src/modules/actions/ui/messages.ts","webpack:///./src/modules/actions/ui/globalSearch.ts","webpack:///./src/modules/actions/ui/stickerSearch.ts","webpack:///./src/modules/actions/ui/users.ts","webpack:///./src/modules/actions/ui/settings.ts","webpack:///./src/modules/actions/ui/misc.ts","webpack:///./src/modules/actions/ui/payments.ts","webpack:///./src/modules/actions/api/chats.ts","webpack:///./src/modules/actions/api/messages.ts","webpack:///./src/modules/actions/api/symbols.ts","webpack:///./src/modules/actions/api/globalSearch.ts","webpack:///./src/modules/actions/api/sync.ts","webpack:///./src/modules/actions/api/localSearch.ts","webpack:///./src/modules/actions/api/management.ts","webpack:///./src/modules/actions/api/users.ts","webpack:///./src/modules/actions/api/settings.ts","webpack:///./src/modules/actions/api/bots.ts","webpack:///./src/modules/actions/api/twoFaSettings.ts","webpack:///./src/modules/actions/api/payments.ts","webpack:///./src/util/requestQuery.ts","webpack:///./src/modules/actions/apiUpdaters/chats.ts","webpack:///./src/modules/actions/apiUpdaters/messages.ts","webpack:///./src/modules/actions/apiUpdaters/users.ts","webpack:///./src/modules/actions/apiUpdaters/symbols.ts","webpack:///./src/modules/actions/apiUpdaters/misc.ts","webpack:///./src/modules/actions/apiUpdaters/settings.ts","webpack:///./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack:///./src/hooks/useBeforeUnload.ts","webpack:///./src/components/ui/Switcher.tsx","webpack:///./src/components/left/main/LeftMainHeader.tsx","webpack:///./src/components/left/ConnectionState.tsx","webpack:///./src/hooks/useThrottledMemo.ts","webpack:///./src/hooks/useThrottle.ts","webpack:///./src/components/left/main/ChatFolders.tsx","webpack:///./src/components/left/search/LeftSearch.async.tsx","webpack:///./src/components/left/main/ContactList.async.tsx","webpack:///./src/components/left/NewChatButton.tsx","webpack:///./src/components/left/main/LeftMain.tsx","webpack:///./src/hooks/useBrowserOnline.ts","webpack:///./src/components/left/settings/Settings.async.tsx","webpack:///./src/components/left/newChat/NewChat.async.tsx","webpack:///./src/components/left/ArchivedChats.async.tsx","webpack:///./src/components/left/LeftColumn.tsx","webpack:///./src/hooks/useWindowSize.ts","webpack:///./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack:///./src/components/middle/HeaderMenuContainer.async.tsx","webpack:///./src/components/middle/HeaderActions.tsx","webpack:///./src/hooks/useWebpThumbnail.ts","webpack:///./src/components/middle/PinnedMessageNavigation.tsx","webpack:///./src/components/middle/HeaderPinnedMessage.tsx","webpack:///./src/components/middle/AudioPlayer.tsx","webpack:///./src/components/middle/MiddleHeader.tsx","webpack:///./src/components/middle/helpers/groupMessages.ts","webpack:///./src/components/middle/helpers/preventMessageInputBlur.ts","webpack:///./src/components/middle/hooks/useStickyDates.ts","webpack:///./src/hooks/useDebounce.ts","webpack:///./src/components/middle/MessageScroll.tsx","webpack:///./src/components/middle/message/helpers/buildContentClassName.ts","webpack:///./src/components/middle/message/helpers/mediaDimensions.ts","webpack:///./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack:///./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack:///./src/components/middle/message/hooks/useFocusMessage.ts","webpack:///./src/components/middle/message/ContextMenuContainer.async.tsx","webpack:///./src/components/middle/ActionMessage.tsx","webpack:///./src/components/common/EmbeddedMessage.tsx","webpack:///./src/components/middle/message/MessageMeta.tsx","webpack:///./src/components/middle/message/Sticker.tsx","webpack:///./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack:///./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack:///./src/components/middle/message/Photo.tsx","webpack:///./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack:///./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack:///./src/components/middle/message/Video.tsx","webpack:///./src/components/middle/message/Contact.tsx","webpack:///./src/components/ui/CheckboxGroup.tsx","webpack:///./src/components/middle/message/PollOption.tsx","webpack:///./src/components/middle/message/Poll.tsx","webpack:///./src/components/middle/message/WebPage.tsx","webpack:///./src/components/middle/message/Invoice.tsx","webpack:///./src/components/middle/message/hocs/withSelectControl.tsx","webpack:///./src/components/middle/message/Album.tsx","webpack:///./src/components/middle/message/RoundVideo.tsx","webpack:///./src/components/middle/message/InlineButtons.tsx","webpack:///./src/components/middle/message/CommentButton.tsx","webpack:///./src/components/middle/message/Message.tsx","webpack:///./src/components/middle/MessageList.tsx","webpack:///./src/components/middle/ScrollDownButton.tsx","webpack:///./src/components/middle/composer/helpers/buildAttachment.ts","webpack:///./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack:///./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack:///./src/util/voiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack:///./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack:///./src/components/middle/composer/hooks/useDraft.ts","webpack:///./src/components/common/DeleteMessageModal.async.tsx","webpack:///./src/components/ui/ResponsiveHoverButton.tsx","webpack:///./src/components/middle/composer/AttachMenu.async.tsx","webpack:///./src/components/middle/composer/SymbolMenu.async.tsx","webpack:///./src/components/middle/composer/MentionTooltip.async.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.async.tsx","webpack:///./src/components/middle/composer/StickerTooltip.async.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.async.tsx","webpack:///./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack:///./src/components/middle/composer/AttachmentModal.async.tsx","webpack:///./src/components/middle/composer/PollModal.async.tsx","webpack:///./src/components/middle/composer/DropArea.async.tsx","webpack:///./src/components/middle/composer/WebPagePreview.tsx","webpack:///./src/components/common/CalendarModal.async.tsx","webpack:///./src/components/payment/PaymentModal.async.tsx","webpack:///./src/components/payment/ReceiptModal.async.tsx","webpack:///./src/components/middle/composer/Composer.tsx","webpack:///./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack:///./src/util/insertHtmlInSelection.ts","webpack:///./src/util/deleteLastCharacterOutsideSelection.ts","webpack:///./src/components/middle/composer/hooks/useEditing.ts","webpack:///./src/components/middle/MobileSearch.async.tsx","webpack:///./src/components/middle/MessageSelectToolbar.async.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.async.tsx","webpack:///./src/components/middle/MiddleColumn.tsx","webpack:///./src/hooks/useCustomBackground.ts","webpack:///./src/components/right/RightHeader.tsx","webpack:///./src/components/right/hooks/useProfileViewportIds.ts","webpack:///./src/components/right/hooks/useProfileState.ts","webpack:///./src/components/right/ProfilePhoto.tsx","webpack:///./src/components/right/ProfileInfo.tsx","webpack:///./src/components/right/hooks/usePhotosPreload.ts","webpack:///./src/components/right/ChatExtra.tsx","webpack:///./src/components/right/Profile.tsx","webpack:///./src/components/right/hooks/useTransitionFixes.ts","webpack:///./src/hooks/useCacheBuster.ts","webpack:///./src/components/right/RightSearch.async.tsx","webpack:///./src/components/right/management/Management.async.tsx","webpack:///./src/components/right/StickerSearch.async.tsx","webpack:///./src/components/right/GifSearch.async.tsx","webpack:///./src/components/right/PollResults.async.tsx","webpack:///./src/components/right/RightColumn.tsx","webpack:///./src/components/mediaViewer/MediaViewer.async.tsx","webpack:///./src/components/main/Notifications.async.tsx","webpack:///./src/components/main/Dialogs.async.tsx","webpack:///./src/components/main/ForwardPicker.async.tsx","webpack:///./src/components/main/SafeLinkModal.async.tsx","webpack:///./src/components/main/HistoryCalendar.async.tsx","webpack:///./src/components/main/Main.tsx","webpack:///./src/bundles/main.ts"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","targetIndexDelta","orderedIds","position","indexOf","nextId","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","includes","direction","Down","Up","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","message","IS_TOUCH_ENV","isPollModalOpen","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","content","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","replaceSettings","theme","settings","replaceThemeSettings","management","byChatId","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","serverTimeOffset","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","forEach","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","openChatByUsername","username","channelPostId","localChat","selectChatByUsername","isMin","previousChat","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","requestThreadInfoUpdate","selectSupportChat","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","InProgress","createdChannel","channelId","accessHash","Complete","Error","getDispatch","createChannel","userId","activeChat","activeChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","match","RE_TME_INVITE_LINK","exec","RE_TME_LINK","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","linkedChatId","activeChatFolder","offset","uploadProgressCallbacks","Map","runThrottledForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","Backwards","Around","round","MESSAGE_LIST_SLICE","Forwards","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","localId","progressCallback","attachment","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","scheduledAt","clearWebPagePreview","value","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","reason","peer","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","copyTextToClipboard","link","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","selectEmojiKeywords","isLoading","emojiKeywords","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","loadTopMessages","lastReadInboxMessageId","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","acc","newCurrentChatId","currentMessageListInfo","threadsById","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","Array","prototype","concat","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","buildInputPrivacyRules","visibility","allowedIds","deniedIds","usersById","chatsById","rules","collectUsers","collectChats","allowedUsers","allowedChats","blockedUsers","blockedChats","topPeers","lastRequestedAt","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","button","sendBotCommand","command","openTelegramLink","toggleSafeLinkModal","alert","isError","showDialog","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bio","profileEdit","ProfileEditProgress","currentUser","Idle","loadedWallpapers","wallpapers","file","previewBlobUrl","URL","createObjectURL","slug","UPLOADING_WALLPAPER_SLUG","document","fileName","size","mimeType","wallpaper","firstWallpaper","withLocalMedia","blocked","blockedIds","contactId","addBlockedContact","removeBlockedContact","activeSessions","session","isCurrent","peerType","shouldShowPreviews","updateNotifySettings","hasContactJoinedNotifications","languages","phoneNumberSettings","lastSeenSettings","profilePhotoSettings","forwardsSettings","chatInviteSettings","privacy","lastSeen","profilePhoto","forwards","chatInvite","privacyKey","allowUserIds","allowChatIds","blockUserIds","blockChatIds","isAllowList","contactsIds","isSensitiveEnabled","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","error","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","PaymentInfo","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","ShippingInfo","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","Checkout","sendStipeCredentials","shippingOptionId","saveCredentials","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","selectCountNotMutedUnread","updateAppBadge","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","updateScheduledMessage","updateListedAndViewportIds","firstUnreadId","selectFirstUnreadId","addViewportId","firstMessageId","selectThreadByMessage","isMessageLocal","updateChatLastMessage","currentLastMessage","findLastMessage","isDeleting","deleteMessages","newLastMessage","threadIdsToUpdate","unique","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectScheduledMessages","deleteChatScheduledMessages","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","newResults","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","key","addNotifyException","twoFaSettings","useBeforeUnload","callback","useEffect","onBeforeUnload","memo","name","label","checked","disabled","inactive","noAnimation","onChange","onCheck","handleChange","useCallback","currentTarget","className","buildClassName","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","animationLevel","byKey","globalSearchChatId","searchDate","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","ChatList","clearedDateSearchParam","clearedChatSearchParam","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","color","onClick","ariaLabel","handleSearchFocus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","MenuItem","icon","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","resolverFn","ms","dependencies","valueRef","useRef","runThrottled","useThrottle","forceUpdate","useForceUpdate","useOnChange","isSync","current","orderedFolderIds","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","setActiveChatFolder","transitionRef","displayedFolders","folderCountersById","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","captureEvents","onSwipe","SwipeDirection","Left","min","Right","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","metaKey","startsWith","digit","preventDefault","addEventListener","removeEventListener","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","folderType","noChatsText","TabList","tabs","activeTab","onSwitchTab","Transition","ref","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Extra","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","connectionState","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isOnline","setIsOnline","navigator","onLine","useBrowserOnline","isMouseInside","handleSelectSettings","Settings","handleSelectContacts","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","handleSelectArchived","Archived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","NewChat","ContentType","ArchivedChats","RENDER_COUNT","shouldSkipHistoryAnimations","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","Main","setContactsFilter","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","EditProfile","Folders","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","handleSearchQuery","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","setSize","windowSize","handleResize","calculateMiddleFooterTransforms","windowWidth","canPost","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","leftColumnWidth","rightColumnWidth","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","HeaderMenuContainer","isChatChannel","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canSelect","selectIsInSelectMode","canLeave","joinChannel","openLocalTextSearch","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleSearchClick","querySelector","focus","searchInput","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","count","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","sender","selectSender","noUi","senderName","getSenderTitle","mediaData","mediaLoader","playPause","isPlaying","useAudioPlayer","getMessageKey","getMediaDuration","handleClick","handleClose","audio","getMessageAudio","performer","renderAudio","subtitle","renderVoice","audioMessage","originChat","messagesCount","pinnedIds","state","isSelectModeActive","originChatId","isChatWithBot","selectIsChatWithBot","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","toggleLeftColumn","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","getChatTitle","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","currentChat","selectIsChatMuted","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","unreadCountInfo","formatIntegerCompact","componentEl","add","remove","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","preventMessageInputBlur","activeElement","target","useStickyDates","isScrolled","markIsScrolled","runDebounced","shouldRunFirst","shouldRunLast","updateStickyDates","container","hasTools","contains","fastRaf","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","scrollTop","el","offsetTop","offsetHeight","top","findStuckDate","MessageScroll","loadMoreForwards","loadMoreBackwards","isViewportNewest","onFabToggle","onNotchToggle","children","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","toggleScrollTools","scrollHeight","scrollBottom","isAtBottom","observe","observeIntersection","useIntersectionObserver","rootRef","margin","MESSAGE_LIST_SENSITIVE_AREA","entries","triggerEntry","isIntersecting","resetScroll","useOnIntersect","observeIntersectionForFab","freeze","freezeForFab","unfreeze","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","teactFastList","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","album","ratios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","createElement","font","whiteSpace","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserId","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isEmbedded","appearanceOrder","isLastInList","noAppearanceAnimation","markShown","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","data-message-id","onMouseDown","onContextMenu","EmbeddedMessage","customText","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","Sticker","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_BACKGROUND","getCustomAppendixBg","inSelectMode","isSelected","img","Image","onload","canvas","ctx","getContext","drawImage","getImageData","getAppendixColorFromImage","Photo","shouldAutoLoad","isInSelectMode","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","useHeavyAnimationCheck","isPlayAllowed","wasPlaying","isFrozen","freezePlaying","paused","unfreezePlaying","unfreezePlayingOnRaf","hasFocus","useBackgroundMode","Video","shouldAutoPlay","videoRef","getMessageWebPageVideo","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","usePauseOnInactive","useVideoCleanup","videoClassName","shouldRenderInlineVideo","shouldRenderPlayButton","shouldRenderDownloadButton","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","event","newValues","Checkbox","subLabel","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","floor","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","data-initial","SafeLink","getMessageInvoice","photoUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","shiftKey","newProps","PhotoWithSelect","VideoWithSelect","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","RoundVideo","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","requestAnimationFrame","capturePlaying","onRelease","ROUND_VIDEO_DIMENSIONS","onEnded","InlineButtons","recentReplierIds","recentRepliers","hasUnread","data-cnt","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","selectOutgoingStatus","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","clickInlineButton","bottomMarkerRef","appendixRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","voice","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","containerClassName","contentClassName","hasComments","classNames","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","handleGroupDocumentMessagesSelect","handleContainerDoubleClick","handleContentDoubleClick","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","MediaViewerOrigin","ScheduledInline","Inline","handleAudioPlay","handleAlbumMediaClick","albumMessageId","ScheduledAlbum","Album","IS_ANDROID","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","calculatedWidth","noMediaCorners","extraPadding","onDoubleClick","data-last-message-id","data-has-unread-mention","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","botDescription","chatBot","selectChatBot","isChatLoaded","isChannelChat","threadFirstMessageId","selectFirstMessageId","hasLinkedChat","markMessageListRead","setScrollOffset","openHistoryCalendar","scrollOffsetRef","selectScrollOffset","anchorIdRef","anchorTopRef","listItemElementsRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","hasFocusing","setHasFocusing","onTickEnd","throttleMs","observeIntersectionForReading","freezeForReading","unfreezeForReading","mentionIds","entry","dataset","messageGroups","listedMessages","orderBy","loadMoreAround","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","lastItemElement","lastItemHeight","newScrollTop","hasFirstMessageChanged","hasLastMessageChanged","isAlreadyFocusing","isResized","unreadDivider","isAnimatingScroll","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","withUsers","onScroll","currentAnchorIdRef","isSchedule","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","SCHEDULED_WHEN_ONLINE","formatHumanDate","renderMessages","focusNextReply","messageElements","lastMessageElement","buildAttachment","filename","blob","isQuick","quick","preloadImage","newBlob","toBlob","squeezeImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","subscribeToAnalyzer","stop","reject","onstop","Blob","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","MentionTooltip","CustomSend","StickerTooltipAsync","StickerTooltip","BotKeyboardMenu","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","AttachmentModal","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","parseMessageInput","linkEntity","ApiMessageEntityTypes","TextUrl","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","PaymentModal","MainButtonState","ReceiptModal","chatUser","selectChatUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","baseEmojiKeywords","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardMessageId","canSuggestMembers","isChatGroup","stickersForEmoji","groupChatMembers","isReceiptModalOpen","shouldSuggestStickers","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","addRecentEmoji","loadEmojiKeywords","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","IS_VOICE_RECORDING_SUPPORTED","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredMembers","useMentionTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","replace","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","prevChatId","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","EDITABLE_INPUT_MODAL_ID","items","media","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","inputEl","handleStickerSelect","handleGifSelect","gif","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","None","withQuick","QuickFile","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredChatMembers","canAttachEmbedLinks","faded","MessageInput","innerWidth","shouldSetFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","messageSendingRestrictionReason","getMessageSendingRestrictionReason","hasPinnedOrAudioMessage","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","setIsReady","ANIMATION_LEVEL_MIN","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","footerClassName","closeChat","isDiscussion","onTransitionEnd","propertyName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","runDebouncedForSearch","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isCreator","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","ManagementScreens","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","GroupMembers","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","useProfileViewportIds","loadMoreMembers","searchMessages","tabType","mediaSearchType","resultType","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","currentResultType","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","isOnTop","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","useInfiniteScrollForSharedMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","noProfileInfo","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","isFirstPhoto","isSavedMessages","isDeleted","isDeletedUser","getMediaHash","forceAvatar","getChatAvatarHash","imageHash","ApiMediaFormat","BlobUrl","avatarThumbnailData","useBlurSync","dataUri","imageSrc","prevImageSrc","decoding","userFullName","getUserFullName","getFirstLetters","fullClassName","forceShowSelf","loadFullUser","fullName","slideAnimation","currentPhotoIndex","setCurrentPhotoIndex","isFirst","isLast","profile","currentIndex","usePhotosPreload","handleProfilePhotoClick","ProfileAvatar","selectPreviousMedia","selectNextMedia","excludedClosestSelector","renderPhoto","isVerifiedIconShown","isVerified","renderPhotoTabs","aria-label","VerifiedIcon","isUserOnline","getUserStatus","canInviteUsers","isUserRightBanned","getHasAdminRight","chatUsername","handleNotificationChange","copy","entity","formattedNumber","getChatLink","printedUsername","getChatDescription","ListItem","multiline","narrow","isStatic","TABS","buildInfiniteScrollItemSelector","isGroup","hasMembersTab","areMembersHidden","canViewMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","useEffectWithPrevDeps","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","teactOrderKey","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","RightSearch","Management","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","UserInfo","isOverlaying","close","shouldScrollUp","GroupType","handleSelectChatMember","memberId","isPromoted","onChatMemberSelect","prevContentKey","MediaViewer","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","rightColumnAnimationTimeout","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","middleColumnTransitionClassNames","rightColumnTransitionClassNames","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","stopEvent","onDrop","onDragOver","initApi"],"mappings":"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","file":"4.aed814ef2b3916189656.js","sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread',\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId, selectIsViewportNewest, selectReplyingToId, selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = 500; // Matches `fastSmoothScroll:MAX_JS_DURATION`\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo ? threadInfo.lastMessageId : undefined;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo ? threadInfo.lastMessageId : undefined;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids && ids.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n","import { addReducer } from '../../../lib/teact/teactn';\nimport { ISettings, IThemeSettings, ThemeKey } from '../../../types';\nimport { replaceSettings, replaceThemeSettings } from '../../reducers';\n\naddReducer('setSettingOption', (global, actions, payload?: Partial<ISettings>) => {\n  return replaceSettings(global, payload);\n});\n\naddReducer('setThemeSettings', (global, actions, payload: { theme: ThemeKey } & Partial<IThemeSettings>) => {\n  const { theme, ...settings } = payload;\n\n  return replaceThemeSettings(global, theme, settings);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { ApiError } from '../../../api/types';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  const { id } = payload!;\n\n  return {\n    ...global,\n    isLeftColumnShown: id === undefined,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global) => {\n  const newNotifications = [...global.notifications];\n\n  newNotifications.pop();\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\nimport {\n  clearPayment, closeInvoice,\n} from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 100;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat && chat.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions) => {\n  actions.openChatByUsername({ username: TIPS_USERNAME });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat && chat.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  (async () => {\n    const { chatId, userId } : {chatId: number; userId: number} = payload!;\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, userId);\n    if (!chat || !user) {\n      return;\n    }\n    await callApi('deleteChatUser', { chat, user });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId && global.currentUserId === userId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  (async () => {\n    const { chatId } : {chatId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n    await callApi('deleteChat', { chatId: chat.id });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds && orderedIds.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  let match = RE_TME_INVITE_LINK.exec(url);\n\n  if (match) {\n    const hash = match[1];\n\n    (async () => {\n      const result = await callApi('openChatByInvite', hash);\n      if (!result) {\n        return;\n      }\n\n      actions.openChat({ id: result.chatId });\n    })();\n  } else {\n    match = RE_TME_LINK.exec(url)!;\n\n    const username = match[1];\n    const channelPostId = match[2] ? Number(match[2]) : undefined;\n\n    void openChatByUsername(actions, username, channelPostId);\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  void openChatByUsername(actions, username);\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo && channel.fullInfo.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo && chat.fullInfo.members && chat.fullInfo.members.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    if (channelPostId) {\n      actions.focusMessage({ chatId: localChat.id, messageId: channelPostId });\n    } else {\n      actions.openChat({ id: localChat.id });\n    }\n    return;\n  }\n\n  const previousChat = selectCurrentChat(global);\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    if (previousChat) {\n      actions.openChat({ id: previousChat.id });\n    }\n\n    actions.showNotification({ message: 'User does not exist' });\n\n    return;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n} from '../../selectors';\nimport { rafPromise, throttle } from '../../../util/schedulers';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_IOS } from '../../../util/environment';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runThrottledForMarkRead = throttle((cb) => cb(), 1000, true);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const { chatId, messageId, replyOriginForId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void loadMessage(chat, messageId, replyOriginForId);\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage && chat.lastMessage.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const { maxId } = payload!;\n\n  runThrottledForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n  serverTimeOffset?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadMessageLink', (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchMessageLink', { chat, message });\n\n    if (result) {\n      copyTextToClipboard(result.link);\n    }\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectEmojiKeywords, selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n  let currentEmojiKeywords = selectEmojiKeywords(global, language);\n\n  if (currentEmojiKeywords && currentEmojiKeywords.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = selectEmojiKeywords(global, language);\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords && currentEmojiKeywords.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string) {\n  const stickerSet = await callApi('fetchStickers', { stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const { nextOffsetId } = (resultsByType && resultsByType[type as ApiGlobalMessageSearchType]) || {};\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalUsers.map(({ id }) => id),\n      userIds: globalChats.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage, selectThreadInfo,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo && currentMessageListInfo.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin)\n            .map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin && currentMessageListInfoOrigin.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo && currentMessageListInfo.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results ? results.nextOffsetId : undefined;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo ? threadInfo.topMessageId : undefined;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults ? currentResults.nextOffsetId : undefined;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n} from '../../reducers';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const {\n    serverTimeOffset,\n    topPeers: {\n      hash, lastRequestedAt,\n    },\n  } = global;\n\n  if (!lastRequestedAt || Date.now() / 1000 + serverTimeOffset - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: Date.now() / 1000 + global.serverTimeOffset,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport {\n  ApiPrivacyKey, PrivacyVisibility, ProfileEditProgress, IInputPrivacyRules, IInputPrivacyContact,\n  UPLOADING_WALLPAPER_SLUG,\n} from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { selectUser } from '../../selectors';\nimport {\n  addUsers, addBlockedContact, updateChats, updateUser, removeBlockedContact, replaceSettings, updateNotifySettings,\n} from '../../reducers';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('updateProfile', (global, actions, payload) => {\n  const {\n    photo, firstName, lastName, bio: about, username,\n  } = payload!;\n\n  (async () => {\n    const { currentUserId } = global;\n    if (!currentUserId) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.InProgress,\n      },\n    });\n\n    if (photo) {\n      await callApi('updateProfilePhoto', photo);\n    }\n\n    if (firstName || lastName || about) {\n      const result = await callApi('updateProfile', { firstName, lastName, about });\n      if (result) {\n        global = getGlobal();\n        const currentUser = currentUserId && selectUser(global, currentUserId);\n\n        if (currentUser) {\n          setGlobal(updateUser(\n            global,\n            currentUser.id,\n            {\n              firstName,\n              lastName,\n              fullInfo: {\n                ...currentUser.fullInfo,\n                bio: about,\n              },\n            },\n          ));\n        }\n      }\n    }\n\n    if (username) {\n      const result = await callApi('updateUsername', username);\n      if (result && currentUserId) {\n        setGlobal(updateUser(getGlobal(), currentUserId, { username }));\n      }\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.Complete,\n      },\n    });\n  })();\n});\n\naddReducer('checkUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  (async () => {\n    // No need to check the username if profile update is already in progress\n    if (global.profileEdit && global.profileEdit.progress === ProfileEditProgress.InProgress) {\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      profileEdit: {\n        progress: global.profileEdit ? global.profileEdit.progress : ProfileEditProgress.Idle,\n        isUsernameAvailable: undefined,\n      },\n    });\n\n    const isUsernameAvailable = await callApi('checkUsername', username);\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      profileEdit: {\n        ...global.profileEdit!,\n        isUsernameAvailable,\n      },\n    });\n  })();\n});\n\naddReducer('loadWallpapers', () => {\n  (async () => {\n    const result = await callApi('fetchWallpapers', 0);\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: result.wallpapers,\n      },\n    });\n  })();\n});\n\naddReducer('uploadWallpaper', (global, actions, payload) => {\n  const file = payload;\n  const previewBlobUrl = URL.createObjectURL(file);\n\n  setGlobal({\n    ...global,\n    settings: {\n      ...global.settings,\n      loadedWallpapers: [\n        {\n          slug: UPLOADING_WALLPAPER_SLUG,\n          document: {\n            fileName: '',\n            size: file.size,\n            mimeType: file.type,\n            previewBlobUrl,\n          },\n        },\n        ...(global.settings.loadedWallpapers || []),\n      ],\n    },\n  });\n\n  (async () => {\n    const result = await callApi('uploadWallpaper', file);\n    if (!result) {\n      return;\n    }\n\n    const { wallpaper } = result;\n\n    global = getGlobal();\n    if (!global.settings.loadedWallpapers) {\n      return;\n    }\n\n    const firstWallpaper = global.settings.loadedWallpapers[0];\n    if (!firstWallpaper || firstWallpaper.slug !== UPLOADING_WALLPAPER_SLUG) {\n      return;\n    }\n\n    const withLocalMedia = {\n      ...wallpaper,\n      document: {\n        ...wallpaper.document,\n        previewBlobUrl,\n      },\n    };\n\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: [\n          withLocalMedia,\n          ...global.settings.loadedWallpapers.slice(1),\n        ],\n      },\n    });\n  })();\n});\n\naddReducer('loadBlockedContacts', () => {\n  (async () => {\n    const result = await callApi('fetchBlockedContacts');\n\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n\n    if (result.users && result.users.length) {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    }\n    if (result.chats && result.chats.length) {\n      newGlobal = updateChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n    }\n\n    newGlobal = {\n      ...newGlobal,\n      blocked: {\n        ...newGlobal.blocked,\n        ids: [...(newGlobal.blocked.ids || []), ...result.blockedIds],\n        totalCount: result.totalCount,\n      },\n    };\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('blockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n\n  (async () => {\n    const result = await callApi('blockContact', contactId);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(addBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('unblockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n  let accessHash: string | undefined;\n  const isPrivate = isChatPrivate(contactId);\n\n  if (isPrivate) {\n    const user = selectUser(global, contactId);\n    if (!user) {\n      return;\n    }\n\n    accessHash = user.accessHash;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', contactId, accessHash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(removeBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('loadAuthorizations', () => {\n  (async () => {\n    const result = await callApi('fetchAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      activeSessions: result,\n    });\n  })();\n});\n\naddReducer('terminateAuthorization', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('terminateAuthorization', hash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      activeSessions: newGlobal.activeSessions.filter((session) => session.hash !== hash),\n    });\n  })();\n});\n\naddReducer('terminateAllAuthorizations', () => {\n  (async () => {\n    const result = await callApi('terminateAllAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      activeSessions: global.activeSessions.filter((session) => session.isCurrent),\n    });\n  })();\n});\n\naddReducer('loadNotificationExceptions', () => {\n  callApi('fetchNotificationExceptions');\n});\n\naddReducer('loadNotificationSettings', (global) => {\n  const { serverTimeOffset } = global;\n  (async () => {\n    const result = await callApi('fetchNotificationSettings', {\n      serverTimeOffset,\n    });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateNotificationSettings', (global, actions, payload) => {\n  const { peerType, isSilent, shouldShowPreviews } = payload!;\n\n  (async () => {\n    const result = await callApi('updateNotificationSettings', peerType, { isSilent, shouldShowPreviews });\n\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateNotifySettings(getGlobal(), peerType, isSilent, shouldShowPreviews));\n  })();\n});\n\naddReducer('updateContactSignUpNotification', (global, actions, payload) => {\n  const { isSilent } = payload!;\n\n  (async () => {\n    const result = await callApi('updateContactSignUpNotification', isSilent);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { hasContactJoinedNotifications: !isSilent }));\n  })();\n});\n\naddReducer('loadLanguages', () => {\n  (async () => {\n    const result = await callApi('fetchLanguages');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { languages: result }));\n  })();\n});\n\naddReducer('loadPrivacySettings', () => {\n  (async () => {\n    const [\n      phoneNumberSettings, lastSeenSettings, profilePhotoSettings, forwardsSettings, chatInviteSettings,\n    ] = await Promise.all([\n      callApi('fetchPrivacySettings', 'phoneNumber'),\n      callApi('fetchPrivacySettings', 'lastSeen'),\n      callApi('fetchPrivacySettings', 'profilePhoto'),\n      callApi('fetchPrivacySettings', 'forwards'),\n      callApi('fetchPrivacySettings', 'chatInvite'),\n    ]);\n\n    if (\n      !phoneNumberSettings || !lastSeenSettings || !profilePhotoSettings || !forwardsSettings || !chatInviteSettings\n    ) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    global.settings.privacy.phoneNumber = phoneNumberSettings;\n    global.settings.privacy.lastSeen = lastSeenSettings;\n    global.settings.privacy.profilePhoto = profilePhotoSettings;\n    global.settings.privacy.forwards = forwardsSettings;\n    global.settings.privacy.chatInvite = chatInviteSettings;\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('setPrivacyVisibility', (global, actions, payload) => {\n  const { privacyKey, visibility } = payload!;\n\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility,\n    allowedIds: [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\naddReducer('setPrivacySettings', (global, actions, payload) => {\n  const { privacyKey, isAllowList, contactsIds } = payload!;\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility: settings.visibility,\n    allowedIds: isAllowList ? contactsIds : [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: !isAllowList ? contactsIds : [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\nfunction buildInputPrivacyRules(global: GlobalState, {\n  visibility,\n  allowedIds,\n  deniedIds,\n}: {\n  visibility: PrivacyVisibility;\n  allowedIds: number[];\n  deniedIds: number[];\n}): IInputPrivacyRules {\n  const {\n    users: { byId: usersById },\n    chats: { byId: chatsById },\n  } = global;\n\n  const rules: IInputPrivacyRules = {\n    visibility,\n  };\n  let users: IInputPrivacyContact[];\n  let chats: IInputPrivacyContact[];\n\n  const collectUsers = (userId: number) => {\n    if (!isChatPrivate(userId)) {\n      return undefined;\n    }\n    const { id, accessHash } = usersById[userId] || {};\n    if (!id) {\n      return undefined;\n    }\n\n    return { id, accessHash };\n  };\n\n  const collectChats = (userId: number) => {\n    if (isChatPrivate(userId)) {\n      return undefined;\n    }\n    const chat = chatsById[userId];\n\n    return chat ? { id: chat.id } : undefined;\n  };\n\n  if (visibility === 'contacts' || visibility === 'nobody') {\n    users = allowedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = allowedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.allowedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.allowedChats = chats;\n    }\n  }\n\n  if (visibility === 'everybody' || visibility === 'contacts') {\n    users = deniedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = deniedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.blockedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.blockedChats = chats;\n    }\n  }\n\n  return rules;\n}\n\naddReducer('updateIsOnline', (global, actions, payload) => {\n  callApi('updateIsOnline', payload);\n});\n\naddReducer('loadContentSettings', () => {\n  (async () => {\n    const result = await callApi('fetchContentSettings');\n    if (!result) return;\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateContentSettings', (global, actions, payload) => {\n  (async () => {\n    setGlobal(replaceSettings(getGlobal(), { isSensitiveEnabled: payload }));\n\n    const result = await callApi('updateContentSettings', payload);\n    if (!result) {\n      setGlobal(replaceSettings(getGlobal(), { isSensitiveEnabled: !payload }));\n    }\n  })();\n});\n","import { addReducer, getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { RE_TME_INVITE_LINK, RE_TME_LINK } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChatMessage, selectCurrentChat } from '../../selectors';\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  if (!currentUserId || !chat) {\n    return;\n  }\n\n  void sendBotCommand(chat, currentUserId, command);\n});\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result || !result.message) {\n    return;\n  }\n\n  const { message, alert: isError } = result;\n\n  if (isError) {\n    getDispatch().showDialog({ data: { message } });\n  } else {\n    getDispatch().showNotification({ message });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types/index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n} from '../../selectors';\n\nimport { getStripeError } from '../../helpers/payments';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const messageId = selectPaymentMessageId(global);\n  if (!messageId) {\n    return;\n  }\n  validateRequestedInfo(messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', { messageId, requestInfo, shouldSave });\n  if (!result) {\n    return;\n  }\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { messageId } = payload;\n  if (!messageId) {\n    return;\n  }\n  getPaymentForm(messageId);\n});\n\n\nasync function getPaymentForm(messageId: number) {\n  const result = await callApi('getPaymentForm', { messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  if (!messageId || !receiptMessageId || !chatId) {\n    return;\n  }\n  getReceipt(messageId, receiptMessageId, chatId);\n});\n\nasync function getReceipt(messageId: number, receiptMessageId: number, chatId: number) {\n  const result = await callApi('getReceipt', receiptMessageId);\n  if (!result) {\n    return;\n  }\n  let global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  sendStipeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const messageId = selectPaymentMessageId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!messageId || !publishableKey) {\n    return;\n  }\n  sendPaymentForm(messageId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStipeCredentials(data: {\n  cardNumber: string;\n  cardholder?: string;\n  expiryMonth: string;\n  expiryYear: string;\n  cvv: string;\n  country: string;\n  zip: string;\n},\npublishableKey: string) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  messageId: number,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    messageId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1000;\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), CURRENT_CHAT_UNREAD_DELAY, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      const unreadCount = selectCountNotMutedUnread(newGlobal);\n      runThrottledForUpdateAppBadge(() => updateAppBadge(unreadCount));\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      const unreadCount = selectCountNotMutedUnread(getGlobal());\n      updateAppBadge(unreadCount);\n      showNewMessageNotification({ chat, message, isActiveChat });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat && chat.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo && targetChat.fullInfo.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat && chat.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content && message.content.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message && message.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat && chat.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first uread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!firstMessageId && isMessageLocal(message)) {\n    return global;\n  }\n\n  if (threadInfo) {\n    global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n    if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n      global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n      if (!firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n      }\n\n      if (!threadInfo.lastMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n          ...threadInfo,\n          lastMessageId: message.id,\n        });\n      }\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId] && chats.byId[chatId].lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    unique(threadIdsToUpdate).forEach((threadId) => {\n      actions.requestThreadInfoUpdate({ chatId, threadId });\n    });\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        id, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[id];\n\n      if (chat) {\n        global = updateChat(global, id, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, id, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { ChangeEvent } from 'react';\nimport React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Switcher.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  value?: string;\n  label: string;\n  checked?: boolean;\n  disabled?: boolean;\n  inactive?: boolean;\n  noAnimation?: boolean;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCheck?: (isChecked: boolean) => void;\n};\n\nconst Switcher: FC<OwnProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked = false,\n  disabled,\n  inactive,\n  noAnimation,\n  onChange,\n  onCheck,\n}) => {\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onCheck) {\n      onCheck(e.currentTarget.checked);\n    }\n  }, [onChange, onCheck]);\n\n  const className = buildClassName(\n    'Switcher',\n    disabled && 'disabled',\n    inactive && 'inactive',\n    noAnimation && 'no-animation',\n  );\n\n  return (\n    <label className={className} title={label}>\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={handleChange}\n      />\n      <span className=\"widget\" />\n    </label>\n  );\n};\n\nexport default memo(Switcher);\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={openTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import { useRef } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useForceUpdate from './useForceUpdate';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const valueRef = useRef<R>();\n  const runThrottled = useThrottle(ms);\n  const forceUpdate = useForceUpdate();\n\n  useOnChange(() => {\n    let isSync = true;\n    runThrottled(() => {\n      valueRef.current = resolverFn();\n\n      if (!isSync) {\n        forceUpdate();\n      }\n    });\n    isSync = false;\n  }, dependencies);\n\n  return valueRef.current;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms);\n  }, [ms]);\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById && folderCountersById[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n        }\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.metaKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return <ChatList folderType=\"all\" isActive={isActive} />;\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        noChatsText={lang('FilterNoChatsToDisplay')}\n        isActive={isActive}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs && folderTabs.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  onSearchQuery,\n  onContentChange,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n    >\n      {(isActive) => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                isActive={isActive}\n                onReset={handleReset}\n                onContentChange={setContent}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                isActive={isActive}\n                currentScreen={settingsScreen}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectIsChatBotNotStarted, selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_SINGLE_COLUMN_LAYOUT || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canSelect={canSelect}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat && chat.isRestricted) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canStartBot = Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canSelect = !selectIsInSelectMode(global);\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_SINGLE_COLUMN_LAYOUT && canSubscribe)\n      || (IS_SINGLE_COLUMN_LAYOUT && canSearch)\n      || canMute\n      || canSelect\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canSelect,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const { sticker } = (message && message.content) || {};\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message && message.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef && containerRef.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageAudio, getMessageKey, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, className, noUi, sender, focusMessage, closeAudioPlayer,\n}) => {\n  const lang = useLang();\n\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const { playPause, isPlaying } = useAudioPlayer(\n    getMessageKey(message), getMediaDuration(message)!, mediaData, undefined, undefined, true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n  }, [closeAudioPlayer, isPlaying, playPause]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  const audio = getMessageAudio(message);\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    return { sender };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUser,\n} from '../../api/types';\nimport { NotifyException, NotifySettings } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatPrivate,\n  isChatArchived,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n  selectIsChatMuted,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadOriginChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectNotifySettings,\n  selectNotifyExceptions,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  originChatId: number;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'loadPinnedMessages' | 'toggleLeftColumn' |\n  'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  originChatId,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  notifySettings,\n  notifyExceptions,\n  shouldSkipHistoryAnimations,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread') {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    if (messageListType === 'scheduled' && isSelectModeActive) {\n      exitMessageSelectMode();\n    }\n\n    openChat({ id: originChatId, threadId: MAIN_THREAD_ID });\n  }, [\n    openChat, originChatId, threadId, messageListType, toggleLeftColumn, isSelectModeActive, exitMessageSelectMode,\n    shouldShowCloseButton,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    let isActive = false;\n\n    const totalCount = Object.values(chatsById).reduce((total, currentChat) => {\n      if (isChatArchived(currentChat)) {\n        return total;\n      }\n\n      const count = currentChat.unreadCount || 0;\n      if (\n        count && (!selectIsChatMuted(currentChat, notifySettings, notifyExceptions) || currentChat.unreadMentionsCount)\n      ) {\n        isActive = true;\n      }\n\n      return total + count;\n    }, 0);\n\n    if (!totalCount) {\n      return undefined;\n    }\n\n    return {\n      isActive,\n      totalCount,\n    };\n  }, [isLeftColumnHideable, chatsById, notifySettings, notifyExceptions]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount)}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {isLeftColumnHideable && renderBackButton(shouldShowCloseButton, unreadCount)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, unreadCountInfo?: typeof unreadCount) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {unreadCountInfo && (\n          <div className={`unread-count ${unreadCountInfo.isActive ? 'active' : ''}`}>\n            {formatIntegerCompact(unreadCountInfo.totalCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={messageListType === 'thread' ? threadId : 1}\n      >\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const originChat = selectThreadOriginChat(global, chatId, threadId);\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds && pinnedIds.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds && scheduledIds.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      originChatId: originChat ? originChat.id : chatId,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      shouldSkipHistoryAnimations,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds && pinnedMessageIds.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import React from '../../../lib/teact/teact';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nexport function preventMessageInputBlur(e: React.MouseEvent<HTMLElement>) {\n  if (\n    IS_SINGLE_COLUMN_LAYOUT\n    || !document.activeElement\n    || document.activeElement.id !== EDITABLE_INPUT_ID\n    || e.target !== e.currentTarget\n  ) {\n    return;\n  }\n\n  e.preventDefault();\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import { MutableRefObject } from 'react';\nimport React, { FC, useCallback, useRef } from '../../lib/teact/teact';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../config';\nimport resetScroll from '../../util/resetScroll';\nimport { useIntersectionObserver, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\n\ntype OwnProps = {\n  containerRef: MutableRefObject<HTMLDivElement | null>;\n  className: string;\n  messageIds: number[];\n  loadMoreForwards?: NoneToVoidFunction;\n  loadMoreBackwards?: NoneToVoidFunction;\n  isViewportNewest?: boolean;\n  firstUnreadId?: number;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  children: any;\n};\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nconst MessageScroll: FC<OwnProps> = ({\n  containerRef,\n  className,\n  messageIds,\n  loadMoreForwards,\n  loadMoreBackwards,\n  isViewportNewest,\n  firstUnreadId,\n  onFabToggle,\n  onNotchToggle,\n  children,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useCallback(() => {\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = scrollHeight - scrollTop - offsetHeight;\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(firstUnreadId ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }, [messageIds, isViewportNewest, containerRef, onFabToggle, firstUnreadId, onNotchToggle]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return (\n    <div className={className} teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {children}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default MessageScroll;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMediaWithNoText = (photo || video) && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video && video.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\nimport { FocusDirection } from '../../../../types';\n\n// This is the max scroll offset within existing viewport.\nconst FOCUS_MAX_OFFSET = 1200;\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection === undefined ? FOCUS_MAX_OFFSET : RELOCATED_FOCUS_OFFSET,\n        focusDirection,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  targetUser?: ApiUser;\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  sender,\n  targetUser,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUser,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const userId = message.senderId;\n    const { targetUserId, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      sender,\n      ...(targetUserId && { targetUser: selectUser(global, targetUserId) }),\n      targetChatId,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: () => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = Promise.resolve('rgba(255,255,255,1)');\n\nexport default function getCustomAppendixBg(src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && !isBuffered,\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = video.duration || (videoRef.current && videoRef.current.duration) || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n\n  usePauseOnInactive(videoRef, isPlayAllowed);\n\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  const shouldRenderInlineVideo = isInline;\n  const shouldRenderPlayButton = (isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n  const shouldRenderDownloadButton = !isDownloadAllowed;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {(!isInline || shouldRenderThumb || shouldRenderInlineVideo)\n        && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${width}px; height: ${height}px;`}\n          />\n        )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n\n      {shouldRenderInlineVideo && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {shouldRenderPlayButton && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    return {\n      user: selectUser(global, contact.userId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result && result.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  inPreview,\n  lastSyncTime,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage && webPage.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    description,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        {description && (\n          <p className=\"description-text\">{renderText(description, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e && e.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload ? fileUpload.progress : undefined;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom)\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    requestAnimationFrame(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      playerEl.currentTime = 0;\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {(shouldRenderThumb || mediaData) && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(button.text)}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled, threadInfo, usersById, chatsById, openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport {\n  FocusDirection, IAlbum, ISettings, MediaViewerOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForBottom: ObserveFn;\n  observeIntersectionForMedia: ObserveFn;\n  observeIntersectionForAnimatedStickers: ObserveFn;\n  album?: IAlbum;\n  noAvatars?: boolean;\n  withAvatar?: boolean;\n  withSenderName?: boolean;\n  threadId: number;\n  messageListType: MessageListType;\n  noComments: boolean;\n  appearanceOrder: number;\n} & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' | 'openMediaViewer' | 'openAudioPlayer' |\n  'openUserInfo' | 'openChat' |\n  'cancelSendingMessage' | 'markMessagesRead' |\n  'sendPollVote' | 'toggleMessageSelection' | 'setReplyingToId' | 'openForwardMenu' |\n  'clickInlineButton' | 'disableContextMenuHint'\n)>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 150;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  focusMessage,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  openChat,\n  cancelSendingMessage,\n  markMessagesRead,\n  sendPollVote,\n  toggleMessageSelection,\n  setReplyingToId,\n  openForwardMenu,\n  clickInlineButton,\n  disableContextMenuHint,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, false, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { chatId, id: messageId, threadInfo } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = !!message.groupedId && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = canShowActionButton && isChannel && !isScheduled;\n  const canFocus = Boolean(canShowActionButton && (\n    (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId)\n    || isPinnedList\n  ));\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n  });\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  const handleGroupDocumentMessagesSelect = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    toggleMessageSelection({\n      messageId,\n      groupedId: message.groupedId,\n    });\n  }, [messageId, message.groupedId, toggleMessageSelection]);\n\n  const handleMessageSelect = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (isLocal) {\n      return;\n    }\n\n    const params = isAlbum && album && album.messages\n      ? {\n        messageId,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: e && e.shiftKey,\n      }\n      : { messageId, withShift: e && e.shiftKey };\n    toggleMessageSelection(params);\n  }, [isLocal, isAlbum, album, messageId, toggleMessageSelection]);\n\n  const handleContainerDoubleClick = useCallback(() => {\n    setReplyingToId({ messageId });\n  }, [setReplyingToId, messageId]);\n\n  const handleContentDoubleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n  }, []);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n\n    if (!isLocal) {\n      handleBeforeContextMenu(e);\n    }\n  };\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId, threadId, messageId: message.replyToMessageId, replyMessageId: messageId,\n    });\n  }, [focusMessage, chatId, threadId, message.replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    const target = e.target as HTMLDivElement;\n    if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n      return;\n    }\n\n    if (IS_ANDROID) {\n      setTimeout(() => {\n        handleContextMenu(e);\n      }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n    } else {\n      handleContextMenu(e);\n    }\n  }, [handleContextMenu]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId: message.groupedId });\n  }, [openForwardMenu, chatId, message.groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId: message.groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [focusMessage, forwardInfo, message, chatId, isInDocumentGroup]);\n\n  const lang = useLang();\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = avatarPeer && isAvatarPeerUser ? avatarPeer as ApiUser : undefined;\n    const avatarChat = avatarPeer && !isAvatarPeerUser ? avatarPeer as ApiChat : undefined;\n    const hiddenName = !avatarPeer && forwardInfo ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            isInline\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={`text-content ${shouldInlineMeta ? 'with-meta' : ''}`} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMessageSelect}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !customShape && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo && forwardInfo.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName(senderPeer && 'interactive', senderColor)}\n            onClick={senderPeer ? handleSenderClick : undefined}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo && forwardInfo.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onClick={isInSelectMode ? handleMessageSelect : IS_ANDROID ? handleClick : undefined}\n      onDoubleClick={!isInSelectMode ? handleContainerDoubleClick : undefined}\n      onMouseDown={!isInSelectMode ? handleMouseDown : undefined}\n      onContextMenu={!isInSelectMode && !isLocal ? handleContextMenu : undefined}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isLocal && !isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {!isLocal && isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleGroupDocumentMessagesSelect}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className=\"message-content-wrapper\"\n        onClick={isInSelectMode && isInDocumentGroup ? handleMessageSelect : undefined}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMessageSelect}\n            />\n          )}\n          {canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album && album.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'cancelSendingMessage',\n    'openUserInfo',\n    'openChat',\n    'markMessagesRead',\n    'sendPollVote',\n    'toggleMessageSelection',\n    'setReplyingToId',\n    'openForwardMenu',\n    'clickInlineButton',\n    'disableContextMenuHint',\n  ]),\n)(Message));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_LIST_SLICE, SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  getMessageOriginalId,\n  isActionMessage,\n  isChatChannel,\n  isChatPrivate,\n  isOwnMessage,\n} from '../../modules/helpers';\nimport {\n  compact,\n  flatten,\n  orderBy,\n  pick,\n} from '../../util/iteratees';\nimport {\n  fastRaf, debounce, onTickEnd,\n} from '../../util/schedulers';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages, MessageDateGroup, isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { ObserveFn, useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\nimport Loading from '../ui/Loading';\nimport MessageScroll from './MessageScroll';\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isChatWithSelf?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadViewportMessages' | 'markMessageListRead' | 'markMessagesRead' | 'setScrollOffset' | 'openHistoryCalendar'\n)>;\n\nconst BOTTOM_THRESHOLD = 100;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst FOCUSING_FADE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  animationLevel,\n  loadViewportMessages,\n  markMessageListRead,\n  markMessagesRead,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  // Updated every time (to be used from intersection callback closure)\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n  const [hasFocusing, setHasFocusing] = useState<boolean>(Boolean(focusingId));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n\n    // Updated only once (to preserve divider even after messages are read)\n    if (!memoUnreadDividerBeforeIdRef.current) {\n      memoUnreadDividerBeforeIdRef.current = firstUnreadId;\n    }\n  }, [firstUnreadId]);\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  useEffect(() => {\n    if (focusingId) {\n      setHasFocusing(true);\n    } else {\n      setTimeout(() => {\n        setHasFocusing(false);\n      }, FOCUSING_FADE_ANIMATION_DURATION);\n    }\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const [loadMoreBackwards, loadMoreForwards, loadMoreAround] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    // If two messages come at once (e.g. via Quiz Bot) then the first message will update `scrollOffset`\n    // right away (before animation) which creates inconsistency until the animation completes.\n    // To workaround that, we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n    const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && (\n      scrollOffset - (prevContainerHeight || offsetHeight) - lastItemHeight <= BOTTOM_THRESHOLD\n    );\n\n    let newScrollTop!: number;\n\n    const hasFirstMessageChanged = messageIds && prevMessageIds && messageIds[0] !== prevMessageIds[0];\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    if (isAtBottom && hasLastMessageChanged && !hasFirstMessageChanged && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            undefined,\n            true,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffect(() => {\n    if (!animationLevel || animationLevel > 0) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    hasFocusing && 'has-focusing',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty rich\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : messageIds && !messageGroups ? (\n        <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageScroll\n          containerRef={containerRef}\n          className=\"messages-container\"\n          messageIds={messageIds || [lastMessage!.id]}\n          loadMoreForwards={loadMoreForwards}\n          loadMoreBackwards={loadMoreBackwards}\n          isViewportNewest={isViewportNewest}\n          firstUnreadId={firstUnreadId}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        >\n          {renderMessages(\n            lang,\n            messageGroups || groupMessages([lastMessage!]),\n            observeIntersectionForReading,\n            observeIntersectionForMedia,\n            observeIntersectionForAnimatedStickers,\n            withUsers,\n            noAvatars,\n            anchorIdRef,\n            memoUnreadDividerBeforeIdRef,\n            threadId,\n            type,\n            threadTopMessageId,\n            threadFirstMessageId,\n            hasLinkedChat,\n            messageGroups ? type === 'scheduled' : false,\n            !messageGroups || !shouldAnimateAppearanceRef.current,\n            openHistoryCalendar,\n          )}\n        </MessageScroll>\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nfunction renderMessages(\n  lang: LangFn,\n  messageGroups: MessageDateGroup[],\n  observeIntersectionForReading: ObserveFn,\n  observeIntersectionForMedia: ObserveFn,\n  observeIntersectionForAnimatedStickers: ObserveFn,\n  withUsers: boolean,\n  noAvatars: boolean,\n  currentAnchorIdRef: { current: string | undefined },\n  memoFirstUnreadIdRef: { current: number | undefined },\n  threadId: number,\n  type: MessageListType,\n  threadTopMessageId: number | undefined,\n  threadFirstMessageId: number | undefined,\n  hasLinkedChat: boolean | undefined,\n  isSchedule: boolean,\n  noAppearanceAnimation: boolean,\n  openHistoryCalendar: Function,\n) {\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && currentAnchorIdRef.current === `message${message.previousLocalId}`) {\n          currentAnchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current ? unreadDivider : undefined,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return flatten(dateGroups);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBot = selectChatBot(global, chatId)!;\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'markMessageListRead',\n    'markMessagesRead',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusNextReply'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  focusNextReply,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusNextReply']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface OpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): OpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: OpusRecorder }>;\nlet OpusRecorder: OpusRecorder;\nlet mediaRecorder: OpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: OpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input ? input.id : undefined);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotKeyboardMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotKeyboardMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotKeyboardMenu = useModuleLoader(Bundles.Extra, 'BotKeyboardMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotKeyboardMenu ? <BotKeyboardMenu {...props} /> : undefined;\n};\n\nexport default memo(BotKeyboardMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { LangCode } from '../../../types';\n\nimport { EDITABLE_INPUT_ID, SCHEDULED_WHEN_ONLINE } from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsChatWithBot,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatUser,\n  selectEmojiKeywords,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatGroup,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu.async';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  onDropHide: NoneToVoidFunction;\n  isReady: boolean;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  canSuggestMembers?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  language: LangCode;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt' | 'addRecentEmoji' | 'loadEmojiKeywords'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  onDropHide,\n  isReady,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  canSuggestMembers,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  language,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n  addRecentEmoji,\n  loadEmojiKeywords,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const lang = useLang();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory();\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    loadEmojiKeywords({ language: 'en' });\n    if (language !== 'en') {\n      loadEmojiKeywords({ language });\n    }\n  }, [loadEmojiKeywords, language]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredMembers,\n  } = useMentionTooltip(\n    canSuggestMembers && !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      // If selection is outside of input, set cursor at the end of input\n      requestAnimationFrame(() => {\n        focusEditableElement(messageInput);\n      });\n    }\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback(() => {\n    setHtml('');\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change\n  const prevChatId = usePrevious(chatId);\n  useEffect(() => {\n    if (!prevChatId || chatId === prevChatId) {\n      return;\n    }\n\n    stopRecordingVoice();\n    resetComposer();\n  }, [chatId, prevChatId, resetComposer, stopRecordingVoice]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    if (currentAttachments.length && text && text.length > CAPTION_MAX_LENGTH) {\n      const extraLength = text.length - CAPTION_MAX_LENGTH;\n      showDialog({\n        data: {\n          message: 'CAPTION_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = Math.floor(Date.now() / 1000) + serverTimeOffset;\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = Math.floor(Date.now() / 1000) + serverTimeOffset;\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(resetComposer);\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, serverTimeOffset, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(resetComposer);\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          handleSend();\n          requestAnimationFrame(resetComposer);\n        }\n        break;\n      case MainButtonState.Record:\n        startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, resetComposer, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        canSuggestMembers={canSuggestMembers}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        onCaptionUpdate={setHtml}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filter={mentionFilter}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredChatMembers={mentionFilteredMembers}\n        usersById={usersById}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {!isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={`${isSymbolMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && window.innerWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER ? '' : lang('Message')\n            }\n            shouldSetFocus={isSymbolMenuOpen}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isBotKeyboardOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isAttachMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={`${mainButtonState} ${activeVoiceRecording ? 'recording' : ''}`}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? 'Send When Online' : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const baseEmojiKeywords = selectEmojiKeywords(global, 'en');\n    const emojiKeywords = language !== 'en' ? selectEmojiKeywords(global, language) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds && scheduledIds.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId: messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      canSuggestMembers: chat && isChatGroup(chat),\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat && chat.fullInfo && chat.fullInfo.members,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      language,\n      baseEmojiKeywords: baseEmojiKeywords ? baseEmojiKeywords.keywords : undefined,\n      emojiKeywords: emojiKeywords ? emojiKeywords.keywords : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'loadEmojiKeywords',\n  ]),\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection && selection.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n  selectThreadOriginChat,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  messageSendingRestrictionReason?: string;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  originChatId?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'unpinAllMessages' | 'loadUser' | 'closeLocalTextSearch' | 'exitMessageSelectMode'\n)>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.includes(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  isScheduledMessageList,\n  canPost,\n  messageSendingRestrictionReason,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  originChatId,\n  shouldSkipHistoryAnimations,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n  closeLocalTextSearch,\n  exitMessageSelectMode,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT || animationLevel === ANIMATION_LEVEL_MIN);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  const handleTransitionEnd = (e: React.TransitionEvent<HTMLDivElement>) => {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  };\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items).every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const lang = useLang();\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    if (renderingThreadId !== MAIN_THREAD_ID) {\n      openChat({ id: originChatId, threadId: MAIN_THREAD_ID }, true);\n    } else if (isPinnedMessageList || isScheduledMessageList) {\n      openChat({ id: chatId, type: 'thread' });\n    } else {\n      openChat({ id: undefined }, true);\n    }\n  };\n\n  useHistoryBack(renderingChatId && renderingThreadId, closeChat, openChat, {\n    id: chatId,\n    threadId: MAIN_THREAD_ID,\n  });\n\n  const isDiscussion = renderingChatId && renderingThreadId !== MAIN_THREAD_ID;\n\n  useHistoryBack(isDiscussion || isPinnedMessageList || isScheduledMessageList, closeChat, openChat, {\n    id: chatId,\n    threadId: renderingThreadId,\n  });\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleTransitionEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={renderingMessageListType === 'thread' && renderingThreadId === MAIN_THREAD_ID ? 1 : 2}\n              shouldCleanup\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const originChat = selectThreadOriginChat(global, chatId, threadId);\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      originChatId: originChat ? originChat.id : chatId,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && (!isBotNotStarted || IS_SINGLE_COLUMN_LAYOUT),\n      isPinnedMessageList,\n      isScheduledMessageList,\n      messageSendingRestrictionReason: chat && getMessageSendingRestrictionReason(chat),\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds && pinnedIds.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser', 'closeLocalTextSearch', 'exitMessageSelectMode',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n  shouldSkipAnimation,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  // Add class in the next AF to synchronize with animation with Transition components\n  useEffect(() => {\n    backButtonRef.current!.classList.toggle('state-back', isBackButton);\n  }, [isBackButton]);\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport {\n  ApiUser, ApiChat, ApiMediaFormat, ApiPhoto,\n} from '../../api/types';\n\nimport {\n  getChatAvatarHash, isDeletedUser, getUserColorKey, getChatTitle, isChatPrivate, getUserFullName,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport buildClassName from '../../util/buildClassName';\nimport { getFirstLetters } from '../../util/textFormat';\nimport useMedia from '../../hooks/useMedia';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ProfilePhoto.scss';\n\ntype OwnProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isFirstPhoto?: boolean;\n  isSavedMessages?: boolean;\n  photo?: ApiPhoto;\n  lastSyncTime?: number;\n  onClick: NoneToVoidFunction;\n};\n\nconst ProfilePhoto: FC<OwnProps> = ({\n  chat,\n  user,\n  photo,\n  isFirstPhoto,\n  isSavedMessages,\n  lastSyncTime,\n  onClick,\n}) => {\n  const lang = useLang();\n  const isDeleted = user && isDeletedUser(user);\n\n  function getMediaHash(size: 'normal' | 'big' = 'big', forceAvatar?: boolean) {\n    if (photo && !forceAvatar) {\n      return `photo${photo.id}?size=c`;\n    }\n\n    let hash: string | undefined;\n    if (!isSavedMessages && !isDeleted) {\n      if (user) {\n        hash = getChatAvatarHash(user, size);\n      } else if (chat) {\n        hash = getChatAvatarHash(chat, size);\n      }\n    }\n\n    return hash;\n  }\n\n  const imageHash = getMediaHash();\n  const fullMediaData = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const avatarThumbnailData = useMedia(\n    !fullMediaData && isFirstPhoto ? getMediaHash('normal', true) : undefined,\n    false,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurSync(!fullMediaData && photo && photo.thumbnail && photo.thumbnail.dataUri);\n  const imageSrc = fullMediaData || avatarThumbnailData || thumbDataUri;\n  const prevImageSrc = usePrevious(imageSrc);\n\n  let content: string | undefined = '';\n\n  if (isSavedMessages) {\n    content = <i className=\"icon-avatar-saved-messages\" />;\n  } else if (isDeleted) {\n    content = <i className=\"icon-avatar-deleted-account\" />;\n  } else if (imageSrc) {\n    content = <img src={imageSrc} className=\"avatar-media\" alt=\"\" decoding=\"async\" />;\n  } else if (!imageSrc && user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (!imageSrc && chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isChatPrivate(chat.id) ? 2 : 1);\n  } else {\n    content = (\n      <div className=\"spinner-wrapper\">\n        <Spinner color=\"white\" />\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'ProfilePhoto',\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    (!isSavedMessages && !(imageSrc)) && 'no-photo',\n  );\n\n  return (\n    <div className={fullClassName} onClick={imageSrc ? onClick : undefined}>\n      {prevImageSrc && imageSrc && prevImageSrc !== imageSrc && (\n        <img src={prevImageSrc} className=\"prev-avatar-media\" alt=\"\" decoding=\"async\" />\n      )}\n      {typeof content === 'string' ? renderText(content, ['hq_emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(ProfilePhoto);\n","import React, {\n  FC, useEffect, useCallback, memo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getUserFullName, getUserStatus, isChatChannel, isUserOnline,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport usePhotosPreload from './hooks/usePhotosPreload';\nimport useLang from '../../hooks/useLang';\n\nimport VerifiedIcon from '../common/VerifiedIcon';\nimport ProfilePhoto from './ProfilePhoto';\nimport Transition from '../ui/Transition';\n\nimport './ProfileInfo.scss';\n\ntype OwnProps = {\n  userId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  isSavedMessages?: boolean;\n  animationLevel: 0 | 1 | 2;\n  serverTimeOffset: number;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'openMediaViewer'>;\n\nconst PrivateChatInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  user,\n  chat,\n  isSavedMessages,\n  lastSyncTime,\n  animationLevel,\n  loadFullUser,\n  openMediaViewer,\n  serverTimeOffset,\n}) => {\n  const { id: userId } = user || {};\n  const { id: chatId } = chat || {};\n  const fullName = user ? getUserFullName(user) : (chat ? chat.title : '');\n  const photos = (user ? user.photos : (chat ? chat.photos : undefined)) || [];\n  const slideAnimation = animationLevel >= 1 ? 'slide' : 'none';\n\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n  const isFirst = isSavedMessages || photos.length <= 1 || currentPhotoIndex === 0;\n  const isLast = isSavedMessages || photos.length <= 1 || currentPhotoIndex === photos.length - 1;\n\n  // Deleting the last profile photo may result in an error\n  useEffect(() => {\n    if (currentPhotoIndex > photos.length) {\n      setCurrentPhotoIndex(Math.max(0, photos.length - 1));\n    }\n  }, [currentPhotoIndex, photos.length]);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [userId, loadFullUser, lastSyncTime]);\n\n  usePhotosPreload(user || chat, photos, currentPhotoIndex);\n\n  const handleProfilePhotoClick = useCallback(() => {\n    openMediaViewer({\n      avatarOwnerId: userId || chatId,\n      profilePhotoIndex: currentPhotoIndex,\n      origin: MediaViewerOrigin.ProfileAvatar,\n    });\n  }, [openMediaViewer, userId, chatId, currentPhotoIndex]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex - 1);\n  }, [currentPhotoIndex, isFirst]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex + 1);\n  }, [currentPhotoIndex, isLast]);\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>(\n      '.profile-slide-container > .active, .profile-slide-container > .to',\n    );\n    if (!element) {\n      return undefined;\n    }\n\n    return captureEvents(element, {\n      excludedClosestSelector: '.navigation',\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        }\n      } : undefined,\n    });\n  }, [selectNextMedia, selectPreviousMedia]);\n\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  function renderPhotoTabs() {\n    if (isSavedMessages || !photos || photos.length <= 1) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"photo-dashes\">\n        {photos.map((_, i) => (\n          <span className={`photo-dash ${i === currentPhotoIndex ? 'current' : ''}`} />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPhoto() {\n    const photo = !isSavedMessages && photos && photos.length > 0 ? photos[currentPhotoIndex] : undefined;\n\n    return (\n      <ProfilePhoto\n        key={currentPhotoIndex}\n        user={user}\n        chat={chat}\n        photo={photo}\n        isSavedMessages={isSavedMessages}\n        isFirstPhoto={isFirst}\n        onClick={handleProfilePhotoClick}\n      />\n    );\n  }\n\n  function renderStatus() {\n    if (user) {\n      return (\n        <div className={`status ${isUserOnline(user) ? 'online' : ''}`}>\n          <span className=\"user-status\" dir=\"auto\">{getUserStatus(lang, user, serverTimeOffset)}</span>\n        </div>\n      );\n    }\n\n    return (\n      <span className=\"status\" dir=\"auto\">{\n        isChatChannel(chat!)\n          ? lang('Subscribers', chat!.membersCount, 'i')\n          : lang('Members', chat!.membersCount, 'i')\n      }\n      </span>\n    );\n  }\n\n  const isVerifiedIconShown = (user && user.isVerified) || (chat && chat.isVerified);\n\n  return (\n    <div className=\"ProfileInfo\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"photo-wrapper\">\n        {renderPhotoTabs()}\n        <Transition activeKey={currentPhotoIndex} name={slideAnimation} className=\"profile-slide-container\">\n          {renderPhoto}\n        </Transition>\n\n        {!isFirst && (\n          <button\n            type=\"button\"\n            className=\"navigation prev\"\n            aria-label={lang('AccDescrPrevious')}\n            onClick={selectPreviousMedia}\n          />\n        )}\n        {!isLast && (\n          <button\n            type=\"button\"\n            className=\"navigation next\"\n            aria-label={lang('Next')}\n            onClick={selectNextMedia}\n          />\n        )}\n      </div>\n\n      <div className=\"info\" dir={lang.isRtl ? 'rtl' : 'auto'}>\n        {isSavedMessages ? (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{lang('SavedMessages')}</h3>\n          </div>\n        ) : (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n            {isVerifiedIconShown && <VerifiedIcon />}\n          </div>\n        )}\n        {!isSavedMessages && renderStatus()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId, forceShowSelf }): StateProps => {\n    const { lastSyncTime, serverTimeOffset } = global;\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      lastSyncTime, user, chat, isSavedMessages, animationLevel, serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFullUser', 'openMediaViewer']),\n)(PrivateChatInfo));\n","import {\n  ApiChat, ApiMediaFormat, ApiPhoto, ApiUser,\n} from '../../../api/types';\nimport { useEffect } from '../../../lib/teact/teact';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nconst PHOTOS_TO_PRELOAD = 4;\n\nexport default function usePhotosPreload(\n  profile: ApiUser | ApiChat | undefined,\n  photos: ApiPhoto[],\n  currentIndex: number,\n) {\n  useEffect(() => {\n    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach((photo) => {\n      const mediaData = mediaLoader.getFromMemory(`photo${photo.id}?size=c`);\n      if (!mediaData) {\n        mediaLoader.fetch(`photo${photo.id}?size=c`, ApiMediaFormat.BlobUrl);\n      }\n    });\n  }, [currentIndex, photos]);\n}\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { ApiChat, ApiUser } from '../../api/types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatDescription, getChatLink, getHasAdminRight, isChatChannel, isChatPrivate, isUserRightBanned, selectIsChatMuted,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\n\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\nimport Switcher from '../ui/Switcher';\n\ntype OwnProps = {\n  chatOrUserId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  canInviteUsers?: boolean;\n  isMuted?: boolean;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'updateChatMutedState' | 'showNotification'>;\n\nconst ChatExtra: FC<OwnProps & StateProps & DispatchProps> = ({\n  lastSyncTime,\n  user,\n  chat,\n  forceShowSelf,\n  canInviteUsers,\n  isMuted,\n  loadFullUser,\n  showNotification,\n  updateChatMutedState,\n}) => {\n  const {\n    id: userId,\n    fullInfo,\n    username,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n  const {\n    id: chatId,\n    username: chatUsername,\n  } = chat || {};\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [loadFullUser, userId, lastSyncTime]);\n\n  const handleNotificationChange = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n  }, [chatId, isMuted, updateChatMutedState]);\n\n  if (!chat || chat.isRestricted || (isSelf && !forceShowSelf)) {\n    return undefined;\n  }\n\n  function copy(text: string, entity: string) {\n    copyTextToClipboard(text);\n    showNotification({ message: `${entity} was copied` });\n  }\n\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneNumber);\n  const link = getChatLink(chat);\n  const url = link.indexOf('http') === 0 ? link : `http://${link}`;\n  const printedUsername = username || chatUsername;\n  const description = (fullInfo && fullInfo.bio) || getChatDescription(chat);\n\n  return (\n    <div className=\"ChatExtra\">\n      {formattedNumber && !!formattedNumber.length && (\n        <ListItem icon=\"phone\" multiline narrow ripple onClick={() => copy(formattedNumber, lang('Phone'))}>\n          <span className=\"title\" dir=\"auto\">{formattedNumber}</span>\n          <span className=\"subtitle\">{lang('Phone')}</span>\n        </ListItem>\n      )}\n      {printedUsername && (\n        <ListItem\n          icon=\"mention\"\n          multiline\n          narrow\n          ripple\n          onClick={() => copy(`@${printedUsername}`, lang('Username'))}\n        >\n          <span className=\"title\" dir=\"auto\">{renderText(printedUsername)}</span>\n          <span className=\"subtitle\">{lang('Username')}</span>\n        </ListItem>\n      )}\n      {description && !!description.length && (\n        <ListItem\n          icon=\"info\"\n          multiline\n          narrow\n          isStatic\n        >\n          <span className=\"title\" dir=\"auto\">\n            {renderText(description, ['br', 'links', 'emoji'])}\n          </span>\n          <span className=\"subtitle\">{lang(userId ? 'UserBio' : 'Info')}</span>\n        </ListItem>\n      )}\n      {canInviteUsers && !printedUsername && !!link.length && (\n        <ListItem icon=\"mention\" multiline narrow ripple onClick={() => copy(link, lang('SetUrlPlaceholder'))}>\n          <div className=\"title\">\n            <SafeLink url={url} className=\"title\" text={link} />\n          </div>\n          <span className=\"subtitle\">{lang('SetUrlPlaceholder')}</span>\n        </ListItem>\n      )}\n      <ListItem icon=\"unmute\" ripple onClick={handleNotificationChange}>\n        <span>{lang('Notifications')}</span>\n        <Switcher\n          id=\"group-notifications\"\n          label={userId ? 'Toggle User Notifications' : 'Toggle Chat Notifications'}\n          checked={!isMuted}\n          inactive\n        />\n      </ListItem>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatOrUserId }): StateProps => {\n    const { lastSyncTime } = global;\n\n    const chat = chatOrUserId ? selectChat(global, chatOrUserId) : undefined;\n    const user = isChatPrivate(chatOrUserId) ? selectUser(global, chatOrUserId) : undefined;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    const canInviteUsers = chat && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    return {\n      lastSyncTime, chat, user, canInviteUsers, isMuted,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadFullUser', 'updateChatMutedState', 'showNotification',\n  ]),\n)(ChatExtra));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  ISettings,\n  MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from './ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from './ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty_search');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty_search');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty_search');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              target=\"sharedMedia\"\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div className=\"shared-media\">\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo\n        userId={resolvedUserId || chatId}\n        forceShowSelf={resolvedUserId !== chatId}\n      />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} forceShowSelf={resolvedUserId !== chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat && chat.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState, RightColumnContent } from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' |\n  'closeLocalTextSearch' | 'closePollResults' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n  shouldSkipHistoryAnimations,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, true);\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, true);\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  ANIMATION_END_DELAY, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline'\n)>;\n\nconst ANIMATION_DURATION = 350;\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet rightColumnAnimationTimeout: number | undefined;\nlet notificationInterval: number | undefined;\n\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n    }\n  }, [lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Add `body` classes when toggling right column\n  useEffect(() => {\n    if (animationLevel > 0) {\n      document.body.classList.add('animating-right-column');\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n      if (rightColumnAnimationTimeout) {\n        clearTimeout(rightColumnAnimationTimeout);\n        rightColumnAnimationTimeout = undefined;\n      }\n\n      rightColumnAnimationTimeout = window.setTimeout(() => {\n        document.body.classList.remove('animating-right-column');\n        rightColumnAnimationTimeout = undefined;\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          document.title = `${newUnread} notification${newUnread > 1 ? 's' : ''}`;\n          updateIcon(true);\n        }\n      } else {\n        document.title = PAGE_TITLE;\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      document.title = PAGE_TITLE;\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n  ]),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"sourceRoot":""}