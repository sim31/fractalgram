{"version":3,"file":"347.60641be440526eb0fc74.js","mappings":"4rCA6MA,SAASA,EAAYC,EAAsDC,GACzE,MAAMC,EAAQC,SAASC,cAAc,OACrCF,EAAMG,UAAUC,IAAI,SAEpB,MAAMC,EAAM,IAAIC,MAYhB,GAVsB,iBAAXR,EACTO,EAAIE,IAAMT,EACDA,aAAkBU,iBAC3BH,EAAIE,IAAMT,EAAOW,OAEjBJ,EAAIE,IAAMT,EAAOS,IAGnBP,EAAMU,YAAYL,GAEdN,IAAWY,EAAAA,GAAAA,eAAmCZ,IAAWY,EAAAA,GAAAA,eAAkC,CAC7FX,EAAMG,UAAUC,IAAI,eAChBL,IAAWY,EAAAA,GAAAA,gBACbX,EAAMG,UAAUC,IAAI,QAEtB,MAAMQ,EAAcX,SAASY,cAC3Bd,IAAWY,EAAAA,GAAAA,cACP,kCACA,gCAEFC,GACFZ,EAAMU,YAAYE,EAAYE,WAAU,IAI5C,OAAOd,EAoCT,SAASe,EAA2BC,EAAwBC,GAC1D,MAAMC,EAAqBjB,SAASY,cAA8B,0BAClE,IAAIM,EAAeH,EAAUI,UAAYH,EAAQI,QAAwB,4BAA6BD,UAKtG,OAJIJ,EAAUM,GAAGC,SAAS,kBACxBJ,GAAgBH,EAAUQ,cAAeJ,UAAYJ,EAAUK,QAAwB,YAAaD,WAG/FD,EAAeD,EAAmBO,WACpCN,EAAeF,EAAQS,aAAeR,EAAmBO,UAAYP,EAAmBQ,aAa/F,SAASC,EAAYC,EAAsBC,GACzCC,OAAOC,OAAOH,EAAQI,MAAOH,GAG/B,SAASI,EAASlC,EAA2BmC,GAC3C,IAAIC,EACAC,EAEJ,OAAQrC,GACN,KAAKY,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACHwB,EAAqB,uCAAsCD,EAASZ,KACpEc,EAAgB,cAChB,MAEF,KAAKzB,EAAAA,GAAAA,YACHwB,EAAqB,gBAAeD,EAASZ,KAC7Cc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,aACHwB,EAAqB,gBAAeD,EAASZ,KAC7Cc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,mBACHwB,EAAoB,kCACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,eACHwB,EAAoB,+CACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,cACHwB,EAAoB,kDACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,OACL,QACEwB,EAAqB,kCAAiCD,EAASZ,KAC/Dc,EAAgB,4DAGpB,MAAMpB,EAAYf,SAASY,cAA2BsB,GAChDE,EAAWrB,GAAaA,EAAUsB,iBAAsDF,GAE9F,MAAO,CACLpB,UAAAA,EACAuB,QAASF,GAAYA,EAASA,EAASG,OAAS,IAIpD,SAASC,EAAWzC,EAAuBD,GACzC,OAAQA,GACN,KAAKY,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,OACL,KAAKA,EAAAA,GAAAA,gBACHX,EAAMG,UAAUC,IAAI,mBACpB,MAEF,KAAKO,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACFX,EAAM0C,WAA2BV,MAAMW,UAAY,QACpD,MAEF,KAAKhC,EAAAA,GAAAA,mBACHX,EAAMG,UAAUC,IAAI,W,0FC3U1B,MAoCA,GAAewC,EAAAA,EAAAA,KACb,CAACC,GAAUC,OAAAA,EAAQC,UAAAA,EAAWC,SAAAA,MAC5B,GAAIA,GAAYF,EACd,MAAO,CACLG,QAAQC,EAAAA,EAAAA,IAAcJ,IAAUK,EAAAA,EAAAA,IAAWN,EAAQC,IAAUM,EAAAA,EAAAA,IAAWP,EAAQC,IAIpF,IAAKC,IAAcD,EACjB,MAAO,GAGT,MAAMZ,GAAUmB,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,GAElD,MAAO,CACLb,QAAAA,EACAe,OAAQf,IAAWoB,EAAAA,EAAAA,IAAaT,EAAQX,OAG5C,CAACqB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBAAoB,kBAnB5E,EApC8D,EAC5DV,OAAAA,EAAQC,UAAAA,EAAWE,OAAAA,EAAQD,SAAAA,EAAUd,QAAAA,EAASwB,iBAAAA,EAAkBC,aAAAA,MAEhE,MAAMC,GAAqBC,EAAAA,EAAAA,KAAY,KACrCH,IACAC,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACD,EAAQa,EAAcZ,EAAWW,IAE/BI,GAAOC,EAAAA,EAAAA,KAEb,IAAKd,IAAYf,IAAYc,EAC3B,OAGF,MAAMgB,EAAaf,EAAO3B,GAAK,EACzB2C,GAAcC,EAAAA,EAAAA,IAAeJ,EAAMb,GAEzC,OACE,0BAAKkB,UAAU,aAAaC,QAASR,GAClCI,EACC,mBAACK,EAAA,EAAD,CAAQC,IAAKrB,EAAO3B,GAAIiD,KAAK,SAASC,KAAMvB,IAE5C,mBAACoB,EAAA,EAAD,CAAQC,IAAKrB,EAAO3B,GAAIiD,KAAK,SAASE,KAAMxB,IAE9C,0BAAKkB,UAAU,QACb,0BAAKA,UAAU,QAAQO,IAAI,QACxBT,IAAeU,EAAAA,EAAAA,GAAWV,IAE7B,0BAAKE,UAAU,OAAOO,IAAI,QACvB1B,EAAWc,EAAK,gCAAiCc,EAAAA,EAAAA,IAAoBd,EAAsB,IAAhB5B,EAAS2C,Y,4CCpC/F,MAyIA,EAzIyC,EACvCC,UAAAA,EACAC,QAAAA,EACAC,SAAAA,EACA9C,QAAAA,EACA+C,SAAAA,EACAjC,SAAAA,EACAkC,mBAAAA,EACAC,UAAAA,EACAC,aAAAA,MAEA,MAAM,kBACJC,EADI,iBAEJC,EAFI,oBAGJC,IACEC,EAAAA,EAAAA,GACFtD,GAAW6C,GAAUU,EAAAA,EAAAA,IAAoBvD,EAAS,iBAAcwD,EAChET,GAGInB,GAAOC,EAAAA,EAAAA,KAEP4B,GAA8DC,EAAAA,EAAAA,KAAQ,IACnE,EAAGC,UAAAA,EAAWC,OAAAA,KACnB,mBAACC,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN9B,UAAW2B,EAAS,cAAWJ,EAC/BtB,QAASyB,EACTK,UAAU,gBAEV,wBAAG/B,UAAU,gBAGhB,IAEH,OAAIgC,EAAAA,GAEA,0BAAKhC,UAAU,6BACb,mBAACiC,EAAA,EAAD,CACEC,QAASV,EACTW,UAAU,UAERtD,GACA,mBAACuD,EAAA,EAAD,CACEC,KAAK,UACLpC,QAASe,GAERrB,EAAK,YAGTiB,EACC,mBAACwB,EAAA,EAAD,CACEC,KAAMnB,EAAoB,QAAU,WACpCjB,QAASmB,GAERF,EAAqB,GAAEoB,KAAKT,MAAyB,IAAnBV,qBAA4C,YAGjF,mBAACiB,EAAA,EAAD,CACEC,KAAK,WACLE,KAAM5B,EACN6B,SAAU1B,GAETnB,EAAK,uBAIXuB,GAAqB,mBAACuB,EAAA,EAAD,CAAiBC,SAAUvB,EAAkBf,KAAK,IAAIuC,SAAO,KAMvF,0BAAK3C,UAAU,uBACXnB,GACA,sCACE,mBAAC+C,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,oBACNC,UAAWpC,EAAK,WAChBM,QAASe,GAET,wBAAGhB,UAAU,mBAIlBY,EACC,mBAACgB,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,oBACNC,UAAWpC,EAAK,qBAChBM,QAASmB,GAERF,EACC,mBAACuB,EAAA,EAAD,CAAiBC,SAAUvB,EAAkBf,KAAK,IAAIH,QAASmB,IAE/D,wBAAGpB,UAAU,mBAIjB,mBAAC4B,EAAA,EAAD,CACEW,KAAM5B,EACN6B,SAAU1B,EACVe,OAAK,EACLzB,KAAK,UACL0B,MAAM,oBACNC,UAAWpC,EAAK,sBAEhB,wBAAGK,UAAU,mBAGjB,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,oBACNC,UAAWlB,EAAW,WAAa,UACnCZ,QAASgB,GAET,wBAAGjB,UAAWa,EAAW,gBAAkB,kBAE7C,mBAACe,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,oBACNC,UAAWpC,EAAK,SAChBM,QAASc,GAET,wBAAGf,UAAU,kB,wBCrJrB,MAyDA,EAhDwC,EACtC4C,KAAAA,EAAO,GAAIC,SAAAA,EAAUC,WAAAA,EAAY7C,QAAAA,MAEjC,MAAO8C,EAAaC,IAAkBC,EAAAA,EAAAA,KAAS,IAC/CC,EAAAA,EAAAA,KAAU,KACR,MAAMC,EAAgBrH,SAASY,cAAc,kCAEvC0G,EAAmB,KACvB,MAAMC,EAASF,EAAgBA,EAAcG,aAAe,EAE5DN,EAAeK,EAAe,EAANE,EAAAA,KAI1BH,IAEA,MAAMI,GAAeC,EAAAA,EAAAA,IAASL,EAzBP,KAyB6C,GAIpE,OAFAM,OAAOC,iBAAiB,SAAUH,GAAc,GAEzC,KACLE,OAAOE,oBAAoB,SAAUJ,GAAc,MAEpD,IAQH,MAAMK,GAAaC,EAAAA,EAAAA,GACjB,oBACAhB,GAAc,eACdD,GAAY,aAGd,OACE,0BAAK7C,UAAW6D,EAAY5D,QAb9B,SAAmB8D,GACbnB,GACFmB,EAAEC,oBAYDpB,GACC,0BAAK5C,UAAU,8BAA8BC,QAAU+B,EAAAA,QAAoCT,EAAVtB,GAC/E,wBAAGD,UAAY,6BAA2B+C,EAAc,YAAc,IAAMxC,IAAI,QAAQqC,M,wBClDlG,MAAMqB,OA+EsC,IAA/BnI,SAASoI,kBACX,yBAC2C,IAAlCpI,SAASqI,qBAClB,4BAC8C,IAArCrI,SAASsI,wBAClB,0BAGF,G,wBCjGT,MAAMC,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,MAEhD,EAAgBC,IACd,MAAMC,EAAmB,IAAVD,EAAc,EAAIhC,KAAKkC,MAAMlC,KAAKmC,IAAIH,GAAShC,KAAKmC,IAAI,OAEvE,MAAQ,IAAGH,EAAQ,MAAQhC,KAAKkC,MAAMD,IAASG,QAAQ,MAAML,EAAME,MCuB/DI,GAAaZ,IACjBA,EAAEC,mBA4IJ,GAvIwC,EACtCY,iBAAAA,EACAC,YAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,eAAAA,EACAC,qBAAAA,EACAC,SAAAA,EACAC,sBAAAA,EACAC,aAAAA,EACAC,mBAAAA,EACAC,YAAAA,EACAC,OAAAA,MAEA,MAAOC,EAAWC,IAAiBxC,EAAAA,EAAAA,KAAS,IAE5CC,EAAAA,EAAAA,KAAU,KACJ8B,GACFS,EAAcT,KAEf,CAACA,KAEJ9B,EAAAA,EAAAA,KAAU,KACR,IAAIwC,EAYJ,OAVKV,IACChD,EAAAA,GACFyD,GAAc,GAEdC,EAAUhC,OAAOiC,YAAW,KAC1BF,GAAc,KAhCS,MAqCtB,KACDC,GACFhC,OAAOkC,aAAaF,MAGvB,CAACV,KAEJ9B,EAAAA,EAAAA,KAAU,MACJsC,GAAaR,IACflJ,SAAS+J,KAAK7J,UAAUC,IAAI,0BAGvB,KACLH,SAAS+J,KAAK7J,UAAU8J,OAAO,6BAEhC,CAACd,EAAgBQ,IAEpB,MAAM7F,GAAOC,EAAAA,EAAAA,KA4Cf,IAAwBmG,EAA2BC,EA1CjD,GAAKR,GAAcR,EAInB,OACE,0BAAKhF,UAAY,wBAAsBiF,EAAuB,SAAW,IAAMhF,QAAS0E,IA6C5F,SAAwBE,EAAqBC,EAAkBF,EAA0BW,GACvF,MAAMU,EAAoBpB,EAAcC,EAAY,IAC9CoB,EAAwC,IAAnBtB,EAE3B,OACE,0BAAK5E,UAAU,mBACb,0BAAKA,UAAU,yBACb,0BACEA,UAAU,2BAEVnC,MAAQ,UAASqI,GAAsB,OAEzC,0BACElG,UAAU,yBAEVnC,MAAQ,UAASoI,GAAoB,OAEvC,4BACEE,IAAI,IACJC,IAAI,MACJC,KAAM,IACNC,KAAK,QACLC,QAAShB,EACTvF,UAAU,wBACVwG,MAAOP,GAAoB,MApE9BQ,CAAe5B,EAAaC,EAAUF,EAAkBW,GACzD,mBAAC3D,EAAA,EAAD,CACEG,UAAWpC,EAAK,iBAChBS,KAAK,OACLsG,QAAS1E,EAAAA,GACTF,MAAM,oBACN9B,UAAU,OACVC,QAASqF,GAET,wBAAGtF,UAAWkF,EAAW,aAAe,eAmBhD,SAAoBL,EAAqBC,GACvC,OACE,0BAAK9E,UAAU,eACX,IAAE2G,EAAAA,EAAAA,IAAoB9B,SAAkB8B,EAAAA,EAAAA,IAAoB7B,MApB7D8B,CAAW/B,EAAaC,GACxBF,EAAmB,IAwBFmB,EAxBsBnB,EAwBKoB,EAxBajB,EA0B5D,0BAAK/E,UAAU,oBACX,GAAE6G,EAAeb,EAAYD,QAAwBc,EAAeb,OA1BrEb,GACC,mBAACvD,EAAA,EAAD,CACEG,UAAU,aACV3B,KAAK,OACL0B,MAAM,oBACN9B,UAAU,aACVC,QAASoF,GAET,wBAAGrF,UAAcoF,EAAe,mBAAqB,uB,iNCpF/D,MA0LA,IAAe0B,EAAAA,EAAAA,KAxLmB,EAChCC,IAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAC,WAAAA,EACA/F,iBAAAA,EACA4D,SAAAA,EACAoC,kBAAAA,EACAC,OAAAA,EACAC,QAAAA,MAGA,MAAMC,GAAWC,EAAAA,EAAAA,IAAyB,OACnCrC,EAAUsC,IAAevE,EAAAA,EAAAA,KAAUwE,EAAAA,KAAiBC,EAAAA,KACpD7C,EAAa8C,IAAkB1E,EAAAA,EAAAA,IAAS,IACxC2E,EAAmBC,IAAwB5E,EAAAA,EAAAA,KAAS,IAEpDmC,EAAc0C,EAAeC,GHtCvB,SAA6BC,EAAgBR,GAC1D,MAAOpC,EAAc6C,IAAmBhF,EAAAA,EAAAA,IAASiF,QAAQjE,GAAQnI,SAASmI,KAoE1E,OA9BAkE,EAAAA,EAAAA,KAAgB,KACd,MAAMC,EAAW,KAAQH,EAAgBC,QAAQjE,GAAQnI,SAASmI,MAC5DoE,EAAgB,KAAQJ,GAAgB,IACxCK,EAAe,KACnBL,GAAgB,GAChBT,GAAY,IAERe,EAAQP,EAAMQ,QAWpB,OATA1M,SAAS6H,iBAAiB,mBAAoByE,GAAU,GACxDtM,SAAS6H,iBAAiB,yBAA0ByE,GAAU,GAC9DtM,SAAS6H,iBAAiB,sBAAuByE,GAAU,GAEvDG,IACFA,EAAM5E,iBAAiB,wBAAyB0E,GAAe,GAC/DE,EAAM5E,iBAAiB,sBAAuB2E,GAAc,IAGvD,KACLxM,SAAS8H,oBAAoB,mBAAoBwE,GAAU,GAC3DtM,SAAS8H,oBAAoB,yBAA0BwE,GAAU,GACjEtM,SAAS8H,oBAAoB,sBAAuBwE,GAAU,GAC1DG,IACFA,EAAM3E,oBAAoB,wBAAyByE,GAAe,GAClEE,EAAM3E,oBAAoB,sBAAuB0E,GAAc,OAIlE,IAEErE,GAAyB,QAAjBwE,EAAAA,GAIN,CAACrD,EAtEc,KACf4C,EAAMQ,UAAavE,GAAyB,QAAjBwE,EAAAA,MAI5BT,EAAMQ,QAAQE,kBAChBV,EAAMQ,QAAQE,oBACLV,EAAMQ,QAAQG,wBACvBX,EAAMQ,QAAQG,0BACLX,EAAMQ,QAAQI,sBACvBZ,EAAMQ,QAAQI,wBACLZ,EAAMQ,QAAQK,sBACvBb,EAAMQ,QAAQK,uBAGhBZ,GAAgB,KAGK,KAChBD,EAAMQ,UAIP1M,SAASiM,eACXjM,SAASiM,iBACAjM,SAASgN,oBAClBhN,SAASgN,sBACAhN,SAASiN,uBAClBjN,SAASiN,yBACAjN,SAASkN,sBAClBlN,SAASkN,uBAGXf,GAAgB,MAkCT,EAAC,GGhC4CgB,CAAoB3B,EAAUE,IAE9E,WAAE0B,EAAF,iBAActE,EAAd,kBAAgCuE,IAAsBC,EAAAA,EAAAA,MAE1DC,aAAcC,EACdC,qBAAsBC,IACpBC,EAAAA,EAAAA,IAAmBP,OAAY3H,OAAWA,EAAW,SAEvD8H,aAAcK,EACdH,qBAAsBI,IACpBF,EAAAA,EAAAA,GAAkB/B,EAAAA,KAAWxC,IAAaoE,OAAqB/H,OAAWA,EAAW,SAEzF2B,EAAAA,EAAAA,KAAU,KACJkE,IAAWD,EACbG,EAASkB,QAASoB,QACT7C,IAAQU,EAAAA,KAIjBoC,EAAAA,EAAAA,GAASvC,EAASkB,WAEnB,CAACpB,EAAQD,EAAmBJ,KAE/B7D,EAAAA,EAAAA,KAAU,KACJoE,EAASkB,QAAS3D,cAAgByC,EAASkB,QAAS1D,UACtD6C,EAAe,GACfH,GAAY,IAEZG,EAAeL,EAASkB,QAAS3D,eAElC,CAACA,IAEJ,MAAMiF,GAAkBpK,EAAAA,EAAAA,KAAaqE,IACnCA,EAAEC,kBACEkB,GACFoC,EAASkB,QAASoB,QAClBpC,GAAY,KAEZF,EAASkB,QAASuB,OAClBvC,GAAY,MAEb,CAACtC,KAEJ8E,EAAAA,EAAAA,GAAgB1C,EAAU,IAE1B,MAAM2C,GAAkBvK,EAAAA,EAAAA,KAAY,KAClCmI,GAAqB,KACpB,IAEGqC,GAAiBxK,EAAAA,EAAAA,KAAY,KACjCmI,GAAqB,KACpB,IAEGsC,GAAmBzK,EAAAA,EAAAA,KAAaqE,IACpC4D,EAAe5D,EAAEqG,cAAcvF,eAC9B,IAEGwF,GAAc3K,EAAAA,EAAAA,KAAY,KAC9BiI,EAAe,GACfH,GAAY,KACX,IAEG8C,GAAyB5K,EAAAA,EAAAA,KAAY,KACrC0F,GAAgB2C,EAClBA,KACU3C,GAAgB0C,GAC1BA,MAED,CAACC,EAAgB3C,EAAc0C,IAE5ByC,GAAa7K,EAAAA,EAAAA,KAAaqE,IAC9BA,EAAEC,kBAEFsD,EAASkB,QAAS3D,YAAe2F,OAAOzG,EAAE0G,OAAOjE,OAASc,EAASkB,QAAS1D,SAAY,MACvF,IAEG4F,GAAiBhL,EAAAA,EAAAA,KAAaqE,IAClCA,EAAEC,kBACF6D,GAAsBD,KACrB,CAACA,KAEJ1E,EAAAA,EAAAA,KAAU,KACR,MAAMyH,EAA4B5G,IAClB,UAAVA,EAAE5D,KAA6B,MAAV4D,EAAE5D,MACzB4D,EAAE6G,iBACFd,EAAgB/F,KAMpB,OAFAjI,SAAS6H,iBAAiB,UAAWgH,GAA0B,GAExD,KACL7O,SAAS8H,oBAAoB,UAAW+G,GAA0B,MAEnE,CAACb,IAEJ,MAAMe,EAAe3D,GAAe,UAASA,EAAW4D,oBAAoB5D,EAAW7D,WACjF0H,EAAc,yBAAwB9D,KAE5C,OACE,0BACEjH,UAAU,cACVC,SAAU+G,GAAShF,EAAAA,GAA0B0I,OAAiBnJ,EAC9DyJ,YAAchE,OAA0BzF,EAAlB0I,EACtBgB,WAAajE,OAAyBzF,EAAjB2I,GAErB,0BAEErM,MAAOgN,GAGP,+BACEK,IAAK5D,EACL6D,SAAU1D,EAAAA,GACV2D,aAAW,EACXC,KAAMrE,EAENsE,MAAOtE,EACP7J,GAAG,qBAEHU,MAAOkN,EACPQ,QAASlB,EACTpK,QAAU+B,EAAAA,QAA4CT,EAAlBuI,EACpC0B,cAAelB,GAEXnB,EAdN,CAeEsC,aAActB,IAEbpD,GAAO,6BAAQ3K,IAAK2K,MAGxB2C,GACC,mBAAC9H,EAAA,EAAD,CAAQC,OAAK,EAAC7B,UAAY,eAAc2J,IAAwB1J,QAAS6J,GACvE,wBAAG9J,UAAU,eAGhBsJ,GACC,0BAAKtJ,UAAW,CAAC,oBAAqBwJ,GAAmBkC,KAAK,OAC1DxC,GAAc,0BAAKlJ,UAAU,aAAf,gBAChB,mBAACyC,EAAA,EAAD,CACErC,KAAK,KACLsC,SAAUwG,EAAa,EAAI/H,EAC3BwK,QAAM,EACN1L,QAASoH,MAIbL,IAAUsC,GACV,mBAAC,GAAD,CACEpE,SAAUA,EACVN,iBAAkBA,EAClBC,YAAaA,EACbM,sBAAuB+C,QAAQJ,GAC/B1C,aAAcA,EACdL,SAAUA,EACVD,SAAUwC,EAASkB,QAAUlB,EAASkB,QAAQ1D,SAAW,EACzDE,gBAAiBE,GAAY0C,EAC7B3C,qBAAsBiC,GAAcA,EAAW4D,MAhLpB,IAiL3BvF,OAAQgF,EACRlF,mBAAoBiF,EACpBhF,YAAawE,QCrFvB,IAAehD,EAAAA,EAAAA,KArGoB,EAAG8E,QAAAA,EAASC,aAAAA,MAC7C,MAAM,qBAAEtC,IAAyBE,EAAAA,EAAAA,GAAkBmC,GAC7CE,GAAcC,EAAAA,EAAAA,GAAqBH,GAEnCI,GAAWzE,EAAAA,EAAAA,IAAyB,OACnC0E,EAAWC,IAAgBjJ,EAAAA,EAAAA,IAAS,GACrCkJ,GAAY5E,EAAAA,EAAAA,KAAgB,IAElCrE,EAAAA,EAAAA,KAAU,KACJ0I,IAAYE,GACdI,EAZmB,OAcpB,CAACN,EAASE,IAEb,MAYMM,GAAkB1M,EAAAA,EAAAA,KAAY,KAClCyM,EAAU3D,SAAU,IACnB,IAEG6D,GAAiB3M,EAAAA,EAAAA,KAAY,KACjCyM,EAAU3D,SAAU,EACF,IAAdyD,GACFJ,EAAaI,GAAYE,EAAU3D,WAEpC,CAACqD,EAAcI,KAMlB/I,EAAAA,EAAAA,KAAU,KACR2I,EAAaI,GAAYE,EAAU3D,WAClC,CAACyD,EAAWJ,IAEf,MAAMlM,GAAOC,EAAAA,EAAAA,KAEPI,GAAY8D,EAAAA,EAAAA,GAChB,eACAyF,GAGF,OACE,0BAAKvJ,UAAWA,GACd,mBAAC4B,EAAA,EAAD,CACE0K,SA3DsB,IA2DZL,EACV7L,KAAK,OACL0B,MAAM,oBACNC,UAAWpC,EAAK,WAChBK,UAAU,WACV0G,QAAS1E,EAAAA,GACT/B,QA/CgB,KAChB+L,EAASxD,SACX0D,EAAa5J,KAAK8D,IApBM,EAoBc6F,EAAY,OA+ChD,wBAAGjM,UAAU,mBAEf,mBAAC4B,EAAA,EAAD,CACE0K,SAvEsB,IAuEZL,EACV7L,KAAK,OACL0B,MAAM,oBACNC,UAAU,UACV/B,UAAU,UACV0G,QAAS1E,EAAAA,GACT/B,QApDe,KACf+L,EAASxD,SACX0D,EAAa5J,KAAK6D,IA3BM,EA2Bc8F,EAAY,OAoDhD,wBAAGjM,UAAU,kBAEf,0BAAKA,UAAU,YACb,0BAAKA,UAAU,kBACb,0BACEA,UAAU,kBAEVnC,MAAQ,UApFK,IAoFKoO,EAAY,QAEhC,4BACEf,IAAKc,EACL7F,IAzFkB,EA0FlBC,IA3FkB,EA4FlBC,KAAK,MACLG,MAAOyF,EACP3F,KAAK,QACLtG,UAAU,iBACVuM,SAtDoBxI,IAC5BmI,EAAa5J,KAAK6D,IA3CQ,EA2CY7D,KAAK8D,IAAIoE,OAAOzG,EAAE0G,OAAOjE,OA1CrC,MAgGlBgG,YAAaJ,EACbK,UAAWJ,UCrFjBK,GAAiB,CACrB,EAAG,EAAG,EAAG,EAAG,EAAG,GAGXC,GAAe,CACnB,EAAG,EACH,IAAK,IACL,EAAG,IACH,IAAK,IACL,EAAG,KAGCC,GAAiB,IAsKvB,IAAe9F,EAAAA,EAAAA,KA1Ie,EAC5B+F,SAAAA,EACA7M,UAAAA,EACA8M,OAAAA,EACAC,OAAAA,EACAd,UAAAA,EACAe,UAAAA,EACAC,UAAAA,EACAC,MAAAA,MAEA,MAAMC,EAAiBR,GAAaV,IAA2CA,GACxEmB,EAAYC,IAAiBpK,EAAAA,EAAAA,KAAkB,IAC/CqK,EAAUC,IAAetK,EAAAA,EAAAA,IAAoB,CAClDuK,GAAIR,EAAWS,GAAIR,EAAWS,EAAG,EAAGC,EAAG,KAGlCC,EAAYC,IAAiB5K,EAAAA,EAAAA,IAAmByJ,IAGjDoB,GAAgBvG,EAAAA,EAAAA,IAAuB,MAGvCwG,GAAkBxG,EAAAA,EAAAA,IAAuB,MA8F/C,OA5FArE,EAAAA,EAAAA,KAAU,KACR,MAAM8K,EAAeb,GAAkBS,EAAW,GAC5CK,EAAWjB,GAAaY,EAAW,GACnCM,EAAWjB,GAAaW,EAAW,GAEnCO,EAAgB,IAAIP,GACtBA,EAAW,KAAOI,IACpBG,EAAc,GAAKH,GAAgBG,EAAc,GACjDA,EAAc,GAAKH,GAAgBG,EAAc,IAE/CP,EAAW,KAAOK,IACpBE,EAAc,GAAKF,GAEjBL,EAAW,KAAOM,IACpBC,EAAc,GAAKD,IAGhBE,EAAAA,EAAAA,IAAqBR,EAAYO,IACpCN,EApEN,SAAiCQ,EAAkBT,EAAsBU,GACvE,MAAMC,EAAQD,GAAWA,EAAQ5R,cAAc,eAC/C,IAAK4R,IAAYC,EACf,OAAOX,EAET,MAAMY,EAAcF,EAAQG,wBACtBC,EAAYH,EAAME,wBAElBE,EAAeD,EAAU5D,MAAQuD,EAAYT,EAAW,GACxDgB,EAAgBF,EAAUrL,OAASgL,EAAYT,EAAW,GAC1DiB,GAAWL,EAAY1D,MAAQ6D,GAAe,EAAIf,EAAW,GAC7DkB,GAAWN,EAAYnL,OAASuL,GAAgB,EAAIhB,EAAW,GAYrE,OAXIY,EAAY1D,OAAS0D,EAAY1D,MAAQ8B,GAAiBiC,EAC5DjB,EAAW,IAAMiB,EAAUL,EAAY1D,MAAQ8B,GACtC+B,GAAeA,EAAcE,EAAUjC,KAChDgB,EAAW,IAAMe,EAAcE,EAAUjC,IAEvC4B,EAAYnL,QAAUmL,EAAYnL,OAASuJ,GAAiBkC,EAC9DlB,EAAW,IAAMkB,EAAUN,EAAYnL,OAASuJ,GACvCgC,GAAgBA,EAAeE,EAAUlC,KAClDgB,EAAW,IAAMgB,EAAeE,EAAUlC,IAGrCgB,EA6CWmB,CAAwBnB,EAAW,GAAIO,EAAeL,EAActF,YAGnF,CAACwE,EAAWC,EAAWE,KAE1BjK,EAAAA,EAAAA,KAAU,KACH6J,GACHc,EAAcnB,MAEf,CAACK,KAEJ7J,EAAAA,EAAAA,KAAU,KACJ6K,EAAgBvF,UAClBuF,EAAgBvF,QAAQ3K,MAAMmR,UAAa,UAASpB,EAAWqB,iBAEhE,CAACnC,EAAQc,IA2DRd,EACKD,EAIP,0BACE3B,IAAK4C,EACL9N,UAAY,eAAcA,GAAa,KACvCwM,YAjEqBzI,IACvB,IAAKgJ,EACH,OAGFhJ,EAAEC,kBACFD,EAAE6G,iBAEF,MAEMsE,EAAyB,CAC7B1B,GAHcI,EAAW,GAIzBH,GAHcG,EAAW,GAIzBF,EAAG3J,EAAEoL,MACLxB,EAAG5J,EAAEqL,OAEP7B,EAAY2B,GACZ7B,GAAc,GAEVS,EAActF,SAChBsF,EAActF,QAAQxM,UAAUC,IAAI,SA8CpCwQ,UA1CkB,KACpBY,GAAc,GAEVS,EAActF,SAChBsF,EAActF,QAAQxM,UAAU8J,OAAO,QAGrCoH,GACFA,EAAMU,EAAW,GAAIA,EAAW,KAmChCyB,YArBqBtL,IACvB,GAAIqJ,EAAY,CACd,MAAMe,EAZV,SAA0BT,EAAWC,GACnC,MAAMQ,EAAgB,IAAIP,GACpB0B,EAAShC,EAASI,EAAIA,EACtB6B,EAASjC,EAASK,EAAIA,EAI5B,OAHAQ,EAAc,GAAKb,EAASE,GAAK8B,EACjCnB,EAAc,GAAKb,EAASG,GAAK8B,EAE1BpB,EAKiBqB,CAAiBzL,EAAEoL,MAAOpL,EAAEqL,OAClDvB,EAAcM,GAEVJ,EAAgBvF,UAClBuF,EAAgBvF,QAAQ3K,MAAMmR,UAAa,UAASpB,EAAWqB,kBAiBjE,0BACE/D,IAAK6C,EACL/N,UAAU,iBAET6M,OCjHH4C,GAAqB,IAkgB3B,SAASC,GAAYC,EAAkBC,EAA2BC,GAChE,OAAOF,EAEH,0BACEvT,IAAKuT,EACLG,IAAI,GAEJjS,MAAO+R,EAAa,UAASA,EAAU9E,UAAY,GACnDiF,UAAW7H,QAAQ2H,KAIrB,0BACE7P,UAAU,kBAEVnC,MAAO+R,EAAa,UAASA,EAAU9E,UAAY,IAEnD,mBAACkF,EAAA,EAAD,CAASlO,MAAM,WAKvB,UAAegF,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAM,OACJC,EADI,SACIsR,EADJ,UACcrR,EADd,cACyBsR,EADzB,kBACwCC,EADxC,OAC2DvU,GAC7D8C,EAAO0R,aACL,eACJC,GACE3R,EAAO4R,SAASC,MAEpB,GAAI3U,IAAWY,EAAAA,GAAAA,aAAgC,CAC7C,IAAMmC,IAAUC,EACd,MAAO,CAAEyR,eAAAA,GAGX,MAAMtS,GAAUmB,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,GAClD,OAAKb,EAIE,CACLY,OAAAA,EACAC,UAAAA,EACA4R,SAAUzS,EAAQyS,SAClB5U,OAAAA,EACAmC,QAAAA,EACAsS,eAAAA,GATO,CAAEA,eAAAA,GAab,GAAIH,EAGF,MAAO,CACLtR,WAAY,EACZ4R,SAAUN,EACVO,aALazR,EAAAA,EAAAA,IAAWN,EAAQwR,KAAkBjR,EAAAA,EAAAA,IAAWP,EAAQwR,GAMrEC,kBAAmBA,GAAqB,EACxCE,eAAAA,EACAzU,OAAAA,GAIJ,KAAM+C,GAAUsR,GAAYrR,GAC1B,MAAO,CAAEyR,eAAAA,GAGX,IAAItS,EAWA2S,EAOAC,EAXJ,GALE5S,EADEnC,GAAU,CAACY,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAASxB,IACjFgV,EAAAA,EAAAA,IAAuBlS,EAAQC,EAAQC,IAEvCM,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,IAGzCb,EACH,MAAO,CAAEsS,eAAAA,GAYX,GANEK,EADE9U,GAAU,CAACY,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAASxB,IAC5EiV,EAAAA,EAAAA,IAAwBnS,EAAQC,IAEhCmS,EAAAA,EAAAA,IAAmBpS,EAAQC,GAIxC/C,IAAWY,EAAAA,GAAAA,QAA4BZ,IAAWY,EAAAA,GAAAA,MACpDmU,GAAgBI,EAAAA,EAAAA,IAAkBrS,EAAQC,EAAQsR,KAAae,EAAAA,EAAAA,IAAgBtS,EAAQC,EAAQsR,QAC1F,GAAIrU,IAAWY,EAAAA,GAAAA,YAA+B,CACnD,MAAMyU,GAAgBC,EAAAA,EAAAA,IAAyBxS,IACzC,SAAEyS,GAAcF,GAAiBA,EAAcG,eAAiBH,EAAcG,cAAcC,OAAU,GAC5GV,EAAgBQ,EAGlB,MAAO,CACLxS,OAAAA,EACAsR,SAAAA,EACArR,UAAAA,EACA4R,SAAUzS,EAAQyS,SAClB5U,OAAAA,EACAmC,QAAAA,EACA2S,aAAAA,EACAC,cAAAA,EACAN,eAAAA,MAGJ,CAACjR,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAAmB,mBAAoB,kBAAmB,kBAvF1CZ,EAthBgC,EAClDE,OAAAA,EACAsR,SAAAA,EACArR,UAAAA,EACA4R,SAAAA,EACA5U,OAAAA,EACA6U,YAAAA,EACAN,kBAAAA,EACApS,QAAAA,EACA2S,aAAAA,EACAC,cAAAA,EACAW,gBAAAA,EACA/R,iBAAAA,EACAgS,gBAAAA,EACA/R,aAAAA,EACA6Q,eAAAA,MAEA,MAAM1O,EAASuG,QAAQuI,GAAe7R,GAEhC4S,EAAoB5V,IAAWY,EAAAA,GAAAA,YAC/BiV,EAAe7V,IAAWY,EAAAA,GAAAA,aAG1BkV,EAAQ3T,GAAU4T,EAAAA,EAAAA,IAAgB5T,QAAWwD,EAC7CgH,EAAQxK,GAAU6T,EAAAA,EAAAA,IAAgB7T,QAAWwD,EAC7CsQ,EAAe9T,GAAU+T,EAAAA,EAAAA,IAAuB/T,QAAWwD,EAC3DwQ,EAAehU,GAAUiU,EAAAA,EAAAA,IAAuBjU,QAAWwD,EAC3D0Q,IAAkBlU,IAAUmU,EAAAA,EAAAA,IAAuBnU,GACnDoU,KAAkBpU,IAAUqU,EAAAA,EAAAA,IAAuBrU,GACnD6C,GAAUsH,QAAQK,GAASwJ,GAAgBI,IAC3CE,GAAUnK,SAAStH,KAAY8Q,GAASG,GAAgBI,KACxD,MAAEjL,IAAUuB,GAASwJ,GAAgB,GACrClT,GAAWqJ,QAAQuI,GAGnB6B,GAAgBpK,QAAQ2J,GAAgBE,GACxCQ,IAAa9Q,EAAAA,EAAAA,KAAQ,IAClB6Q,IAAiB1T,EACpB,CAACA,IACD4T,EAAAA,EAAAA,IAAuB9B,GAAgB,GAAIC,GAAiB,GAAIa,IACnE,CAACc,GAAe1T,EAAW8R,EAAcC,EAAea,IAErDiB,GAA4B7T,EAAY2T,GAAWG,QAAQ9T,IAAc,EACzE+T,GAAwC,IAA9BF,KAAkE,IAA/BA,GAC7CG,GAASH,KAA8BF,GAAWlU,OAAS,IAAoC,IAA/BoU,GAGhEI,IAAetL,EAAAA,EAAAA,MACfuL,IAAe/G,EAAAA,EAAAA,GAAgCyE,IACjD7O,GAAYmR,IAAgBA,KAAiBtC,GAAaqC,GAAarK,UACzEqK,GAAarK,QAAUiK,IAEzB,MAAMM,GAAiB1C,GAAkB,EAAI,WAAa,OACpD2C,GAAqC,IAAnB3C,EAAuB,aAAe,OACxD4C,GAAsC,IAAnB5C,GAGlB6C,GAAgBC,KAAqBlQ,EAAAA,EAAAA,KAAkB,IACvDmQ,GAAgBC,KAAqBpQ,EAAAA,EAAAA,KAAS,IAC9CpC,GAAUyS,KAAerQ,EAAAA,EAAAA,KAAkB,IAC3CgJ,GAAWC,KAAgBjJ,EAAAA,EAAAA,IAAiB,IAC5CsQ,GAAUC,KAAevQ,EAAAA,EAAAA,IAAS,CAAEyK,EAAG,EAAGC,EAAG,IAGpD,SAAS8F,GAAaC,GACpB,GAAI7U,SAAkC0C,IAAtB4O,EAAiC,CAC/C,MAAM,OAAEwD,GAAWlD,EACnB,OAAOkD,GAAUA,EAAOxD,GACnB,QAAOwD,EAAOxD,GAAmBhT,aAClCyW,EAAAA,EAAAA,IAAkBnD,EAAciD,EAAS,MAAQ,UAGvD,OAAO3V,IAAWuD,EAAAA,EAAAA,IAAoBvD,EAAS2V,EAAS,aAAe,iBAGzE,MAAMG,IAAmBC,EAAAA,EAAAA,GACvB/V,IAAYyT,GAAqBC,KAAiBnQ,EAAAA,EAAAA,IAAoBvD,EAAS,kBAC/EwD,EACAwS,EAAAA,GAAAA,aACAxS,EACA0R,IAAoBxD,IAEhBuE,GAAmBP,KACnBQ,IAAiBH,EAAAA,EAAAA,GACrBE,QACAzS,EACA1C,IAAYmV,IAAoBA,GAAiBE,WAAW,gBACxDH,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,aACJxS,EACA0R,IAAoBxD,KAEd9O,UAAWwT,GAAb,iBAA4BhT,KAAqBiT,EAAAA,EAAAA,GACrDX,IAAa,QACblS,EACAxD,IAAWsW,EAAAA,EAAAA,IAAsBtW,EAAS,mBAC1CwD,EACA0R,IAAoBxD,IAGhB6E,GAAgB5C,GAASnJ,GAAUmJ,GAASnJ,GAAQoH,aAAUpO,EACpE,IAAIgT,IAAkB3T,KAAY0T,IAAgBH,KAAmBF,IAAkBJ,GACvF,MAAMW,IAAeC,EAAAA,EAAAA,IAAaF,IAAiBxW,IAAW2W,EAAAA,EAAAA,IAA4B3W,IACrFwW,IAAiB3Y,IAAWY,EAAAA,GAAAA,eAC/B+X,GAAgBC,IAGlB,MAAMG,GAAY5W,GAAU6W,EAAAA,EAAAA,IAAmB7W,QAAWwD,EACpDT,GAAW/C,GACb8W,EAAAA,EAAAA,IAAmB9W,GACnBc,GACG,SAAQ4R,EAAatT,MAAMgT,aAC5B5O,EAEN,IAAIuT,GACA/W,EACEkU,GAAmBE,GACrB2C,IAAaC,EAAAA,EAAAA,IAAmBhX,GAAUiX,UACjCtD,GAASG,EAClBiD,IAAaG,EAAAA,EAAAA,IAAwBvD,GAASG,IACrCtJ,GAASwJ,KAClB+C,IAAaI,EAAAA,EAAAA,IAAoB3M,GAASwJ,IAG5C+C,GAAaK,EAAAA,IAGfjS,EAAAA,EAAAA,KAAU,KACHlB,EAAAA,IAILlG,SAAS+J,KAAK7J,UAAUoZ,OAAO,uBAAwBzT,KACtD,CAACA,IAEJ,MAAM0T,IAAcC,EAAAA,EAAAA,MACpBpS,EAAAA,EAAAA,KAAU,KACR,MAAMqS,EAAM7R,OAAO8R,WAAWC,EAAAA,IAO9B,MANoC,mBAAzBF,EAAI5R,iBACb4R,EAAI5R,iBAAiB,SAAU0R,IACK,mBAApBE,EAAIG,aACpBH,EAAIG,YAAYL,IAGX,KACkC,mBAA5BE,EAAI3R,oBACb2R,EAAI3R,oBAAoB,SAAUyR,IACK,mBAAvBE,EAAII,gBACpBJ,EAAII,eAAeN,OAGtB,CAACA,KAEJ,MAAMO,IAAc7J,EAAAA,EAAAA,GAAoChO,GAClD8X,IAAa9J,EAAAA,EAAAA,GAAYnQ,GACzBka,IAAkB/J,EAAAA,EAAAA,GAA2C0E,GAC7DsF,IAAoBhK,EAAAA,EAAAA,GAAYwI,KACtCrR,EAAAA,EAAAA,KAAU,KACR,GAAI+P,IAAoBtR,IAAWiU,KAAgBE,GAAiB,EAClEE,EAAAA,EAAAA,IAA4BvG,GAAqBwG,EAAAA,IACjD,MAAMC,EAAYnY,GAAUoY,EAAAA,EAAAA,GAAkBpY,QAAWwD,GV9OxD,SACL6U,EACAxa,EACA2Y,EACAO,EACAlU,EACA7C,GAEA,MAAQK,QAASiY,GAAcvY,EAASlC,EAAQmC,GAChD,IAAKsY,EACH,OAGF,MAAQvL,MAAOwL,GAAgBC,EAAAA,EAAAA,OAE7BzL,MAAO0L,EAAgBnT,OAAQoT,IAC7BC,EAAAA,EAAAA,IAAkCN,EAAWxV,IACzCkK,MAAO6L,EAAStT,OAAQuT,IAAaC,EAAAA,EAAAA,IAC3CL,EAAgBC,EAAiB3B,EAAWhK,MAAOgK,EAAWzR,QAE1DyT,GAAUR,EAAcK,GAAW,EACnCI,EAuPR,SAAsBX,GACpB,MAAMb,EAAM7R,OAAO8R,WAAWC,EAAAA,IAC9B,IAAIuB,EAAe,MAKnB,OAJIZ,IACFY,GAAgBzB,EAAI0B,QAAU,KAAQ,OAGjCD,EAAezT,EAAAA,GA9PR2T,CAAad,IAAcK,EAAkBG,GAAY,EAEvE,IACEO,IAAKC,EAASC,KAAMC,EAAUxM,MAAOyM,EAAWlU,OAAQmU,GACtDnB,EAAU5H,wBAEd,GAAI,CACFjS,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAASxB,GAAS,CAClB,MAAM6b,EA+LV,SAAiBC,EAAmBC,EAAoBR,EAAaE,EAAcvM,EAAezH,GAChG,GAAIqU,IAAcC,EAAY,CAC5B,MAAMvX,EAAOkC,KAAK8D,IAAI0E,EAAOzH,IAAWqU,EAAYC,GACpDN,IAASjX,EAAO0K,GAAS,EACzBqM,IAAQ/W,EAAOiD,GAAU,EACzByH,EAAQ1K,EACRiD,EAASjD,OACJ,GAAIsX,EAAYC,EAAY,CACjC,MAAMC,EAAW9M,EAEjBuM,KADAvM,EAAQzH,GAAUqU,EAAYC,IACbC,GAAY,OACxB,GAAID,EAAaD,EAAW,CACjC,MAAMG,EAAYxU,EAElB8T,KADA9T,EAASyH,GAAS6M,EAAaD,IACdG,GAAa,EAGhC,MAAO,CACLV,IAAAA,EAAKE,KAAAA,EAAMvM,MAAAA,EAAOzH,OAAAA,GAjNAyU,CAAQnB,EAASC,EAAUQ,EAASE,EAAUC,EAAWC,GAC3EJ,EAAUK,EAAUN,IACpBG,EAAWG,EAAUJ,KACrBE,EAAYE,EAAU3M,MACtB0M,EAAaC,EAAUpU,OAGzB,MAAM0U,EAAkBT,EAAWC,EAAY,GAAMT,EAASH,EAAU,GAClEqB,EAAkBZ,EAAUI,EAAa,GAAMT,EAAQH,EAAW,GAClEqB,EAAaV,EAAYZ,EACzBuB,EAAaV,EAAaZ,EAE1B/a,EAAQH,EAAY6Y,GAAiB8B,GAC3C7Y,EAAY3B,EAAO,CACjBsb,IAAM,GAAEJ,MACRM,KAAO,GAAEP,MACThM,MAAQ,GAAE6L,MACVtT,OAAS,GAAEuT,MACX5H,UAAY,eAAc+I,QAAqBC,iBAA8BC,MAAeC,OAE9F5Z,EAAWzC,EAAOD,GAElBE,SAAS+J,KAAK7J,UAAUC,IAAI,mBAE5Bkc,uBAAsB,KACpBrc,SAAS+J,KAAKtJ,YAAYV,GAE1Bsc,uBAAsB,KACpBtc,EAAMgC,MAAMmR,UAAY,GAuS9B,SAAoBnT,GACjBA,EAAM0C,WAA2BV,MAAMW,UAAY,UACpD3C,EAAMG,UAAU8J,OAAO,kBAAmB,UAxStCsS,CAAWvc,GAEX8J,YAAW,KACTwS,uBAAsB,KAChBrc,SAAS+J,KAAKwS,SAASxc,IACzBC,SAAS+J,KAAKyS,YAAYzc,GAE5BC,SAAS+J,KAAK7J,UAAU8J,OAAO,wBAvEd,IAyEGmQ,EAAAA,UUyKxBsC,CADkBrQ,QAAQgO,GACAta,EAAS2Y,GAAgBO,GAAYlU,GAAS7C,GAGtEkV,KAAqBtR,IAAWiU,IAAeE,OACjDE,EAAAA,EAAAA,IAA4BvG,GAAqBwG,EAAAA,IVxKhD,SAAwBra,EAA2B2Y,EAAuBxW,GAC/E,MAAM,UAAElB,EAAWuB,QAASoa,GAAY1a,EAASlC,EAAQmC,GACzD,IAAKya,EACH,OAGF,MAAMnC,EAAYva,SAAS2c,eAAe,eAAgB/b,cACxD,0EAEF,IAAK2Z,IAAcmC,EACjB,OAGF,MACErB,IAAKC,EAASC,KAAMC,EAAUxM,MAAOyM,EAAWlU,OAAQmU,GACtDnB,EAAU5H,yBAEZ0I,IAAKuB,EAAWrB,KAAMP,EAAQhM,MAAO6L,EAAStT,OAAQuT,GACpD4B,EAAQ/J,wBAEZ,IAAIsI,EAAQ2B,EACZ,IAqJF,SAA6BC,GAC3B,GAAyB,SAArBA,EAAG9a,MAAM+a,QACX,OAAO,EAGT,MAAMC,EAAOF,EAAGlK,yBACRpL,OAAQyV,GAAiBvC,EAAAA,EAAAA,MAEjC,OAAQsC,EAAK1B,KAAO2B,GAAmBD,EAAK1B,IAAM0B,EAAKxV,QAAW,EA7J7D0V,CAAoBlc,GAAY,CACnC,MAAQwG,OAAQyV,GAAiBvC,EAAAA,EAAAA,MACjCQ,EAAQ2B,EAAYtB,GAAWR,EAAWkC,EAG5C,MAAMf,EAAkBT,EAAWC,EAAY,GAAMT,EAASH,EAAU,GAClEqB,EAAkBZ,EAAUI,EAAa,GAAMT,EAAQH,EAAW,GACxE,IAAIqB,EAAaV,EAAYZ,EACzBuB,EAAaV,EAAaZ,EAE9B,MAAMoC,EACJ,CAACxc,EAAAA,GAAAA,OAA0BA,EAAAA,GAAAA,iBAAmCY,SAASxB,KACnEgB,EAA2BC,EAAW2b,IAE1C,CAAChc,EAAAA,GAAAA,MAAyBA,EAAAA,GAAAA,gBAAkCY,SAASxB,KACjEgB,EAA2BC,EAAW2b,GAGxC,CACFhc,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAASxB,KACLqc,EAAaC,EACfD,EAAaC,EACJA,EAAaD,IACtBC,EAAaD,IAIjB,MAAMgB,EAAgBnd,SAASod,uBAAuB,SAAS,GAEzDrd,EAAQod,GAAiBvd,EAAY6Y,GAAiBiE,EAAS5c,GAChEqd,GACHzb,EAAY3B,EAAO,CACjBsb,IAAM,GAAEJ,MACRM,KAAO,GAAEP,MACThM,MAAQ,GAAE6L,MACVtT,OAAS,GAAEuT,MACX5H,UAAY,eAAc+I,QAAqBC,iBAA8BC,MAAeC,OAIhGC,uBAAsB,KACpB,GAAIc,EAAe,CACjB,MAAM,IACJ9B,EADI,KAEJE,EAFI,MAGJvM,EAHI,OAIJzH,GACE4V,EAAcxK,wBAIlBjR,EAAY3B,EAAO,CACjBsd,WAAY,OACZhC,IAAM,GAAEJ,MACRM,KAAO,GAAEP,MACTsC,gBAAiB,WACjBpK,UAAY,eAAcqI,EAAOP,QAAaK,EAAMJ,iBARvCjM,EAAQ6L,MACRtT,EAASuT,KAQtB9L,MAAQ,GAAE6L,MACVtT,OAAS,GAAEuT,QAGf9a,SAAS+J,KAAK7J,UAAUC,IAAI,mBACvBgd,GAAend,SAAS+J,KAAKtJ,YAAYV,GAE9Csc,uBAAsB,KAChBc,IACFA,EAAcpb,MAAMsb,WAAa,IAGnCtd,EAAMgC,MAAMmR,UAAY,GAEpBgK,IACFnd,EAAMgC,MAAMwb,QAAU,KAGxB/a,EAAWzC,EAAOD,GAElB+J,YAAW,KACTwS,uBAAsB,KAChBrc,SAAS+J,KAAKwS,SAASxc,IACzBC,SAAS+J,KAAKyS,YAAYzc,GAE5BC,SAAS+J,KAAK7J,UAAU8J,OAAO,wBAzLd,IA2LGmQ,EAAAA,UU4DxBqD,CAAezD,GAAaE,GAAoBH,SAAerU,MAEhE,CACD0R,GAAkBtR,EAAQ/F,EAAQia,GAAY9X,EAAS6X,GAAaE,GACpEvB,GAAewB,GAAmBjB,GAAYlU,MAGhDsC,EAAAA,EAAAA,KAAU,KACR,IAAIqW,EAUJ,OARI1Y,GACFwS,IAAkB,GAElBkG,EAAQ7V,OAAOiC,YAAW,KACxB0N,IAAkB,KACjB5D,IAGE,KACD8J,GACF7V,OAAOkC,aAAa2T,MAGvB,CAAC1Y,KAEJ,MAAM2Y,GAAY,KAChBlG,IAAY,GACZpH,GAAa,GACbsH,GAAY,CAAE9F,EAAG,EAAGC,EAAG,KAGnB8L,IAAmB/Z,EAAAA,EAAAA,KAAY,KACnC4T,IAAazS,IACbqL,GAAcrL,GAAiB,EAAN,KACrBA,IACF2S,GAAY,CAAE9F,EAAG,EAAGC,EAAG,MAExB,CAAC9M,KAEE6Y,IAAkBha,EAAAA,EAAAA,KAAY,CAACia,EAAeC,GAAe,KACjE1N,GAAayN,GACC,IAAVA,GAAeC,GACjBJ,OAED,IAEGK,IAAQna,EAAAA,EAAAA,KAAY,KACxBH,IACAia,OACC,CAACja,IAEEua,IAAoBpa,EAAAA,EAAAA,KAAY,KACpCma,KACAra,EAAa,CAAEb,OAAAA,EAAQsR,SAAAA,EAAUrR,UAAAA,MAChC,CAACib,GAAOlb,EAAQsR,EAAUzQ,EAAcZ,IAErCmb,IAAgBra,EAAAA,EAAAA,KAAY,KAChC6R,EAAgB,CAAEyI,WAAYrb,EAAQ4T,WAAY,CAAC3T,KACnD4a,OACC,CAACjI,EAAiB5S,EAAQC,KAE7BsE,EAAAA,EAAAA,KAAU,IAAOvB,GAASsY,EAAAA,EAAAA,IAAsB,KAC1CpZ,GACF2Y,KAEAK,aAECtY,GAAY,CAACsY,GAAOlY,EAAQd,MAEjCqC,EAAAA,EAAAA,KAAU,KACJtC,KAAYoG,KACdkT,EAAAA,EAAAA,OAED,CAAClT,GAAOpG,MAGXsC,EAAAA,EAAAA,KAAU,KACR,GAAKvB,EAML,OAFA4U,EAAAA,EAAAA,iBAEO,KACLA,EAAAA,EAAAA,mBAED,CAAC5U,IAEJ,MAAMwY,IAAeza,EAAAA,EAAAA,KAAY,CAAC0a,EAAgBC,KAChD,IAAIC,EAAQ/H,GAAWG,QAAQ0H,GAK/B,QAJoB,IAAfC,GAAoBC,EAAQ,GAAqB,IAAdD,GAAmBC,EAAQ/H,GAAWlU,OAAS,KACrFic,GAASD,GAGJ9H,GAAW+H,KACjB,CAAC/H,KAEEgI,IAAsB7a,EAAAA,EAAAA,KAAY,KAClCiT,IAIJrB,EAAgB,CACd3S,OAAAA,EACAsR,SAAAA,EACArR,UAAWA,EAAYub,GAAavb,GAAY,QAAK2C,EACrD3F,OAAAA,MAED,CAAC+C,EAAQsR,EAAUkK,GAAcxH,GAAS/T,EAAW0S,EAAiB1V,IAEnE4e,IAAkB9a,EAAAA,EAAAA,KAAY,KAC9BkT,IAIJtB,EAAgB,CACd3S,OAAAA,EACAsR,SAAAA,EACArR,UAAWA,EAAYub,GAAavb,EAAW,QAAK2C,EACpD3F,OAAAA,MAED,CAAC+C,EAAQsR,EAAUkK,GAAcvH,GAAQhU,EAAW0S,EAAiB1V,KAExEsH,EAAAA,EAAAA,KAAU,KACR,MAAMuX,EAAiB1W,IACrB,OAAQA,EAAE5D,KACR,IAAK,OACL,IAAK,YACHoa,KACA,MAEF,IAAK,QACL,IAAK,aACHC,OAON,OAFA1e,SAAS6H,iBAAiB,UAAW8W,GAAe,GAE7C,KACL3e,SAAS8H,oBAAoB,UAAW6W,GAAe,QAK3DvX,EAAAA,EAAAA,KAAU,KACR,MAAMzF,EAAU3B,SAASY,cAA8B,sDACvD,IAAKe,EACH,OAGF,MAAMid,EAAqB1T,KAAUU,EAAAA,GAErC,OAAOiT,EAAAA,EAAAA,GAAcld,EAAS,CAE5Bmd,wBAA0B,oEAAmEF,EAAwC,GAAnB,kBAClHza,QAAS,KACFY,IAAa4G,EAAAA,IAChBoS,MAGJgB,QAASpT,EAAAA,GAAe,CAAC1D,EAAGsW,KACtBA,IAAcS,EAAAA,EAAAA,MAChBP,KACSF,IAAcS,EAAAA,EAAAA,KACvBN,KACWzW,EAAE0G,QAAW1G,EAAE0G,OAAuBvN,QAAQ,uBACzD2c,WAEAtY,MAEL,CAACsY,GAAO3G,GAAgBlM,GAAOqL,GAASxR,GAAU2Z,GAAiBD,KAEtE,MAAMQ,IAAYrb,EAAAA,EAAAA,KAAY,CAACgO,EAAWC,KACxC6F,GAAY,CAAE9F,EAAAA,EAAGC,EAAAA,MAChB,IAEGqN,IAA+Btb,EAAAA,EAAAA,KAAY,KAC3C+H,EAAAA,KAAiB4K,IAAWrL,KAC9BmM,IAAmBD,MAEpB,CAACA,GAAgBlM,GAAOqL,KAErB1S,IAAOC,EAAAA,EAAAA,KAUb,SAASqb,GAAYC,GACnB,GAAIrc,GACF,OACE,0BAAKsB,IAAKxB,EAAQqB,UAAU,wBACzB0P,GACCyE,IAAiBF,IACjBkH,EAAAA,EAAAA,IAA+BhG,EAAAA,IAAwB,IACtDnT,EAAAA,KAA4BnB,KAI9B,GAAI9C,EAAS,CAClB,MAAMmY,GAAYC,EAAAA,EAAAA,GAAkBpY,GAC9BqY,EAAYlO,QAAQgO,GAE1B,OACE,0BACE/V,IAAKvB,EACLoB,UAAY,yBAAuBoW,EAAY,aAAe,IAC9DnW,QAAS+a,IAER3I,IAAW3C,GACV4E,IAAgBH,IAAiBF,IAAkBJ,GACnD9V,IAAWod,EAAAA,EAAAA,IAA+BrG,GAAasB,IACtDpU,EAAAA,KAA4BnB,IAE9BD,IACC,mBAAC,GAAD,CACET,IAAKvB,EACLmI,IAAKuN,IAAgBH,GACrBnN,MAAOA,GACPC,WAAYsN,GACZrN,WAAYnJ,IAAWod,EAAAA,EAAAA,IAA+BrG,GAAasB,GAAW,GAC9EjV,iBAAkBA,GAClB4D,SAAU4P,GACVxN,kBAAmBxF,EACnByF,QAAS8T,EACT7T,QAASwS,KAGZ3D,GACC,mBAAC,EAAD,CACEtT,KAAMsT,EACNjW,QAAS6Z,GACTjX,SAAUqQ,MAAoBtS,IAAWoG,IACzClE,WAAYlC,KAAYoG,OAUpC,SAASoU,KACP,OAAOvc,GACL,mBAAC,EAAD,CACEsB,IAAKsQ,EAAatT,GAClBwB,OAAQ8R,EAAatT,GACrB0B,UAAQ,IAGV,mBAAC,EAAD,CACEsB,IAAKvB,EACLD,OAAQA,EACRC,UAAWA,IAKjB,OA/EAyc,EAAAA,EAAAA,IAAe1Z,EAAQpC,EAAkB+R,EAAiB,CACxD3S,OAAAA,EACAsR,SAAAA,EACArR,UAAAA,EACAhD,OAAAA,EACAsU,cAAeO,GAAeA,EAAYtT,KA2E1C,mBAACme,EAAA,EAAD,CACEne,GAAG,cACH6C,UAAWa,GAAW,SAAW,GACjCc,OAAQA,IAEP,IACC,sCACE,0BAAK3B,UAAU,oBAAoBO,IAAKZ,GAAK4b,MAAQ,WAAQha,GAC1DS,EAAAA,IACC,mBAACJ,EAAA,EAAD,CACE5B,UAAU,qBACV6B,OAAK,EACLzB,KAAK,UACL0B,MAAM,oBACNC,UAAWpC,GAAK,SAChBM,QAAS4Z,IAET,wBAAG7Z,UAAU,gBAGjB,mBAACwb,EAAA,EAAD,CAAYC,UAAW5I,GAAarK,QAAUkT,KAAM1I,IACjDoI,IAEH,mBAAC,EAAD,CACEza,UAAWwT,IAAiBF,GAC5BrT,QAASA,GACTC,SAAUA,GACV9C,QAASA,EACT+C,SAAUA,GACVC,mBAAoB8Y,GACpB7Y,UAAW+Y,GACX9Y,aAAcwY,GACd5a,SAAUA,MAGd,mBAAC,GAAD,CACEiO,QAASsG,GACTrG,OAAQlM,GACRmM,UAAWuG,GAAS7F,EACpBT,UAAWsG,GAAS5F,EACpB1B,UAAWA,GACXiB,MAAO6N,IAEP,mBAACS,EAAA,EAAD,CACExb,UAAU,kBACVyb,UAAWhJ,GACXiJ,KAAM3I,IAELkI,MAGHtI,IACA,6BACErM,KAAK,SACLtG,UAAY,mBAAkBY,KAAYoG,IAAS,WACnD,aAAYrH,GAAK,oBACjBY,IAAKZ,GAAK4b,MAAQ,WAAQha,EAC1BtB,QAASsa,MAGX3H,IACA,6BACEtM,KAAK,SACLtG,UAAY,mBAAkBY,KAAYoG,IAAS,WACnD,aAAYrH,GAAK,QACjBY,IAAKZ,GAAK4b,MAAQ,WAAQha,EAC1BtB,QAASua,KAGb,mBAAC,GAAD,CACE5O,QAAS/K,GACTgL,aAAc6N,Y,kHCxiB1B,MAmJA,IAAe5S,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MACEid,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,GAJE,cAMJC,GACEtd,EAEJ,MAAO,CACLmd,UAAAA,EACAI,UAAWF,EAAiBG,OAC5BC,cAAeL,EAAQI,OACvBE,gBAAiBN,EAAQO,SACzBL,cAAAA,MAGJ,CAAC5c,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBAAoB,kBAAmB,mBAnB3EZ,EAhJ6C,EAC/Dod,UAAAA,EACAI,UAAAA,EACAE,cAAAA,EACAC,gBAAAA,EACAJ,cAAAA,EACAra,OAAAA,EACA2a,iBAAAA,EACAC,gBAAAA,EACAC,cAAAA,MAEA,MAAOC,EAAQC,IAAazZ,EAAAA,EAAAA,IAAS,IAE/B+I,GAAWzE,EAAAA,EAAAA,IAAyB,MAEpC5H,GAAOC,EAAAA,EAAAA,MAEbsD,EAAAA,EAAAA,KAAU,KACJvB,EACGK,EAAAA,IACH2D,YAAW,KACTwS,uBAAsB,KAChBnM,EAASxD,SACXwD,EAASxD,QAAQmU,aA1BR,MAgCb3Q,EAASxD,SACXwD,EAASxD,QAAQoU,OAGnBjX,YAAW,KACT+W,EAAU,MApCU,QAuCvB,CAAC/a,IAEJ,MAAMkb,GAAUpb,EAAAA,EAAAA,KAAQ,KACtB,MAAMqa,EAAU,IACXK,GAAiB,MACjBC,GAAmB,IAGxB,IAAIU,EAAcb,GAAa,GAK/B,OAJID,IACFc,GAAcC,EAAAA,EAAAA,IAAO,CAACf,KAAkBc,MAGnCE,EAAAA,EAAAA,IAAY,IACdlB,EAAQW,QAAQtf,IACjB,MAAMkD,EAAOwb,EAAU1e,GACvB,OAAKkD,MAIA4c,EAAAA,EAAAA,IAAiB5c,EAAM6c,EAAAA,OAIvBT,IAIEU,EAAAA,GAAAA,IAAYC,EAAAA,EAAAA,GAAazd,EAAMkc,EAAU1e,QAAKoE,EAAWpE,IAAO6e,GAAgBS,QAExFZ,OAAWta,EAAWub,KACxB,CAACX,EAAeC,EAAiBP,EAAWG,EAAeS,EAAQ9c,EAAMsc,KAErEoB,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBf,EAAeK,EAAS3U,QAAQuU,IAE3Ee,GAAqB9d,EAAAA,EAAAA,KAAaqE,IACtC2Y,EAAU3Y,EAAEqG,cAAc5D,SACzB,IAGGiX,GAAelW,EAAAA,EAAAA,IAAuB,MACtCkT,GAAgBiD,EAAAA,GAAAA,GAA0BD,EAAc9b,GAAS2Y,IACjE+C,GAAeA,EAAYhf,OAAS,GACtCie,EAAiB,CAAEnf,GAAIkgB,GAAuB,IAAX/C,EAAe,EAAIA,OAEvD,oBAAoB,GAEjBqD,EACJ,0BAAK3d,UAAU,eAAeO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACtD,mBAACK,EAAA,EAAD,CACEC,OAAK,EACLC,MAAM,cACN1B,KAAK,UACL2B,UAAWpC,EAAK,SAChBM,QAASsc,GAET,wBAAGvc,UAAU,gBAEf,mBAAC4d,GAAA,EAAD,CACE1S,IAAKc,EACLxF,MAAOiW,EACPlQ,SAAUiR,EACVK,UAAWpD,EACXqD,YAAane,EAAK,gBAKxB,OACE,mBAACoe,GAAA,EAAD,CACEpc,OAAQA,EACR0F,QAASkV,EACTvc,UAAU,gBACVge,OAAQL,GAEPN,GAAeA,EAAYhf,OAC1B,mBAAC4f,GAAA,EAAD,CACEje,UAAU,4BACVke,MAAOb,EACPc,WAAYb,EACZc,gBAAiBlW,QAAQuU,GACzBvR,IAAKuS,EACLI,UAAWpD,GAEV4C,EAAYgB,KAAKlhB,GAChB,mBAACmhB,GAAA,EAAD,CACEne,IAAKhD,EACL6C,UAAU,4CACVC,QAAS,IAAMqc,EAAiB,CAAEnf,GAAAA,MAEjC4B,EAAAA,EAAAA,IAAc5B,GACb,mBAACohB,GAAA,EAAD,CAAiBC,OAAQrhB,IAAO6e,EAAgBrc,EAAK,0BAAuB4B,EAAWkd,OAAQthB,IAE/F,mBAACuhB,GAAA,EAAD,CAAe/f,OAAQxB,QAK7BkgB,IAAgBA,EAAYhf,OAC9B,wBAAG2B,UAAU,cAAb,yBAEA,mBAAC2e,GAAA,EAAD,W,eC9FR,SAASC,GAAeC,GACtB,OAAIA,EAAMC,WACD,mBAGJD,EAAME,YAIJ,uBAHE,WAMX,UAAejY,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IAAuBY,EAAAA,EAAAA,IAAKZ,EAAQ,CAAC,cACtC,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,gBAAiB,8BAFrDZ,EAlF4B,EAAGugB,QAAAA,EAASC,cAAAA,EAAeC,yBAAAA,MACzE,MAAMvf,GAAOC,EAAAA,EAAAA,KAEb,GAAKof,EAAQ3gB,OA4Db,OACE,0BAAKlB,GAAG,WACL6hB,EAAQX,KAVSc,IACpB,MAAI,SAAUA,EAjDMC,CAAAA,IACpB,MAAM,KACJC,EADI,MACEC,EADF,kBACSC,EADT,UAC4BC,GAC9BJ,EASEK,EACF9f,EADqB6f,EAChB,cACA,UADeD,EAAmB,KAGrCG,EAAuB/f,EAAZ6f,EAAiB,cAAsB,aAExD,OACE,mBAACzB,GAAA,EAAD,CACEpc,QAAM,EACN0F,QAAS4X,EACTjf,UAAU,QACVsf,MAAOA,QAEgB/d,IAAtBge,GAAmC,4BAAIE,GACxC,mBAAC7d,EAAA,EAAD,CAAQ+d,QAAM,EAAC3f,UAAU,wBAAwBC,QArB7B,KACtBif,EAAyB,CACvBG,KAAAA,IAEFJ,MAiB8ES,GAC5E,mBAAC9d,EAAA,EAAD,CAAQ+d,QAAM,EAAC3f,UAAU,wBAAwBC,QAASgf,GAAgBtf,EAAK,aAuB1EigB,CAAaT,IAlBHN,EAqBAM,EAnBjB,mBAACpB,GAAA,EAAD,CACEpc,QAAM,EACN0F,QAAS4X,EACTjf,UAAU,QACVsf,MAAOV,GAAeC,IAErBA,EAAME,aAAcc,EAAAA,GAAAA,IAAqBhB,IAASre,EAAAA,EAAAA,GAAWqe,EAAM9gB,QAAU,CAAC,QAAS,OACxF,8BACE,mBAAC6D,EAAA,EAAD,CAAQ+d,QAAM,EAAC1f,QAASgf,GAAgBtf,EAAK,UAVhCkf,IAAAA,U,eC5CvB,MAiBA,IAAe/X,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IAAuBY,EAAAA,EAAAA,IAAKZ,EAAQ,CAAC,oBACtC,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,yBAFpCZ,EAjBkC,EAAGqhB,cAAAA,EAAeC,oBAAAA,MACtE,GAAKD,EAAczhB,OAInB,OACE,0BAAKlB,GAAG,iBACL2iB,EAAczB,KAAI,EAAGtgB,QAAAA,KACpB,mBAACiiB,GAAA,EAAD,CACEjiB,SAASyC,EAAAA,EAAAA,GAAWzC,EAAS,CAAC,QAAS,KAAM,QAAS,oBACtDkiB,UAAWF,W,0BCTrB,MA0BA,IAAejZ,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,SAClB8C,GACA,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,yBAFpCZ,EA1BgC,EAAGsI,IAAAA,EAAKmZ,oBAAAA,MAC1D,MAAMvgB,GAAOC,EAAAA,EAAAA,KAEPugB,GAAazgB,EAAAA,EAAAA,KAAY,KAC7BgE,OAAO0c,KAAKrZ,GACZmZ,EAAoB,CAAEnZ,SAAKxF,MAC1B,CAAC2e,EAAqBnZ,IAEnBsZ,GAAgB3gB,EAAAA,EAAAA,KAAY,KAChCwgB,EAAoB,CAAEnZ,SAAKxF,MAC1B,CAAC2e,IAEEI,GAAeC,EAAAA,GAAAA,GAAiBxZ,GAEtC,OACE,mBAACyZ,GAAA,EAAD,CACE7e,OAAQuG,QAAQnB,GAChBM,QAASgZ,EACTf,MAAO3f,EAAK,gBACZuW,WAAW1V,EAAAA,EAAAA,GAAWb,EAAK,gBAAiB2gB,GAAe,CAAC,UAC5DG,aAAc9gB,EAAK,gBACnB+gB,eAAgBP,Q,cCVtB,MAAMQ,GAAkB,CACtB,eACA,eACA,eACA,eACA,eACA,eACA,gBA0QF,SAASC,GAAcC,EAAcC,EAAeC,EAAaC,EAAgBC,GAC/E,MAAMC,EAAc,IAAIC,KAAKN,EAAMC,EAAOC,EAAK,EAAG,EAAG,EAAG,GAClDK,EAAeJ,GAAW,IAAIG,KAAKH,EAAQK,cAAeL,EAAQM,WAAYN,EAAQO,UAAW,EAAG,EAAG,EAAG,GAC1GC,EAAeP,GAAW,IAAIE,KAAKF,EAAQI,cAAeJ,EAAQK,WAAYL,EAAQM,UAAW,EAAG,EAAG,EAAG,GAEhH,SAAIC,GAAgBN,EAAcM,OAEvBJ,GAAgBF,EAAcE,GAO3C,SAASK,GAAgBjb,GACvB,OAAOkb,OAAOlb,GAAOmb,SAAS,EAAG,KAcnC,UAAe7a,EAAAA,EAAAA,KApSqB,EAClC8a,WAAAA,EACAC,MAAAA,EACAC,aAAAA,EACAC,WAAAA,EACApgB,OAAAA,EACAqgB,eAAAA,EACAC,kBAAAA,EACAC,kBAAAA,EACA7a,QAAAA,EACA8a,SAAAA,EACAC,oBAAAA,MAEA,MAAMziB,GAAOC,EAAAA,EAAAA,KACPyiB,EAAM,IAAIlB,KACVmB,GAAsB7gB,EAAAA,EAAAA,KAAQ,IAAOmgB,EAAa,IAAIT,KAAKS,GAAc,IAAIT,MAAS,CAACS,IACvFX,EAAUY,EAAQ,IAAIV,KAAKU,QAAStgB,EACpCghB,GAAaxW,EAAAA,EAAAA,GAAYpK,IACxB6gB,EAAoBC,EAAwBC,IAA4BC,EAAAA,GAAAA,IAAQ,IAEhFC,EAAcC,IAAmB5f,EAAAA,EAAAA,IAAeqf,IAChDQ,EAAeC,IAAoB9f,EAAAA,EAAAA,IACxCwe,GAAgBa,EAAoBU,cAE/BC,EAAiBC,IAAsBjgB,EAAAA,EAAAA,IAC5Cwe,GAAgBa,EAAoBa,eAGhCC,EAAcR,EAAavB,cAC3BgC,EAAeT,EAAatB,WAC5BgC,EAAcV,EAAarB,WAEjCre,EAAAA,EAAAA,KAAU,MACHqf,GAAc5gB,GACjBkhB,EAAgBP,KAEjB,CAAC3gB,EAAQ2gB,EAAqBC,KAEjCrf,EAAAA,EAAAA,KAAU,KACJ4e,IAAiBU,GAAsBI,EAAaW,UAAYjB,EAAoBiB,YACtFV,EAAgBP,GAChBS,EAAiBtB,GAAgBa,EAAoBU,aACrDE,EAAmBzB,GAAgBa,EAAoBa,kBAExD,CAACb,EAAqBE,EAAoBV,EAAcc,IAE3D,MAAMY,EAA0BzB,GAAcqB,GAAef,EAAIhB,eAAiBgC,GAAgBhB,EAAIf,YAChGL,GAAWmC,GAAenC,EAAQI,eAAiBgC,GAAgBpC,EAAQK,WAC3EmC,EAAyB3B,GAAgBsB,GAAef,EAAIhB,eAAiBgC,GAAgBhB,EAAIf,WAEjGoC,GAAejiB,EAAAA,EAAAA,KAAQ,IA8L/B,SAA2Bof,EAAcC,GACvC,MAAM6C,EAAiB,GAEjBjjB,EAAO,IAAIygB,KACjBzgB,EAAKkjB,YAAY/C,GACjBngB,EAAKmjB,SAAS/C,GACdpgB,EAAKojB,QAAQ,GAEb,MAAMC,EAAgBrjB,EAAKsjB,UAAY,EAEvC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAeE,IACjCN,EAAKO,KAAK,GAGZ,KAAOxjB,EAAK4gB,aAAeR,GAAO,CAChC,MAAMqD,EAAWzjB,EAAK6gB,UACtBoC,EAAKO,KAAKC,GACVzjB,EAAKojB,QAAQK,EAAW,GAG1B,OAAOR,EAjNLS,CAAkBhB,EAAaC,IAC9B,CAACA,EAAcD,IAiCZiB,GAAoB3kB,EAAAA,EAAAA,KAAaqE,IACrC,MAAMyC,EAAQzC,EAAE0G,OAAOjE,MAAM8d,QAAQ,UAAW,IAChD,IAAK9d,EAAMnI,OAGT,OAFA0kB,EAAiB,SACjBhf,EAAE0G,OAAOjE,MAAQ,IAInB,MAAM+d,EAAQjiB,KAAK8D,IAAI,EAAG9D,KAAK6D,IAAIqE,OAAOhE,GAAQ,KAE5C9F,EAAO,IAAIygB,KAAKyB,EAAaW,WACnC7iB,EAAK8jB,SAASD,GACd1B,EAAgBniB,GAEhB,MAAM+jB,EAAWhD,GAAgB8C,GACjCxB,EAAiB0B,GACjB1gB,EAAE0G,OAAOjE,MAAQie,IAChB,CAAC7B,IAEE8B,GAAsBhlB,EAAAA,EAAAA,KAAaqE,IACvC,MAAMyC,EAAQzC,EAAE0G,OAAOjE,MAAM8d,QAAQ,UAAW,IAChD,IAAK9d,EAAMnI,OAGT,OAFA6kB,EAAmB,SACnBnf,EAAE0G,OAAOjE,MAAQ,IAInB,MAAMme,EAAUriB,KAAK8D,IAAI,EAAG9D,KAAK6D,IAAIqE,OAAOhE,GAAQ,KAE9C9F,EAAO,IAAIygB,KAAKyB,EAAaW,WACnC7iB,EAAKkkB,WAAWD,GAChB9B,EAAgBniB,GAEhB,MAAMmkB,EAAapD,GAAgBkD,GACnCzB,EAAmB2B,GACnB9gB,EAAE0G,OAAOjE,MAAQqe,IAChB,CAACjC,IA4BJ,OACE,mBAAC7E,GAAA,EAAD,CACEpc,OAAQA,EACR0F,QAASA,EACTrH,UAAU,iBAEV,0BAAKA,UAAU,aACb,0BAAKA,UAAU,kBACb,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAASoH,GAET,wBAAGrH,UAAU,gBAGf,6BACGL,EAAM,YAAWijB,EAAatB,WAAa,KAC3C,IACAsB,EAAavB,eAGhB,mBAACzf,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACNwK,SAAUmX,EACVxjB,QAAUwjB,OAA2CliB,EA3H/D,WACEshB,GAAiBiC,IACf,MAAMC,EAAW,IAAI5D,KAAK2D,GAG1B,OAFAC,EAASlB,SAASkB,EAASzD,WAAa,GAEjCyD,OAwHD,wBAAG/kB,UAAU,mBAGf,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACNwK,SAAUkX,EACVvjB,QAAUujB,OAA2CjiB,EA5H/D,WACEshB,GAAiBiC,IACf,MAAMC,EAAW,IAAI5D,KAAK2D,GAG1B,OAFAC,EAASlB,SAASkB,EAASzD,WAAa,GAEjCyD,OAyHD,wBAAG/kB,UAAU,iBAKnB,0BAAKA,UAAU,oBACb,0BAAKA,UAAU,iBACZ2gB,GAAgBtC,KAAK0C,GACpB,0BAAK/gB,UAAU,4BACb,+BAAOL,EAAKohB,OAGf2C,EAAarF,KAAK8F,GACjB,0BACEa,KAAK,SACLC,SAAU,EACVhlB,QAAS,KAAMilB,OArIDxkB,EAqIkByjB,OApI1CtB,GAAiBiC,IACf,MAAMC,EAAW,IAAI5D,KAAK2D,GAG1B,OAFAC,EAASjB,QAAQpjB,GAEVqkB,KALX,IAA0BrkB,GAsIdV,WAAW8D,EAAAA,EAAAA,GACT,aACA8c,GACEwC,EAAaC,EAAcc,EAAUrC,EAAeO,OAAM9gB,EAAWwgB,EAAaM,EAAMpB,GAEtF,WACGkD,EAAW,YAAc,GAChCA,IAAab,GAAe,eAG3Ba,GACD,+BAAOA,QAOhBnC,GAnGD,0BAAKhiB,UAAU,cACb,4BACEsG,KAAK,OACLtG,UAAU,eACVmlB,UAAU,UACV3e,MAAOsc,EACPvW,SAAU8X,EACVe,QAAS3C,EACT4C,OAAQ3C,IARZ,IAWE,4BACEpc,KAAK,OACLtG,UAAU,eACVmlB,UAAU,UACV3e,MAAOyc,EACP1W,SAAUmY,EACVU,QAAS3C,EACT4C,OAAQ3C,KAmFZ,0BAAK1iB,UAAU,UACb,mBAAC4B,EAAA,EAAD,CAAQ3B,QAlJd,WACEkiB,EAASS,KAkJFZ,EAqDX,SAA2BriB,EAAce,GACvC,MAAMqgB,GAAMuE,EAAAA,EAAAA,IAAmB5kB,EAAMf,EAAK4lB,MAG1C,OAAIxE,KAFUuE,EAAAA,EAAAA,IAAmB,IAAInE,KAAQxhB,EAAK4lB,MAGzC5lB,EAAK,0CAA0C6lB,EAAAA,EAAAA,IAAW9kB,IAG5Df,EAAK,sCAAuC,CAACohB,GAAKyE,EAAAA,EAAAA,IAAW9kB,KA7D1C+kB,CAAkB9lB,EAAMijB,GAAgBX,GAE3DC,GACC,mBAACtgB,EAAA,EAAD,CAAQ3B,QAASmiB,EAAqBzC,QAAM,GACzCuC,QCrOb,IAAepb,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACQ,CACLkjB,WAAYljB,EAAOgnB,8BAGvB,CAACtmB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBAAwB,0BAPRZ,EAtB+C,EACjEkD,OAAAA,EAAQigB,WAAAA,EAAY+D,qBAAAA,EAAsBC,qBAAAA,MAE1C,MAAMC,GAAmBnmB,EAAAA,EAAAA,KAAagB,IACpCilB,EAAqB,CAAEG,UAAWplB,EAAKqlB,UAAY,MACnDH,MACC,CAACA,EAAsBD,IAEpBhmB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC,GAAD,CACE+B,OAAQA,EACRigB,WAAYA,EACZG,YAAU,EACVE,kBAAmBtiB,EAAK,cACxB0H,QAASue,EACTzD,SAAU0D,QC2EhB,IAAe/e,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUX,QAAAA,EAASioB,WAAAA,MAClB,MAAM,SAAE/V,IAAagW,EAAAA,EAAAA,IAAyBvnB,IAAW,IACnD,gBAAEwnB,GAAqBjW,IAAYkW,EAAAA,EAAAA,IAA4BznB,EAAQX,EAASkS,IAAc,GAC9F5P,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQX,EAAQY,QAQxC,MAAO,CACLunB,iBAAkBF,GAAcE,EAChCE,YATkB/lB,IAAQtB,EAAAA,EAAAA,IAAcsB,EAAKlD,KAC3CkpB,EAAAA,EAAAA,KAAuBrnB,EAAAA,EAAAA,IAAWN,GAAQ4nB,EAAAA,EAAAA,IAAqBjmB,UAC/DkB,EAQFglB,6BANmClmB,IAAQmmB,EAAAA,EAAAA,IAAiBnmB,KAAU6lB,EAOtEO,iBANuBpmB,IAAQqmB,EAAAA,EAAAA,IAAiBrmB,OASpD,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBAAkB,6BApBFZ,EAnEkD,EACpEkD,OAAAA,EACAqkB,WAAAA,EACAjoB,QAAAA,EACA4oB,MAAAA,EACAT,gBAAAA,EACAE,YAAAA,EACAG,6BAAAA,EACAE,iBAAAA,EACApf,QAAAA,EACAuf,eAAAA,EACAC,wBAAAA,MAEA,MAAMC,GAA4BpnB,EAAAA,EAAAA,KAAY,KAC5C,MAAM6S,EAAaoU,GAASA,EAAMI,SAC9BJ,EAAMI,SAAS1I,KAAI,EAAGlhB,GAAAA,KAASA,IAC/B,CAACY,EAAQZ,IACbypB,EAAe,CAAErU,WAAAA,EAAYyU,oBAAoB,IACjD3f,MACC,CAACuf,EAAgB7oB,EAAQZ,GAAIkK,EAASsf,IAEnCM,GAA6BvnB,EAAAA,EAAAA,KAAY,KAC7C,MAAM6S,EAAaoU,GAASA,EAAMI,SAC9BJ,EAAMI,SAAS1I,KAAI,EAAGlhB,GAAAA,KAASA,IAC/B,CAACY,EAAQZ,IACT6oB,EACFa,EAAwB,CAAEtU,WAAAA,IAE1BqU,EAAe,CACbrU,WAAAA,EACAyU,oBAAoB,IAGxB3f,MACC,CAACsf,EAAO5oB,EAAQZ,GAAI6oB,EAAY3e,EAASwf,EAAyBD,IAE/DjnB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACme,GAAA,EAAD,CACEpc,OAAQA,EACR0F,QAASA,EACT6f,QAASvlB,IAAWukB,EAAkBe,OAA6B1lB,EACnEvB,UAAU,SACVsf,MAAO3f,EAAK,8BAEZ,4BAAIA,EAAK,kCACR4mB,GACC,4BAAI5mB,EAAK,8BAA+B,EAAG,MAE5C8mB,GACC,4BAAI9mB,EAAK,+BAAgC,EAAG,MAE7CumB,GACC,mBAACtkB,EAAA,EAAD,CAAQE,MAAM,SAAS9B,UAAU,wBAAwB2f,QAAM,EAAC1f,QAAS6mB,GACtEV,IAAe5lB,EAAAA,EAAAA,GAAWb,EAAK,iCAAkCymB,KAChEA,GAAezmB,EAAK,2CAG1B,mBAACiC,EAAA,EAAD,CAAQE,MAAM,SAAS9B,UAAU,wBAAwB2f,QAAM,EAAC1f,QAASgnB,GACtEtnB,EAAKumB,EAAkB,gCAAkC,WAE5D,mBAACtkB,EAAA,EAAD,CAAQ5B,UAAU,wBAAwB2f,QAAM,EAAC1f,QAASoH,GAAU1H,EAAK,gBCJ/E,IAAemH,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAMwoB,GAAgBpoB,EAAAA,EAAAA,IAAcJ,GAC9ByoB,GAAiBC,EAAAA,EAAAA,IAAqB3oB,EAAQC,GAC9C0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAC1B6gB,IAAcnf,IAAQinB,EAAAA,EAAAA,IAAcjnB,GACpCknB,IAAYlnB,IAAQmmB,EAAAA,EAAAA,IAAiBnmB,GACrCmnB,IAAiBnnB,IAAQqmB,EAAAA,EAAAA,IAAiBrmB,GAMhD,MAAO,CACL8mB,cAAAA,EACAC,eAAAA,EACA5H,UAAAA,EACA+H,QAAAA,EACAC,aAAAA,EACAC,aAXoBN,IAAkBC,GAAmBI,GAAgBD,EAYzEnB,YAXkB/lB,IAAQtB,EAAAA,EAAAA,IAAcsB,EAAKlD,KAC3CkpB,EAAAA,EAAAA,KAAuBrnB,EAAAA,EAAAA,IAAWN,GAAQ4nB,EAAAA,EAAAA,IAAqBjmB,UAC/DkB,MAYN,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,gBAvBpCZ,EA/D+C,EACjEkD,OAAAA,EACA/C,UAAAA,EACAD,OAAAA,EACA6gB,UAAAA,EACA+H,QAAAA,EACAC,aAAAA,EACAC,aAAAA,EACArB,YAAAA,EACA/e,QAAAA,EACAqgB,WAAAA,MAEA,MAAMC,GAAyBjoB,EAAAA,EAAAA,KAAY,KACzCgoB,EAAW,CACT/oB,OAAAA,EAAQC,UAAAA,EAAWgpB,SAAS,IAE9BvgB,MACC,CAACqgB,EAAY/oB,EAAQC,EAAWyI,IAE7BwgB,GAAmBnoB,EAAAA,EAAAA,KAAY,KACnCgoB,EAAW,CACT/oB,OAAAA,EAAQC,UAAAA,EAAWgpB,SAAS,EAAOE,WAAW,EAAMC,UAAU,IAEhE1gB,MACC,CAAC1I,EAAQC,EAAWyI,EAASqgB,IAE1B/nB,GAAOC,EAAAA,EAAAA,KAcb,OACE,mBAACme,GAAA,EAAD,CACEpc,OAAQA,EACR0F,QAASA,EACTrH,UAAU,MACVsf,MAAO3f,EAAK,yBAEZ,4BAjBOA,EADL6f,EACU,yBAGV+H,GAAWC,EACD,kBAGF,wBAWV,mBAAC5lB,EAAA,EAAD,CAAQ5B,UAAU,wBAAwB2f,QAAM,EAAC1f,QAAS4nB,GACvDloB,EAAK,cAEP8nB,GACC,mBAAC7lB,EAAA,EAAD,CAAQ5B,UAAU,wBAAwB2f,QAAM,EAAC1f,QAAS0nB,GACvDvB,GACG5lB,EAAAA,EAAAA,GAAWb,EAAK,8BAA+BymB,IAC/CzmB,EAAK,qDAGb,mBAACiC,EAAA,EAAD,CAAQ5B,UAAU,wBAAwB2f,QAAM,EAAC1f,QAASoH,GAAU1H,EAAK,gBC3D/E,IAAemH,EAAAA,EAAAA,KAxB6B,EAC1CnF,OAAAA,EACAqmB,oBAAAA,EAAsB,EACtB3gB,QAAAA,EACA4gB,QAAAA,MAEA,MAAMtoB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACme,GAAA,EAAD,CACEpc,OAAQA,EACR0F,QAASA,EACTrH,UAAU,YACVsf,MAAO3f,EAAK,+BAEZ,4BAAIA,EAAK,oCAAqCqoB,EAAqB,MACnE,mBAACpmB,EAAA,EAAD,CAAQ5B,UAAU,wBAAwB2f,QAAM,EAAC1f,QAASgoB,GACvDtoB,EAAK,gBAER,mBAACiC,EAAA,EAAD,CAAQ5B,UAAU,wBAAwB2f,QAAM,EAAC1f,QAASoH,GAAU1H,EAAK,e,cCK/E,MAyEA,IAAemH,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUsnB,WAAAA,MACT,MAAQzT,WAAY2V,GAAuBxpB,EAAOypB,kBAAoB,IAChE,gBAAEjC,IAAoBkC,EAAAA,EAAAA,IAAgC1pB,GACtD2B,GAAOgoB,EAAAA,EAAAA,IAAkB3pB,GAQ/B,MAAO,CACLwpB,mBAAAA,EACAhC,iBAAkBF,GAAcE,EAChCE,YAVkB/lB,IAAQtB,EAAAA,EAAAA,IAAcsB,EAAKlD,KAC3CkpB,EAAAA,EAAAA,KAAuBrnB,EAAAA,EAAAA,IAAWN,GAAQ4nB,EAAAA,EAAAA,IAAqBjmB,UAC/DkB,EASFglB,6BAPmClmB,IAAQmmB,EAAAA,EAAAA,IAAiBnmB,KAAU6lB,EAQtEO,iBAPuBpmB,IAAQqmB,EAAAA,EAAAA,IAAiBrmB,OAUpD,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBACA,0BACA,2BAvBgBZ,EAzE0D,EAC5EkD,OAAAA,EACAqkB,WAAAA,EACAkC,mBAAAA,EACAhC,gBAAAA,EACAE,YAAAA,EACAG,6BAAAA,EACAE,iBAAAA,EACApf,QAAAA,EACAuf,eAAAA,EACAC,wBAAAA,EACAyB,sBAAAA,MAEA,MAAM/F,GAAaxW,EAAAA,EAAAA,GAAYpK,GAEzBmlB,GAA4BpnB,EAAAA,EAAAA,KAAY,KAC5C2H,IACAuf,EAAe,CAAErU,WAAY2V,EAAoBlB,oBAAoB,MACpE,CAACJ,EAAgBsB,EAAoB7gB,IAElC4f,GAA6BvnB,EAAAA,EAAAA,KAAY,KACzCsmB,EACFa,EAAwB,CAAEtU,WAAY2V,IAEtCtB,EAAe,CAAErU,WAAY2V,EAAoBlB,oBAAoB,IAGvE3f,MACC,CAAC2e,EAAY3e,EAASwf,EAAyBqB,EAAoBtB,IAEhEjnB,GAAOC,EAAAA,EAAAA,KASb,IANAsD,EAAAA,EAAAA,KAAU,MACHvB,GAAU4gB,GACb+F,MAED,CAACA,EAAuB3mB,EAAQ4gB,IAE9B2F,EAIL,OACE,mBAACnK,GAAA,EAAD,CACEpc,OAAQA,EACR0F,QAASA,EACT6f,QAAShB,OAAkB3kB,EAAY0lB,EACvCjnB,UAAU,SACVsf,MAAO3f,EAAK,oCAEZ,4BAAIA,EAAK,gCACR4mB,GACC,2GAEDE,GACC,gFAEDP,GACC,mBAACtkB,EAAA,EAAD,CAAQE,MAAM,SAAS9B,UAAU,wBAAwB2f,QAAM,EAAC1f,QAAS6mB,GACtEV,GACG5lB,EAAAA,EAAAA,GAAWb,EAAK,6BAA8BymB,IAC9CzmB,EAAK,2CAGb,mBAACiC,EAAA,EAAD,CAAQE,MAAM,SAAS9B,UAAU,wBAAwB2f,QAAM,EAAC1f,QAASgnB,GACtEtnB,EAAKumB,EAAkB,gCAAkC,WAE5D,mBAACtkB,EAAA,EAAD,CAAQ5B,UAAU,wBAAwB2f,QAAM,EAAC1f,QAASoH,GAAU1H,EAAK,gB,eChF/E,MAkEA,IAAemH,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,SAClB8C,GAAW,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAC9D,iBAAkB,2BAFFZ,EAlEqC,EACvDkD,OAAAA,EACA4Q,WAAAA,EACAgW,eAAAA,EACAD,sBAAAA,EACAjhB,QAAAA,MAEA,MAAOmhB,EAAgBC,IAAqBxlB,EAAAA,EAAAA,IAA0B,SAC/DylB,EAAaC,IAAkB1lB,EAAAA,EAAAA,IAAS,IAEzC2lB,EAAe,KACnBL,EAAe,CAAEhW,WAAAA,EAAYsW,OAAQL,EAAgBE,YAAAA,IACrDJ,IACAjhB,KAGIyhB,GAAqBppB,EAAAA,EAAAA,KAAa8G,IACtCiiB,EAAkBjiB,KACjB,IAEGuiB,GAA0BrpB,EAAAA,EAAAA,KAAaqE,IAC3C4kB,EAAe5kB,EAAE0G,OAAOjE,SACvB,IAEG7G,GAAOC,EAAAA,EAAAA,KAEPopB,EAA8D,CAClE,CAAExiB,MAAO,OAAQyiB,MAAOtpB,EAAK,2BAC7B,CAAE6G,MAAO,WAAYyiB,MAAOtpB,EAAK,+BACjC,CAAE6G,MAAO,cAAeyiB,MAAOtpB,EAAK,kCACpC,CAAE6G,MAAO,aAAcyiB,MAAOtpB,EAAK,kCACnC,CAAE6G,MAAO,YAAayiB,MAAOtpB,EAAK,+BAClC,CAAE6G,MAAO,QAASyiB,MAAOtpB,EAAK,6BAGhC,GAAK4S,EAIL,OACE,mBAACwL,GAAA,EAAD,CACEpc,OAAQA,EACR0F,QAASA,EACT6f,QAASvlB,EAASinB,OAAernB,EACjCvB,UAAU,SACVsf,MAAO3f,EAAK,6BAEZ,mBAACupB,GAAA,EAAD,CACExN,KAAK,iBACLyN,QAASH,EACTzc,SAAUuc,EACVM,SAAUZ,IAEZ,mBAAC5K,GAAA,EAAD,CACEqL,MAAOtpB,EAAK,iCACZ6G,MAAOkiB,EACPnc,SAAUwc,IAEZ,mBAACnnB,EAAA,EAAD,CAAQE,MAAM,SAAS9B,UAAU,wBAAwB2f,QAAM,EAAC1f,QAAS2oB,GACtEjpB,EAAK,sBAER,mBAACiC,EAAA,EAAD,CAAQ5B,UAAU,wBAAwB2f,QAAM,EAAC1f,QAASoH,GAAU1H,EAAK,gBC4D/E,IAAemH,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAQ4H,KAAM+iB,IAAoBpD,EAAAA,EAAAA,IAAyBvnB,IAAW,IAChE,UAAE4qB,IAAclB,EAAAA,EAAAA,IAAgC1pB,GAChD6qB,GAAYC,EAAAA,EAAAA,IAAgC9qB,IAC1C6T,WAAY2V,GAAuBxpB,EAAOypB,kBAAoB,GAEtE,MAAO,CACLnC,WAAgC,cAApBqD,EACZI,uBAAuBC,EAAAA,EAAAA,IAA4BhrB,GACnDirB,kBAAmBL,EACnBM,kBAAmBL,EACnBrB,mBAAAA,MAGJ,CAAC9oB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,wBAAyB,wCAf7DZ,EA1GoD,EACtEorB,QAAAA,EACA3O,SAAAA,EACAmO,gBAAAA,EACArD,WAAAA,EACAyD,sBAAAA,EACAE,kBAAAA,EACAC,kBAAAA,EACA1B,mBAAAA,EACAI,sBAAAA,EACAwB,mCAAAA,MAEA,MAAOC,EAAmBC,EAAiBC,IAAoBtH,EAAAA,GAAAA,MACxDuH,EAAmBC,EAAiBC,IAAoBzH,EAAAA,GAAAA,MAE/Dzf,EAAAA,EAAAA,KAAU,KACDgY,GAAa6O,GAAsBG,OAMtC3oB,GALA8oB,EAAAA,GAAAA,GAAyB,CACzBC,YAAaN,EACbO,SAAUP,EACVQ,MAAOlC,KAGV,CAACpN,EAAU6O,EAAmBG,EAAmBF,EAAiB1B,IAErE,MAAMmC,GAA4B1e,EAAAA,EAAAA,GAAY0d,QAAyBloB,GAAW,GAC5EmpB,EAAiCxP,EAAWuO,EAAwBgB,EAEpE9qB,GAAOC,EAAAA,EAAAA,KAEP+qB,EAAyBhrB,EAAK,kCAAmC+qB,GAEjE1qB,GAAY8D,EAAAA,EAAAA,GAChB,uBACA+lB,GAAW,gBACX3O,GAAY,SAGd,OACE,0BAAKlb,UAAWA,GACd,0BAAKA,UAAU,8BACb,mBAAC4B,EAAA,EAAD,CACEE,MAAM,cACND,OAAK,EACL5B,QAASqoB,EACTvmB,UAAU,oBAEV,wBAAG/B,UAAU,gBAEf,2BAAMA,UAAU,6BAA6Bsf,MAAOqL,GACjDA,KAGAlB,GACD,0BAAKzpB,UAAU,gCACQ,cAApBqpB,GACC,mBAACjnB,EAAA,EAAD,CACEC,KAAK,UACLN,UAAU,mBACV9B,QAAS6pB,GAET,2BAAM9pB,UAAU,aACbL,EAAK,aAIXiqB,GACC,mBAACxnB,EAAA,EAAD,CACEC,KAAK,OACLpC,QAASkqB,EACT7d,UAAWsd,EACX7nB,UAAWpC,EAAK,gCAEhB,2BAAMK,UAAU,aACbL,EAAK,YAIZ,mBAACyC,EAAA,EAAD,CACEwoB,aAAW,EACXvoB,KAAK,SACLpC,QAAS+pB,EACT1d,UAAWqd,EACX5nB,UAAWpC,EAAK,iCAEhB,2BAAMK,UAAU,aACbL,EAAK,cAMhB,mBAAC,GAAD,CACEgC,OAAQooB,EACR/D,WAAYA,EACZ3e,QAAS4iB,IAEX,mBAAC,GAAD,CACEtoB,OAAQuoB,EACR7iB,QAAS+iB,EACT7X,WAAY2V,S,oCC5IpB,SACE2C,IAGA,MAAMC,GAAYvjB,EAAAA,EAAAA,IAAuB,MAEnCkT,GAAgB/a,EAAAA,EAAAA,KAAaqE,IACnB,UAAVA,EAAE5D,KACY2qB,EAAUtiB,UAAY1M,SAASivB,eAG/CF,MAED,CAACA,IAQJ,OANA3nB,EAAAA,EAAAA,KAAU,KACRQ,OAAOC,iBAAiB,UAAW8W,GAAe,GAE3C,IAAM/W,OAAOE,oBAAoB,UAAW6W,KAClD,CAACA,IAEGqQ,G,cCUT,MAkDA,IAAehkB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAC1BqsB,EAAoB3qB,IAAQimB,EAAAA,EAAAA,IAAqBjmB,GAOvD,MAAO,CACLA,KAAAA,EACA4qB,gBARsBD,GAAoBhsB,EAAAA,EAAAA,IAAWN,EAAQssB,QAAqBzpB,EASlF2pB,UAReC,EAAAA,EAAAA,IAAmBzsB,EAAQC,GAS1CysB,QARc/qB,GACZgrB,EAAAA,EAAAA,IAAkBhrB,GAAMirB,EAAAA,EAAAA,IAAqB5sB,IAAS6sB,EAAAA,EAAAA,IAAuB7sB,SAC7E6C,KARY9C,EAlDoC,EACtDE,OAAAA,EACA0B,KAAAA,EACA4qB,gBAAAA,EACAC,SAAAA,EACAE,QAAAA,EACAI,aAAAA,EACAvrB,QAAAA,MAEA,MAAO8pB,EAAmBC,EAAiBC,IAAoBtH,EAAAA,GAAAA,KAEzD8I,GAAiBC,EAAAA,GAAAA,GAAsB,CAC3CrrB,KAAAA,EACA4qB,gBAAAA,EACAC,SAAAA,EACAE,QAAAA,EACAO,aAAc3B,IAGV4B,EAAc,KAClB3rB,EAAQtB,IAGJmsB,EAAYe,GAAmBD,GAErC,GAAKvrB,EAIL,OACE,mBAACie,GAAA,EAAD,CACEte,UAAU,oCACVC,QAAS2rB,EACTH,eAAgBA,EAChBX,UAAWA,IAEV/rB,EAAAA,EAAAA,IAAcJ,GACb,mBAAC4f,GAAA,EAAD,CAAiBE,OAAQ9f,EAAQ6sB,aAAcA,EAAcM,WAAW,UAExE,mBAACpN,GAAA,EAAD,CAAe/f,OAAQA,EAAQ6sB,aAAcA,EAAcM,WAAW,UAExE,mBAACC,GAAA,EAAD,CACEpqB,OAAQooB,EACR1iB,QAAS4iB,EACT5pB,KAAMA,S,eC1Cd,MAGM2rB,IAAevoB,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAO,GA6EnD,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAQwtB,QAASC,GAAeztB,EAAO0tB,SACjCC,EAAY3tB,EAAO4tB,MAAM1Q,MACzB,qBAAE2Q,GAAyB7tB,EAAO8tB,aAExC,MAAO,CACLL,WAAAA,EACAE,UAAAA,EACAE,qBAAAA,MAGJ,CAACntB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,eACA,kBACA,WACA,yBACA,6BAjBgBZ,EA3E8C,EAChE0tB,WAAAA,EAAYE,UAAAA,EAAWE,qBAAAA,EACvBE,QAAAA,EAASC,aAAAA,EAAcC,gBAAAA,EAAiBC,SAAAA,EACxCC,uBAAAA,EAAwBC,wBAAAA,MAGxB,MAAMC,GAAcxlB,EAAAA,EAAAA,IAAuB,OAI3CrE,EAAAA,EAAAA,KAAU,KACR8oB,IAAa,KACXU,IAEAC,SAED,CAACD,EAAcC,KAElBK,EAAAA,GAAAA,GAAoBD,EAAYvkB,SAAU2jB,GAE1C,MAAMP,GAAclsB,EAAAA,EAAAA,KACjBvC,IACCyvB,EAAS,CAAEzvB,GAAAA,EAAI8vB,sBAAsB,IACrCR,IACA9mB,YAAW,KACTknB,EAAuB,CAAE1vB,GAAAA,MA9BD,OAiC5B,CAACyvB,EAAUC,EAAwBJ,IAG/B9sB,GAAOC,EAAAA,EAAAA,KAEb,OACE,0BAAKI,UAAU,gCACZmsB,GACC,0BAAKnsB,UAAU,oBAAoBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAC3D,0BAAK2J,IAAK6hB,EAAa/sB,UAAU,0BAC9BmsB,EAAW9N,KAAKI,GACf,0BAAKze,UAAU,gBAAgBC,QAAS,IAAM2rB,EAAYnN,GAASle,IAAKZ,EAAK4b,MAAQ,WAAQha,GAC3F,mBAACrB,EAAA,EAAD,CAAQI,KAAM+rB,EAAU5N,KACxB,0BAAKze,UAAU,kBAAiBQ,EAAAA,EAAAA,IAAW6lB,EAAAA,EAAAA,IAAuBgG,EAAU5N,KA7C/E,WAmDN8N,GACC,0BAAKvsB,UAAU,uBACb,yBAAIA,UAAU,2CAA2CO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAChF5B,EAAK,UAEN,mBAACiC,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACNC,UAAU,qBACV9B,QAAS6sB,EACTvR,MAAO5b,EAAK4b,OAEZ,wBAAGvb,UAAU,iBAGhBusB,EAAqBlO,KAAKlhB,GACzB,mBAAC,GAAD,CACEwB,OAAQxB,EACR8C,QAAS2rB,Y,0BCsBvB,UAAe9kB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAChC,IAAK0B,EACH,MAAO,GAGT,MAAM2qB,GAAoB1E,EAAAA,EAAAA,IAAqBjmB,GAE/C,MAAO,CACLA,KAAAA,EACA6sB,aAAcxuB,EAAOwuB,gBACjBlC,GAAqB,CAAEC,iBAAiBjsB,EAAAA,EAAAA,IAAWN,EAAQssB,QAGnE,CAAC5rB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAhBgBZ,EA9E2C,EAC7DV,QAAAA,EACAovB,YAAAA,EACAxuB,OAAAA,EACA0B,KAAAA,EACA4qB,gBAAAA,EACAzrB,aAAAA,EACA0tB,aAAAA,MAEA,MAAME,GAAiB1Y,EAAAA,EAAAA,IAA4B3W,GAC7CsvB,GAAevZ,EAAAA,EAAAA,IAASxS,EAAAA,EAAAA,IAAoBvD,EAAS,UACrDuvB,EAAeplB,SAAQqlB,EAAAA,EAAAA,IAAqBxvB,IAE5C6tB,GAAclsB,EAAAA,EAAAA,KAAY,KAC9BF,EAAa,CAAEb,OAAAA,EAAQC,UAAWb,EAAQZ,OACzC,CAACwB,EAAQa,EAAczB,EAAQZ,KAE5BwC,GAAOC,EAAAA,EAAAA,KAEPkrB,EAAYe,GAAmBD,GAErC,GAAKvrB,EAIL,OACE,mBAACie,GAAA,EAAD,CACEte,UAAU,kCACV0G,QAAS1E,EAAAA,GACT/B,QAAS2rB,EACTd,UAAWA,GAEX,mBAAC5qB,EAAA,EAAD,CACEG,KAAMA,EACNC,KAAM2qB,EACNuC,kBAAgB,EAChBC,gBAAiBxC,GAAmBA,EAAgByC,OACpDR,aAAcA,IAEhB,0BAAKltB,UAAU,QACb,0BAAKA,UAAU,YACb,0BAAKA,UAAU,SACb,yBAAIO,IAAI,SAAQC,EAAAA,EAAAA,IAAW4c,EAAAA,EAAAA,GAAazd,EAAMU,EAAM4qB,KACnD5qB,EAAKstB,YAAc,mBAACC,GAAA,EAAD,OAEtB,0BAAK5tB,UAAU,gBACb,mBAAC6tB,GAAA,EAAD,CAAM7tB,UAAU,SACb8tB,EAAAA,EAAAA,IAAoBnuB,EAAqB,IAAf5B,EAAQ2C,SAKzC,0BAAKV,UAAU,YACb,0BAAKA,UAAU,UAAUO,IAAI,QASvC,SACEZ,EAAc5B,EAAqB4R,EAAkBwd,EAAsBG,GAE3E,OAAK3d,EAKH,2BAAM3P,UAAU,iBACd,0BAAK5D,IAAKuT,EAASG,IAAI,GAAG9P,UAAWstB,EAAe,aAAU/rB,KAC7DqQ,EAAAA,EAAAA,IAAgB7T,IAAY,wBAAGiC,UAAU,eACzCQ,EAAAA,EAAAA,IAAWutB,EAAAA,EAAAA,IAAsBpuB,EAAM5B,GAAS,GAAO,CAAC,QAAS,aAAc,CAAEiwB,UAAWb,MAPxF3sB,EAAAA,EAAAA,IAAWutB,EAAAA,EAAAA,IAAsBpuB,EAAM5B,IAZrCkwB,CAAqBtuB,EAAM5B,EAASsvB,GAAgBD,EAAgBD,EAAaG,WChD9F,IAAexmB,EAAAA,EAAAA,KA5CmB,EAChConB,WAAAA,EAAYrD,SAAAA,MAEZ,MAAMsD,GAAc1sB,EAAAA,EAAAA,KAAQ,IAmB9B,SAAgCysB,GAE9B,GADgBA,EAAWE,MAAM,0BACpB,CACX,MAAM1tB,EAAO,IAAIygB,KAAK+M,GACtB,MAAO,CAAC,CAAExtB,KAAAA,EAAMkC,MAAM0iB,EAAAA,EAAAA,IAAmB5kB,KAG3C,MAAM2tB,EAAa,GACb/K,EAAc,IAAInC,KAClBiC,EAAcE,EAAYjC,cAC1BiN,EAAahL,EAAYC,UAAa,IAAIpC,KAAM,GAAEiC,KAAe8K,KAAe3K,UAClFH,EACAA,EAAc,EAElB,IAAK,IAAIa,EAAI,EAAGA,EA3CO,EA2CeA,IAAK,CACzC,MAAMvjB,EAAO,IAAIygB,KAAM,GAAEmN,EAAarK,KAAKiK,KAC3CG,EAAWnK,KAAK,CAAExjB,KAAAA,EAAMkC,MAAM0iB,EAAAA,EAAAA,IAAmB5kB,KAGnD,OAAO2tB,EAtC2BE,CAAuBL,IAAa,CAACA,IACvE,OACE,8BAASluB,UAAU,6CAChBmuB,EAAY9P,KAAI,EAAG3d,KAAAA,EAAMkC,KAAAA,KAEtB,0BACE3C,QAAS,IAAM4qB,EAASnqB,GACxBV,UAAU,YACVG,IAAKyC,GAEL,wBAAG5C,UAAU,kBACb,+BAAO4C,U,0BC2BnB,MAGMopB,IAAevoB,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAK,GA+NjD,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAQkd,KAAMC,GAAcnd,EAAOid,OAC3BC,KAAMyQ,GAAc3tB,EAAO4tB,OAE3BJ,QAASsC,GAAoB9vB,EAAO+vB,aAAe,GAE3D,IAAKD,EACH,MAAO,CACL3S,UAAAA,EACAwQ,UAAAA,GAIJ,MAAM,cACJrQ,EADI,SACW+K,EADX,aACqBmG,GACvBxuB,GACE,eACJgwB,EADI,cACYC,EADZ,aAC2BC,EAD3B,cACyCxd,GAC3C1S,EAAO8tB,cACH3P,QAASgS,EAAe3C,QAAS4C,GAAkBH,GAAiB,IACpE9R,QAASkS,EAAc7C,QAAS8C,GAAiBJ,GAAgB,IACjEK,SAAUC,GAA2BnI,GACvC,SAAE5V,GAAcC,GAAiBA,EAAcxO,MAAS,GAE9D,MAAO,CACLoZ,cAAAA,EACAwS,gBAAAA,EACAO,aAAAA,EACAC,aAAAA,EACAH,cAAAA,EACAC,cAAAA,EACA3d,SAAAA,EACA+d,uBAAAA,EACArT,UAAAA,EACAwQ,UAAAA,EACAqC,eAAAA,EACAxB,aAAAA,MAGJ,CAAC9tB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,WACA,yBACA,uBACA,2BA5CgBZ,EA7N2C,EAC7D0uB,YAAAA,EAAae,WAAAA,EAAYiB,gBAAAA,EAAiBnT,cAAAA,EAC1CwS,gBAAAA,EAAiBO,aAAAA,EAAcC,aAAAA,EAAcH,cAAAA,EAAeC,cAAAA,EAC5D3d,SAAAA,EAAU+d,uBAAAA,EAAwBrT,UAAAA,EAAWwQ,UAAAA,EAAWqC,eAAAA,EAAgBxB,aAAAA,EACxET,QAAAA,EAAS2C,mBAAAA,EAAoBxC,SAAAA,EAAUC,uBAAAA,EAAwBwC,qBAAAA,EAAsBC,sBAAAA,MAErF,MAAM3vB,GAAOC,EAAAA,EAAAA,MAEN2vB,EAAqBC,IAA0BvsB,EAAAA,EAAAA,KAAkB,IACjEwsB,EAAsBC,IAA2BzsB,EAAAA,EAAAA,KAAkB,GAEpE0sB,GAAiBjwB,EAAAA,EAAAA,KAAY,EAAG2a,UAAAA,MAChC6S,GAAgB7S,IAAcuV,EAAAA,GAAAA,WAChC5D,IAAa,KACXqD,EAAqB,CACnB/oB,KAAM,OACNupB,MAAO1C,SAIZ,CAACD,EAAcmC,EAAsBlC,IAElC2C,GAAkBpwB,EAAAA,EAAAA,KACrBvC,IACCyvB,EAAS,CAAEzvB,GAAAA,EAAI8vB,sBAAsB,IAEjC9vB,IAAO6e,GACT6Q,EAAuB,CAAE1vB,GAAAA,IAGtB6E,EAAAA,IACHyqB,MAGJ,CAACzQ,EAAe4Q,EAAUC,EAAwBJ,IAG9CsD,GAAwBrwB,EAAAA,EAAAA,KAAavC,IACzCmyB,EAAsB,CAAEnyB,GAAAA,MACvB,CAACmyB,IAEEV,GAAentB,EAAAA,EAAAA,KAAQ,KAC3B,IAAK0rB,GAAgBA,EAAYjZ,WAAW,MAAQiZ,EAAY9uB,OAAS,EACvE,OAAO2xB,GAAAA,EAGT,MAAMC,EAAkBzB,EACpBA,EAAgB/R,QAAQtf,IACxB,MAAMmD,EAAO+rB,EAAUlvB,GACvB,IAAKmD,EACH,OAAO,EAGT,MAAM4vB,GAAWC,EAAAA,EAAAA,IAAgB7vB,GACjC,OAAQ4vB,IAAY/S,EAAAA,GAAAA,GAAY+S,EAAU/C,KAAiBhQ,EAAAA,GAAAA,GAAY7c,EAAK8vB,SAAUjD,MAEtF,GAEJ,MAAO,IACDnR,IAAiBmB,EAAAA,GAAAA,GAAYxd,EAAK,iBAAkBwtB,GAAe,CAACnR,GAAiB,OACtFgB,EAAAA,EAAAA,KAAYD,EAAAA,EAAAA,IAAO,IACjBkT,KACClB,GAAgB,MAChBC,GAAgB,KAClBnT,MAEL,CACDsR,EAAaqB,EAAiBxS,EAAerc,EAAMovB,EAAcC,EAAcnT,EAAWwQ,IAGtFsC,GAAgBltB,EAAAA,EAAAA,KAAQ,KACvB0rB,GAAeA,EAAY9uB,OA5EO,IA4EyCwwB,IAAkBC,EACzFkB,GAAAA,GAGFhT,EAAAA,EAAAA,KAAYD,EAAAA,EAAAA,IAAO,IAAI8R,KAAkBC,IAC9CjT,GAAW,IACZ,CAACA,EAAWgT,EAAeC,EAAe3B,IAEvCkD,GAAgB5uB,EAAAA,EAAAA,KAAQ,KACtB0rB,GAAgBe,IAAgB/c,GAAgC,IAApBA,EAAS9S,OAIpD8S,EACJkN,KAAKlhB,IACJ,MAAOwB,EAAQC,GAAazB,EAAGmzB,MAAM,KAAKjS,IAAI7T,QAE9C,OACE0kB,GAA0BA,EAAuBvwB,IAAWuwB,EAAuBvwB,GAAQid,KAAKhd,MAGnG6d,OAAmBvU,SACnBqoB,MAAK,CAACC,EAAGC,IAAMA,EAAE/vB,KAAO8vB,EAAE9vB,OAZpBsvB,GAAAA,GAaR,CAAC7e,EAAU+d,EAAwB/B,EAAae,IAE7CwC,GAA2BhxB,EAAAA,EAAAA,KAAY,KAC3C8vB,GAAwBD,KACvB,CAACA,IAEEoB,GAA4BjxB,EAAAA,EAAAA,KAAY,KAC5CgwB,GAAyBD,KACxB,CAACA,IAmBEmB,EAAelC,IAAmBA,EAAe/S,QAAU+S,EAAe3H,WAC1E6H,EAAavwB,SAAWswB,EAActwB,SAAWgyB,EAAchyB,OAErE,OAAK8uB,GAAgBe,EAKnB,mBAACjQ,GAAA,EAAD,CACEje,UAAU,2BACVke,MAAOmS,EACPlS,WAAYwR,EAEZkB,sBAAoB,EACpBC,YAAU,GAET3B,GACC,0BAAKnvB,UAAU,4CACb,mBAAC,GAAD,CACEkuB,WAAYiB,EACZtE,SAAUuE,KAIfwB,GACC,mBAACG,GAAA,EAAD,CACEnuB,KAAMjD,EAAK,6BACX+oB,YAAa/oB,EAAK,4CAGnBivB,EAAavwB,QACd,0BAAK2B,UAAU,2CAA2CO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACjFqtB,EAAavQ,KAAKlhB,GACjB,mBAAC6zB,GAAA,EAAD,CACEC,aAAc9zB,EACd8C,QAAS8vB,EACTmB,SAAU/zB,SAKfyxB,EAAavwB,QACd,0BAAK2B,UAAU,kBACb,yBAAIA,UAAU,kBAAkBO,IAAKZ,EAAK4b,MAAQ,YAASha,GACxDqtB,EAAavwB,OAzKK,GA0KjB,mBAACwvB,GAAA,EAAD,CAAM5tB,QAASywB,GACZ/wB,EAAK4vB,EAAsB,2BAA6B,6BAG5D5vB,EAAK,oCAEPivB,EAAavQ,KAAI,CAAClhB,EAAImd,KACrB,GAAKiV,KAAuBjV,GAjLT,GAqLnB,OACE,mBAAC,GAAD,CACE3b,OAAQxB,EACR8C,QAAS6vB,UAMhBnB,EAActwB,QACf,0BAAK2B,UAAU,kBACb,yBAAIA,UAAU,kBAAkBO,IAAKZ,EAAK4b,MAAQ,YAASha,GACxDotB,EAActwB,OAjMI,GAkMjB,mBAACwvB,GAAA,EAAD,CAAM5tB,QAAS0wB,GACZhxB,EAAK8vB,EAAuB,2BAA6B,6BAG7D9vB,EAAK,mCAEPgvB,EAActQ,KAAI,CAAClhB,EAAImd,KACtB,GAAKmV,KAAwBnV,GAzMV,GA6MnB,OACE,mBAAC,GAAD,CACE3b,OAAQxB,EACRquB,cAAY,EACZvrB,QAAS6vB,UAMhBO,EAAchyB,QACf,0BAAK2B,UAAU,kBACb,yBAAIA,UAAU,kBAAkBO,IAAKZ,EAAK4b,MAAQ,YAASha,GAAY5B,EAAK,mBAC3E0wB,EAAchS,KA9GvB,SAA4BtgB,GAC1B,MAAM6E,GAAOmrB,EAAAA,EAAAA,IAAsBpuB,EAAM5B,GACnCsC,EAAOwb,EAAU9d,EAAQY,QAE/B,GAAKiE,GAASvC,EAId,OACE,mBAAC,GAAD,CACE1B,OAAQZ,EAAQY,OAChBZ,QAASA,EACTovB,YAAaA,SASV,mBAAC,GAAD,CAAgBV,QAASA,QCjJ9BT,IAAevoB,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAK,GA2FjD,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAQkd,KAAMC,GAAcnd,EAAOid,OAC7B,cAAEK,EAAe+K,UAAYkI,SAAUC,GAAvC,aAAiEhC,GAAiBxuB,GAClF,eAAEgwB,EAAF,cAAkBtd,GAAkB1S,EAAO8tB,cAE3C,SAAErb,GAAcC,GAAiBA,EAAcxO,MAAS,GAE9D,MAAO,CACLoZ,cAAAA,EACA7K,SAAAA,EACA+d,uBAAAA,EACArT,UAAAA,EACA6S,eAAAA,EACAxB,aAAAA,MAGJ,CAAC9tB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAjBpCZ,EAzFkD,EACpE0uB,YAAAA,EACAnR,cAAAA,EACAmT,gBAAAA,EACAhe,SAAAA,EACA+d,uBAAAA,EACArT,UAAAA,EACA6S,eAAAA,EACAxB,aAAAA,EACAmC,qBAAAA,EACAD,mBAAAA,MAEA,MAAMzvB,GAAOC,EAAAA,EAAAA,KACP+vB,GAAiBjwB,EAAAA,EAAAA,KAAY,EAAG2a,UAAAA,MAChC6S,GAAgB7S,IAAcuV,EAAAA,GAAAA,WAChC5D,IAAa,KACXqD,EAAqB,CACnB/oB,KAAM,OACNupB,MAAO1C,EACPxuB,OAAQqd,SAIb,CAACA,EAAekR,EAAcmC,EAAsBlC,IAEjDkD,GAAgB5uB,EAAAA,EAAAA,KAAQ,IACvB0P,GAAgC,IAApBA,EAAS9S,OAInB8S,EACJkN,KAAKlhB,IACJ,MAAOwB,EAAQC,GAAazB,EAAGmzB,MAAM,KAAKjS,IAAI7T,QAE9C,OACE0kB,GAA0BA,EAAuBvwB,IAAWuwB,EAAuBvwB,GAAQid,KAAKhd,MAGnG6d,OAAmBvU,SACnBqoB,MAAK,CAACC,EAAGC,IAAMA,EAAE/vB,KAAO8vB,EAAE9vB,OAZpBsvB,GAAAA,GAaR,CAAC7e,EAAU+d,IAmBR0B,EAAelC,IAAmBA,EAAe/S,QAAU+S,EAAe3H,WAAasJ,EAAchyB,OAE3G,OACE,0BAAK2B,UAAU,cACb,mBAACie,GAAA,EAAD,CACEje,UAAU,yCACVke,MAAOmS,EACPlS,WAAYwR,EACZmB,YAAU,GAET3B,GACC,0BAAKnvB,UAAU,4CACb,mBAAC,GAAD,CACEkuB,WAAYiB,EACZtE,SAAUuE,KAIfwB,GACC,mBAACG,GAAA,EAAD,CACEnuB,KAAMjD,EAAK,6BACX+oB,YAAa/oB,EAAK,4CAGnB0wB,EAAchyB,QAAUgyB,EAAchS,KAzC/C,SAA4BtgB,GAC1B,MAAM6E,GAAOmrB,EAAAA,EAAAA,IAAsBpuB,EAAM5B,GACnCsC,EAAOwb,EAAU9d,EAAQY,QAE/B,GAAKiE,GAASvC,EAId,OACE,mBAAC,GAAD,CACE1B,OAAQZ,EAAQY,OAChBZ,QAASA,EACTovB,YAAaA,aC3Ed,SAASgE,GAAsB7qB,GACpC,MAAO,CAAC5H,EAAqB0yB,KAC3B,MAAQxV,KAAMC,GAAcnd,EAAOid,OAC3BC,KAAMyQ,GAAc3tB,EAAO4tB,OAC7B,eACJoC,EADI,cACYtd,EADZ,OAC2BzS,GAC7BD,EAAO8tB,aAKL6E,EAAuB,UAAT/qB,EAAmBA,EAAQ8qB,GAASA,EAAME,QAAU,QAAU,SAE1ErC,SAAUC,GAA2BxwB,EAAOqoB,UAC9C,SAAE5V,GAAcC,GAAiBA,EAAcigB,IAAiB,GAEtE,MAAO,CACLE,OAAOC,EAAAA,EAAAA,IAAY9yB,GACnB+yB,eAAwBlwB,IAAb4P,KACLud,GAAiBxmB,QAAQwmB,EAAe/S,OAAS+S,EAAe3H,UACtElL,UAAAA,EACAwQ,UAAAA,EACA6C,uBAAAA,EACA/d,SAAAA,EACAugB,aAAc/yB,EACduuB,aAAcxuB,EAAOwuB,e,0BCf3B,MAAMyE,GAAe,QACf3F,IAAevoB,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAK,GAuGjD,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,IAClB0yB,GAAsBQ,KACtB,CAACvyB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,qBAJgBZ,EArG4C,EAC9D0uB,YAAAA,EACAuE,aAAAA,EACAD,UAAAA,EACAvC,uBAAAA,EACA/d,SAAAA,EACA+b,aAAAA,EACAmC,qBAAAA,EACA/d,gBAAAA,MAEA,MAAM3R,GAAOC,EAAAA,EAAAA,KAEP+vB,GAAiBjwB,EAAAA,EAAAA,KAAY,EAAG2a,UAAAA,MAChC6S,GAAgB7S,IAAcuV,EAAAA,GAAAA,WAChC5D,IAAa,KACXqD,EAAqB,CACnB/oB,KAAMqrB,GACN9B,MAAO1C,EACPxuB,OAAQ+yB,SAIb,CAACxE,EAAcmC,EAAsBlC,EAAauE,IAE/CrB,GAAgB5uB,EAAAA,EAAAA,KAAQ,IACvB0P,GAAa+d,EAIX/d,EAASkN,KAAKlhB,IACnB,MAAOwB,EAAQC,GAAazB,EAAGmzB,MAAM,KAAKjS,IAAI7T,QAE9C,OAAO0kB,EAAuBvwB,IAAWuwB,EAAuBvwB,GAAQid,KAAKhd,MAC5E6d,OAAOvU,SAPD8nB,GAAAA,GAQR,CAACd,EAAwB/d,IAEtBygB,GAAoBlyB,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACxD2S,EAAgB,CACd3S,OAAAA,EACAC,UAAAA,EACAhD,OAAQY,EAAAA,GAAAA,iBAET,CAAC8U,IA2BEugB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC3E,GAAc4E,EAAAA,KAA+BN,EACpFO,EAAcH,GAAqB1gB,GAAYA,EAAS9S,OAAS,IAAM8uB,EACvE8E,EAAgBJ,GAAqB1gB,GAAYA,EAAS9S,OAAS,GAAK8uB,EAExEtpB,GAAaC,EAAAA,EAAAA,GACjB,+BACAmuB,GAAiB,aAGnB,OACE,0BAAKjyB,UAAU,cACb,mBAACie,GAAA,EAAD,CACEje,UAAW6D,EACXqa,MAAOmS,EACP6B,aAAe/E,EAAyB,YAAX,SAC7BhP,WAAYwR,EACZmB,YAAU,IAERe,GAAqB,mBAAClT,GAAA,EAAD,MACtBkT,KAAuB1gB,GAAgC,IAApBA,EAAS9S,SAC3C,mBAAC0yB,GAAA,EAAD,CACEnuB,KAAMjD,EAAK,6BACX+oB,YAAa/oB,EAAK,0CAGrBqyB,GAhDH,0BAAKhyB,UAAU,aAAaO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACnD8uB,EAAchS,KAAKtgB,GAClB,mBAACo0B,GAAA,EAAD,CACEhyB,IAAKpC,EAAQZ,GACbi1B,SAAS,eACTr0B,QAASA,EACTkC,QAAS2xB,OA2CZK,GAnCE5B,EAAchS,KAAKtgB,GACxB,mBAAC,GAAD,CACEoC,IAAKpC,EAAQZ,GACbwB,OAAQZ,EAAQY,OAChBZ,QAASA,YCvFV,SAASs0B,GACd1yB,EAAc5B,EAAqB8d,EAAoCwQ,GAEvE,MAAM,SAAE7b,GAAazS,EACrB,IAAKyS,EACH,OAGF,MAAM1R,GAASC,EAAAA,EAAAA,IAAcyR,GAAY6b,EAAU7b,GAAYqL,EAAUrL,GAEzE,IAAI8hB,GAAavyB,EAAAA,EAAAA,IAAeJ,EAAMb,GAEtC,MAAMuB,EAAOwb,EAAU9d,EAAQY,QAS/B,OARI0B,KACEtB,EAAAA,EAAAA,IAAcyR,IAAc1R,EAAmB4uB,OACjD4E,EAAc,GAAE3yB,EAAK,iBAAgByd,EAAAA,EAAAA,GAAazd,EAAMU,MAC/CkyB,EAAAA,EAAAA,IAAYlyB,KACrBiyB,GAAe,OAAKlV,EAAAA,EAAAA,GAAazd,EAAMU,OAIpCiyB,E,eCDT,MAAMX,GAAe,QACf3F,IAAevoB,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAK,GA4FjD,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,IAClB0yB,GAAsBQ,KACtB,CAACvyB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,kBAJgBZ,EA1F2C,EAC7D0uB,YAAAA,EACAuE,aAAAA,EACAD,UAAAA,EACA5V,UAAAA,EACAwQ,UAAAA,EACA6C,uBAAAA,EACA/d,SAAAA,EACA+b,aAAAA,EACAmC,qBAAAA,EACA7vB,aAAAA,MAEA,MAAMG,GAAOC,EAAAA,EAAAA,KACP+vB,GAAiBjwB,EAAAA,EAAAA,KAAY,EAAG2a,UAAAA,MAChC6S,GAAgB7S,IAAcuV,EAAAA,GAAAA,WAChC5D,IAAa,KACXqD,EAAqB,CACnB/oB,KAAMqrB,GACN9B,MAAO1C,EACPxuB,OAAQ+yB,SAIb,CAACxE,EAAcmC,EAAsBlC,EAAauE,IAE/CrB,GAAgB5uB,EAAAA,EAAAA,KAAQ,IACvB0P,GAAa+d,EAIX/d,EAASkN,KAAKlhB,IACnB,MAAOwB,EAAQC,GAAazB,EAAGmzB,MAAM,KAAKjS,IAAI7T,QAE9C,OAAO0kB,EAAuBvwB,IAAWuwB,EAAuBvwB,GAAQid,KAAKhd,MAC5E6d,OAAOvU,SAPD8nB,GAAAA,GAQR,CAACd,EAAwB/d,IAEtBqhB,GAAqB9yB,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACzDa,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACY,IA4BEqyB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC3E,GAAc4E,EAAAA,KAA+BN,EAE1F,OACE,0BAAKzxB,UAAU,cACb,mBAACie,GAAA,EAAD,CACEje,UAAU,8CACVke,MAAOmS,EACPlS,WAAYwR,EACZmB,YAAU,IAERe,GAAqB,mBAAClT,GAAA,EAAD,MACtBkT,KAAuB1gB,GAAgC,IAApBA,EAAS9S,SAC3C,mBAAC0yB,GAAA,EAAD,CACEnuB,KAAMjD,EAAK,6BACX+oB,YAAa/oB,EAAK,0CAGrBkyB,GAAqB1gB,GAAYA,EAAS9S,OAAS,GA1CjDgyB,EAAchS,KAAI,CAACtgB,EAASuc,KACjC,MAAMmY,EAAkC,IAAVnY,IACzBoY,EAAAA,EAAAA,IAAY30B,EAAQ2C,SAAUgyB,EAAAA,EAAAA,IAAYrC,EAAc/V,EAAQ,GAAG5Z,MACxE,OACE,0BACEV,UAAU,sBACVO,IAAKZ,EAAK4b,MAAQ,WAAQha,EAC1BpB,IAAKpC,EAAQZ,IAEZs1B,GACC,wBAAGzyB,UAAU,kBAAkBO,IAAKZ,EAAK4b,MAAQ,WAAQha,IACtDoxB,EAAAA,EAAAA,IAAmBhzB,EAAM,IAAIwhB,KAAoB,IAAfpjB,EAAQ2C,QAG/C,mBAACkyB,GAAA,EAAD,CACEzyB,IAAKpC,EAAQZ,GACbY,QAASA,EACT+B,YAAauyB,GAAc1yB,EAAM5B,EAAS8d,EAAWwQ,GACrDwG,eAAgBL,c,eC7D5B,MAAMb,GAAe,YACf3F,IAAevoB,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAK,GA6FjD,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,IAClB0yB,GAAsBQ,KACtB,CAACvyB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,kBAJgBZ,EA3F2C,EAC7D0uB,YAAAA,EACAuE,aAAAA,EACAD,UAAAA,EACA5V,UAAAA,EACAwQ,UAAAA,EACA6C,uBAAAA,EACA/d,SAAAA,EACA+b,aAAAA,EACAmC,qBAAAA,EACA7vB,aAAAA,MAEA,MAAMG,GAAOC,EAAAA,EAAAA,KACP+vB,GAAiBjwB,EAAAA,EAAAA,KAAY,EAAG2a,UAAAA,MAChC6S,GAAgB7S,IAAcuV,EAAAA,GAAAA,WAChC5D,IAAa,KACXqD,EAAqB,CACnB/oB,KAAMqrB,GACN9B,MAAO1C,EACPxuB,OAAQ+yB,SAIb,CAACxE,EAAcmC,EAAsBlC,EAAauE,IAE/CrB,GAAgB5uB,EAAAA,EAAAA,KAAQ,IACvB0P,GAAa+d,EAIX/d,EAASkN,KAAKlhB,IACnB,MAAOwB,EAAQC,GAAazB,EAAGmzB,MAAM,KAAKjS,IAAI7T,QACxCzM,EAAUmxB,EAAuBvwB,IAAWuwB,EAAuBvwB,GAAQid,KAAKhd,GAEtF,OAAOb,IAAWgX,EAAAA,EAAAA,IAAmBhX,GAAWA,OAAUwD,KACzDkb,OAAOvU,SARD8nB,GAAAA,GASR,CAACd,EAAwB/d,IAEtBqhB,GAAqB9yB,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACzDa,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACY,IA4BEqyB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC3E,GAAc4E,EAAAA,KAA+BN,EAE1F,OACE,0BAAKzxB,UAAU,cACb,mBAACie,GAAA,EAAD,CACEje,UAAU,8CACVke,MAAOmS,EACPlS,WAAYwR,EACZmB,YAAU,IAERe,GAAqB,mBAAClT,GAAA,EAAD,MACtBkT,KAAuB1gB,GAAgC,IAApBA,EAAS9S,SAC3C,mBAAC0yB,GAAA,EAAD,CACEnuB,KAAMjD,EAAK,6BACX+oB,YAAa/oB,EAAK,0CAGrBkyB,GAAqB1gB,GAAYA,EAAS9S,OAAS,GA1CjDgyB,EAAchS,KAAI,CAACtgB,EAASuc,KACjC,MAAMmY,EAAkC,IAAVnY,IACzBoY,EAAAA,EAAAA,IAAY30B,EAAQ2C,SAAUgyB,EAAAA,EAAAA,IAAYrC,EAAc/V,EAAQ,GAAG5Z,MACxE,OACE,0BACEV,UAAU,sBACVG,IAAKpC,EAAQZ,IAEZs1B,GACC,wBAAGzyB,UAAU,oBAAmB2yB,EAAAA,EAAAA,IAAmBhzB,EAAM,IAAIwhB,KAAoB,IAAfpjB,EAAQ2C,QAE5E,mBAACoyB,GAAA,EAAD,CACE/0B,QAASA,EACTg1B,UAAQ,EACRC,SAAUj1B,EAAQ2C,KAClBuyB,SAAO,EACPn0B,OAAQuzB,GAAc1yB,EAAM5B,EAAS8d,EAAWwQ,GAChDrsB,UAAU,cACVkzB,YAAaV,c,eCjEzB,MAAMxG,IAAevoB,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAK,GAyGjD,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,IAClB0yB,GAAsB,UACtB,CAAC/xB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,eACA,qBALgBZ,EAvG4C,EAC9D8yB,MAAAA,EACAD,QAAAA,EACAnE,YAAAA,EACAuE,aAAAA,EACAD,UAAAA,EACA5V,UAAAA,EACAwQ,UAAAA,EACA6C,uBAAAA,EACA/d,SAAAA,EACA+b,aAAAA,EACAmC,qBAAAA,EACA7vB,aAAAA,EACA2zB,gBAAAA,MAEA,MAAMxzB,GAAOC,EAAAA,EAAAA,KACPyxB,EAAcC,EAAU,QAAU,QAClC3B,GAAiBjwB,EAAAA,EAAAA,KAAY,EAAG2a,UAAAA,MAChC6S,GAAgB7S,IAAcuV,EAAAA,GAAAA,WAChC5D,IAAa,KACXqD,EAAqB,CACnB/oB,KAAM+qB,EACNxB,MAAO1C,EACPxuB,OAAQ+yB,SAIb,CAACL,EAAanE,EAAcmC,EAAsBlC,EAAauE,IAE5DrB,GAAgB5uB,EAAAA,EAAAA,KAAQ,IACvB0P,GAAa+d,EAIX/d,EAASkN,KAAKlhB,IACnB,MAAOwB,EAAQC,GAAazB,EAAGmzB,MAAM,KAAKjS,IAAI7T,QAE9C,OAAO0kB,EAAuBvwB,IAAWuwB,EAAuBvwB,GAAQid,KAAKhd,MAC5E6d,OAAOvU,SAPD8nB,GAAAA,GAQR,CAACd,EAAwB/d,IAEtBqhB,GAAqB9yB,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACzDa,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACY,IAEE4zB,GAAkB1zB,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACtDw0B,EAAgB,CAAEx0B,OAAAA,EAAQC,UAAAA,MACzB,CAACu0B,IAiCEtB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC3E,GAAc4E,EAAAA,KAA+BN,EAE1F,OACE,0BAAKzxB,UAAU,cACb,mBAACie,GAAA,EAAD,CACEje,UAAU,8CACVke,MAAOmS,EACPlS,WAAYwR,EACZmB,YAAU,IAERe,GAAqB,mBAAClT,GAAA,EAAD,MACtBkT,KAAuB1gB,GAAgC,IAApBA,EAAS9S,SAC3C,mBAAC0yB,GAAA,EAAD,CACEnuB,KAAMjD,EAAK,6BACX+oB,YAAa/oB,EAAK,0CAGrBkyB,GAAqB1gB,GAAYA,EAAS9S,OAAS,GA/CjDgyB,EAAchS,KAAI,CAACtgB,EAASuc,KACjC,MAAMmY,EAAkC,IAAVnY,IACzBoY,EAAAA,EAAAA,IAAY30B,EAAQ2C,SAAUgyB,EAAAA,EAAAA,IAAYrC,EAAc/V,EAAQ,GAAG5Z,MACxE,OACE,0BACEV,UAAU,sBACVG,IAAKpC,EAAQZ,IAEZs1B,GACC,wBAAGzyB,UAAU,kBAAkBO,IAAKZ,EAAK4b,MAAQ,WAAQha,IACtDoxB,EAAAA,EAAAA,IAAmBhzB,EAAM,IAAIwhB,KAAoB,IAAfpjB,EAAQ2C,QAG/C,mBAAC2yB,GAAA,EAAD,CACElzB,IAAKpC,EAAQZ,GACbo0B,MAAOA,EACPxzB,QAASA,EACT0M,OAAO,eACP3K,YAAauyB,GAAc1yB,EAAM5B,EAAS8d,EAAWwQ,GACrD3rB,KAAM3C,EAAQ2C,KACdwsB,aAAcA,EACdltB,UAAU,cACVszB,OAAQF,EACRF,YAAaV,cClEnBe,GAAO,CACX,CAAEjtB,KAAMktB,EAAAA,GAAAA,SAA8BlU,MAAO,uBAC7C,CAAEhZ,KAAMktB,EAAAA,GAAAA,MAA2BlU,MAAO,mBAC1C,CAAEhZ,KAAMktB,EAAAA,GAAAA,MAA2BlU,MAAO,mBAC1C,CAAEhZ,KAAMktB,EAAAA,GAAAA,MAA2BlU,MAAO,mBAC1C,CAAEhZ,KAAMktB,EAAAA,GAAAA,MAA2BlU,MAAO,mBAC1C,CAAEhZ,KAAMktB,EAAAA,GAAAA,MAA2BlU,MAAO,oBAGtCmU,GAAY,CAChB,CAAEntB,KAAMktB,EAAAA,GAAAA,SAA8BlU,MAAO,mBAC1CiU,GAAKG,MAAM,IAGVC,GAA0Bh2B,OAAOi2B,KAAKJ,EAAAA,IAAqBn1B,OAAS,EA4F1E,IAAeyI,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAM,eAAEm1B,EAAF,OAAkBl1B,GAAWD,EAAO8tB,aAE1C,MAAO,CAAEqH,eAAAA,EAAgBl1B,OAAAA,MAE3B,CAACS,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,yBAA0B,yBAN9DZ,EA1F0C,EAC5D0uB,YAAAA,EACAe,WAAAA,EACAhT,SAAAA,EACA2Y,eAAAA,EAAiBL,EAAAA,GAAAA,SACjB70B,OAAAA,EACAm1B,uBAAAA,EACAC,oBAAAA,EACAtH,QAAAA,MAEA,MAAM9sB,GAAOC,EAAAA,EAAAA,MACNo0B,EAAWC,IAAgBhxB,EAAAA,EAAAA,IAAS4wB,GACrC1E,GAAkB1tB,EAAAA,EAAAA,KAAQ,KAAMyyB,EAAAA,EAAAA,IAAgB/G,IAAc,CAACA,IAE/DgH,GAAkBz0B,EAAAA,EAAAA,KAAa4a,IACnC,MAAM8Z,EAAMb,GAAKjZ,GACjBwZ,EAAuB,CAAEO,QAASD,EAAI9tB,OACtC2tB,EAAa3Z,KACZ,CAACwZ,IAEEQ,GAAyB50B,EAAAA,EAAAA,KAAa8G,IAC1CutB,EAAoB,CAAErzB,KAAM8F,EAAM+c,UAAY,QAC7C,CAACwQ,KAEJ1Y,EAAAA,EAAAA,IAAeH,EAAUuR,OAASlrB,OAAWA,GAAW,GAGxD,MAAMkc,GAAelW,EAAAA,EAAAA,IAAuB,MACtCkT,GAAgBiD,EAAAA,GAAAA,GAA0BD,EAAcvC,OAAU3Z,EAAW,oBAAoB,GAEvG,OACE,0BAAKvB,UAAU,aAAakL,IAAKuS,EAAcI,UAAWpD,GACxD,mBAAC8Z,GAAA,EAAD,CAASP,UAAWA,EAAWQ,KAAM71B,EAAS80B,GAAYF,GAAMkB,YAAaN,IAC7E,mBAAC3Y,EAAA,EAAD,CACEE,KAAM/b,EAAK4b,MAAQ,iBAAmB,QACtCmZ,YAAaf,GACblY,UAAWoY,IAEV,KACC,OAAQA,GACN,KAAKL,EAAAA,GAAAA,SACH,OAAI70B,EAEA,mBAAC,GAAD,CACEwuB,YAAaA,EACbgC,gBAAiBA,EACjB1C,QAASA,EACT2C,mBAAoBkF,IAKxB,mBAAC,GAAD,CACEnH,YAAaA,EACbe,WAAYA,EACZiB,gBAAiBA,EACjB1C,QAASA,EACT2C,mBAAoBkF,IAG1B,KAAKd,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAcrG,YAAaA,IACpC,KAAKqG,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAarG,YAAaA,IACnC,KAAKqG,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAarG,YAAaA,IACnC,KAAKqG,EAAAA,GAAAA,MACH,OACE,mBAAC,GAAD,CACErzB,IAAI,QACJgtB,YAAaA,IAGnB,KAAKqG,EAAAA,GAAAA,MACH,OACE,mBAAC,GAAD,CACErzB,IAAI,QACJmxB,SAAO,EACPnE,YAAaA,IAGnB,QACE,gB,eC3Hd,MAAMwH,GAA4B,CAChCC,gBAAiB,GACjBC,SAAU,GACVC,KAAM,GACNC,MAAO,IAGHC,GAAuD,CAC3DC,EACAC,KAEA,OAAQA,EAAO5uB,MACb,IAAK,qBACH,MAAO,IACF2uB,EACHL,gBAAiBM,EAAOC,SAG5B,IAAK,cACH,MAAO,IACFF,EACHJ,SAAUK,EAAOC,SAGrB,IAAK,UACH,MAAO,IACFF,EACHH,KAAMI,EAAOC,SAGjB,IAAK,WACH,MAAO,IACFF,EACHF,MAAOG,EAAOC,SAGlB,IAAK,QACH,OAAOR,GAET,QACE,OAAOM,ICiNb,IAAenuB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,SAClB8C,GACA,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,UAAW,sBAF/CZ,EA5OiC,EACnD22B,cAAAA,EACAC,eAAAA,EACA5I,QAAAA,EACA6I,aAAAA,EACAC,QAAAA,EACAC,iBAAAA,EACAC,eAAAA,MAEA,MAAOC,EAAqBC,IAA0B1yB,EAAAA,EAAAA,KAAS,IACxD2yB,EAA0BC,IAA+B5yB,EAAAA,EAAAA,KAAS,GAEnE6yB,GAA0Bp2B,EAAAA,EAAAA,KAAY,KAC1Ci2B,GAAuB,KACtB,IAEGI,GAA2Br2B,EAAAA,EAAAA,KAAY,KAC3Ci2B,GAAuB,KACtB,IAEGK,GAA+Bt2B,EAAAA,EAAAA,KAAY,KAC/Cm2B,GAA4B,KAC3B,IAEGI,GAAgCv2B,EAAAA,EAAAA,KAAY,KAChDm2B,GAA4B,KAC3B,IAEGK,GAAuBx2B,EAAAA,EAAAA,KAAY,KACvCq2B,IACAR,MACC,CAACQ,EAA0BR,IAExBY,GAA4Bz2B,EAAAA,EAAAA,KAAY,KAC5Cu2B,IACAT,EAAiB,CAAEr4B,GAAIk4B,IACvB5I,MACC,CAAC4I,EAAgBY,EAA+BT,EAAkB/I,IAE/D2J,GAAsE30B,EAAAA,EAAAA,KAAQ,IAC3E,EAAGC,UAAAA,EAAWC,OAAAA,KACnB,mBAACC,EAAA,EAAD,CACEC,OAAK,EACL6E,QAAS1E,EAAAA,GACT5B,KAAK,UACL0B,MAAM,cACN9B,UAAW2B,EAAS,SAAW,GAC/B1B,QAASyB,EACTK,UAAU,gBAEV,wBAAG/B,UAAU,gBAGhB,IAEGL,GAAOC,EAAAA,EAAAA,KAqJb,OACE,0BAAKI,UAAU,eACb,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAASwsB,EACT1qB,UAAWpC,EAAK,mBAEhB,wBAAGK,UAAU,qBA5JnB,WACE,OAAQo1B,GACN,KAAKiB,EAAAA,GAAAA,YACH,OAAO,6BAAK12B,EAAK,6BACnB,KAAK02B,EAAAA,GAAAA,QACH,OAAO,6BAAK12B,EAAK,YACnB,KAAK02B,EAAAA,GAAAA,cACH,OAAO,6BAAK12B,EAAK,kBACnB,KAAK02B,EAAAA,GAAAA,QACH,OAAO,6BAAK12B,EAAK,oBACnB,KAAK02B,EAAAA,GAAAA,SACH,OAAO,6BAAK12B,EAAK,aAEnB,KAAK02B,EAAAA,GAAAA,sBACH,OAAO,6BAAK12B,EAAK,mBACnB,KAAK02B,EAAAA,GAAAA,2BACH,OAAO,6BAAK12B,EAAK,aAEnB,KAAK02B,EAAAA,GAAAA,mBACH,OAAO,6BAAK12B,EAAK,iBACnB,KAAK02B,EAAAA,GAAAA,gBACH,OAAO,6BAAK12B,EAAK,oBACnB,KAAK02B,EAAAA,GAAAA,oBACH,OAAO,6BAAK12B,EAAK,yBACnB,KAAK02B,EAAAA,GAAAA,kBACH,OAAO,6BAAK12B,EAAK,oBACnB,KAAK02B,EAAAA,GAAAA,kBACH,OAAO,6BAAK12B,EAAK,2BACnB,KAAK02B,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAO,6BAAK12B,EAAK,oBACnB,KAAK02B,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAO,6BAAK12B,EAAK,mBAEnB,KAAK02B,EAAAA,GAAAA,sBACH,OAAO,6BAAK12B,EAAK,kBACnB,KAAK02B,EAAAA,GAAAA,oBACH,OAAO,6BAAK12B,EAAK,iBAEnB,KAAK02B,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACH,OAAO,6BAAK12B,EAAK,wBACnB,KAAK02B,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACH,OAAO,6BAAK12B,EAAK,+BACnB,KAAK02B,EAAAA,GAAAA,wBACH,OAAO,6BAAK12B,EAAK,0BACnB,KAAK02B,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,wBACH,OAAO,6BAAK12B,EAAK,iBACnB,KAAK02B,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,mBACH,OAAO,6BAAK12B,EAAK,uBACnB,KAAK02B,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,uBACH,OAAO,oDACT,KAAKA,EAAAA,GAAAA,qBACH,OAAO,6BAAK12B,EAAK,mCACnB,KAAK02B,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACH,OAAO,6BAAK12B,EAAK,+BAEnB,KAAK02B,EAAAA,GAAAA,QACH,OAAO,6BAAK12B,EAAK,YACnB,KAAK02B,EAAAA,GAAAA,oBACH,OAAO,6BAAK12B,EAAK,cACnB,KAAK02B,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE,0BAAKr2B,UAAU,wBACb,6BAAKL,EAAK,eAET01B,GACC,mBAACpzB,EAAA,EAAD,CACEjC,UAAU,qBACVkC,QAASk0B,EACTj0B,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUC,KAAK,SAASuoB,aAAW,EAAC3qB,QAAS+1B,GAC1Cr2B,EAAK,aAMlB,KAAK02B,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,0BAAKr2B,UAAU,wBACXo1B,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,iCACnB,6BAAK12B,EAAK,kBAEV,6BAAKA,EAAK,kBAGd,mBAACiC,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN9B,UAAU,gBACVC,QAASq1B,EACTvzB,UAAWpC,EAAK,sBAEhB,wBAAGK,UAAU,iBAKrB,QACE,OACE,0BAAKA,UAAU,wBACb,6BAAKL,EAAK,aAEV,mBAACiC,EAAA,EAAD,CACEC,OAAK,EACL6E,QAAS1E,EAAAA,GACT5B,KAAK,UACL0B,MAAM,cACN7B,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,aAC9Bt0B,UAAWpC,EAAK,6BAEhB,wBAAGK,UAAU,eAEf,mBAACiC,EAAA,EAAD,CACEjC,UAAU,qBACVkC,QAASk0B,EACTj0B,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUC,KAAK,SAASpC,QAAS61B,GAA0Bn2B,EAAK,mBAkBvE22B,GACD,mBAAC9V,GAAA,EAAD,CACE7e,OAAQ+zB,EACRruB,QAAS0uB,EACTnzB,KAAMjD,EAAK,mBACX8gB,aAAc9gB,EAAK,0BACnB+gB,eAAgBwV,EAChBK,sBAAoB,IAEtB,mBAAC/V,GAAA,EAAD,CACE7e,OAAQi0B,EACRvuB,QAAS4uB,EACTrzB,KAAMjD,EAAK,qBACX8gB,aAAc9gB,EAAK,UACnB+gB,eAAgByV,EAChBI,sBAAoB,S,wBCpO5B,MAqEA,IAAezvB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEsd,EAAF,aAAiBkR,GAAiBxuB,EAExC,MAAO,CACL83B,YAAaxa,GAAgBhd,EAAAA,EAAAA,IAAWN,EAAQsd,QAAiBza,EACjE2rB,aAAAA,MAGJ,CAAC9tB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,uBATpCZ,EArE4C,EAC9Dyc,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACAgK,kBAAAA,EACAD,YAAAA,EACAtJ,aAAAA,MAEA,MAAMvtB,GAAOC,EAAAA,EAAAA,KACP82B,EAAYF,EAAcA,EAAYr5B,QAAKoE,EAUjD,OARA2B,EAAAA,EAAAA,KAAU,KACJwzB,GAAaxJ,GACfuJ,EAAkB,CAAEC,UAAAA,MAErB,CAACxJ,EAAcwJ,EAAWD,KAE7Bpb,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,MAGhD,0BAAKr2B,UAAU,kCACb,0BAAKA,UAAU,sBACZw2B,GACC,mBAACG,GAAA,EAAD,CACElY,OAAQ+X,EAAYr5B,GACpBy5B,eAAa,IAGhBJ,GACC,mBAACK,GAAA,EAAD,CACE5F,aAAcuF,EAAYr5B,GAC1By5B,eAAa,IAGjB,mBAACtY,GAAA,EAAD,CACEjc,KAAK,WACLpC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,UAE7B12B,EAAK,2CAER,mBAAC2e,GAAA,EAAD,CACEjc,KAAK,SACLpC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,gBAE7B12B,EAAK,kBAER,mBAAC2e,GAAA,EAAD,CACEjc,KAAK,OACLpC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,UAE7B12B,EAAK,oBAER,mBAAC2e,GAAA,EAAD,CACEjc,KAAK,SACLpC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,UAE7B12B,EAAK,YAER,mBAAC2e,GAAA,EAAD,CACEjc,KAAK,WACLpC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,WAE7B12B,EAAK,mB,yBCxEhB,MAEMm3B,GAAc,gBACdC,GAAoB,sBACpBC,GAAiB,oBAEjBC,IAA+BC,EAAAA,EAAAA,KAAUjL,GAAOA,KAAM,KAAK,GAkFjE,IAAenlB,EAAAA,EAAAA,KA1E2B,EACxCqwB,gBAAAA,EACAC,OAAAA,EACA3F,UAAAA,EACA4F,oBAAAA,EACAC,cAAAA,EACA/qB,SAAAA,MAEA,MAAO6jB,EAAUmH,IAAet0B,EAAAA,EAAAA,IAASk0B,GAAmB,IAEtDx3B,GAAOC,EAAAA,EAAAA,KACP43B,EAAaJ,EAAS,SAAW,WACjCnO,EAAiBtpB,EAATy3B,EAAc,oBAA4B,aAEjDK,EAAiBC,IAAiBj2B,EAAAA,EAAAA,KAAQ,IAC1C2uB,EAAS/xB,OAIV+xB,EAAS/xB,OAjCW,EAkCf,MAACkD,EAAY,GAAE0nB,kBAEpBmH,EAAS/xB,OAnCW,GAoCf,MAACkD,EAAY,GAAE0nB,iBAEnB+N,GAAeW,KAAKvH,QAIG7uB,IAAxB81B,EACK,GAIF,CACLA,EAAsB13B,EAAM,GAAE63B,aAAuB,iBAAcj2B,GAC3C,IAAxB81B,EAAgC13B,EAAM,GAAE63B,eAAqBj2B,GAVtD,MAACA,EAAY,GAAE0nB,iCAVf,IAsBR,CAACmH,EAAUiH,EAAqB13B,EAAM63B,EAAYvO,KAErD/lB,EAAAA,EAAAA,KAAU,KACRq0B,EAAYJ,GAAmB,MAC9B,CAACC,EAAQD,IAEZ,MAAMS,GAAuBl4B,EAAAA,EAAAA,KAAaqE,IACxC,MAAM8zB,EAAc9zB,EAAE0G,OAAOjE,MAAMsxB,OAAOxT,QAAQyS,GAAmB,IACrEQ,EAAYM,GACZ9zB,EAAE0G,OAAOjE,MAAS,GAAE4wB,EAASN,GAAc,KAAKe,IAEhD,MAAME,EAvDV,SAAyB3H,GACvB,OAAOA,EAAS/xB,QATU,GAUrB+xB,EAAS/xB,QATY,IAUrB24B,GAAeW,KAAKvH,GAoDP4H,CAAgBH,GAE5BE,GACFd,IAA6B,KAC3BK,EAAc,CAAElH,SAAUyH,OAI1BtrB,GACFA,IAASwrB,GAAUF,KAEpB,CAACT,EAAQE,EAAe/qB,IAE3B,OACE,mBAACqR,GAAA,EAAD,CACEpX,MAAQ,GAAE4wB,EAASN,GAAc,KAAK1G,IACtC7jB,SAAUqrB,EACV3O,MAAOA,EACPpK,MAAO6Y,EACPO,QAASR,EACTS,SAAUzG,OCzDVzF,IAAevoB,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAO,GAI7CkM,GAA2B,iCAC3BC,GAAqB,wCA8M3B,IAAetxB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEsd,GAAkBtd,GACpB,SAAEgE,EAAF,oBAAY20B,GAAwB34B,EAAO25B,aAAe,GAC1D7B,EAAcxa,GAAgBhd,EAAAA,EAAAA,IAAWN,EAAQsd,QAAiBza,EAExE,IAAKi1B,EACH,MAAO,CACL9zB,SAAAA,EACA20B,oBAAAA,GAIJ,MACEiB,UAAWC,EACXC,SAAUC,EACVrI,SAAU+G,EAHN,SAIJuB,GACElC,GACImC,IAAKC,GAAeF,GAAY,GAGxC,MAAO,CACLG,mBAHwBjlB,EAAAA,EAAAA,IAAkB4iB,GAI1C+B,iBAAAA,EACAE,gBAAAA,EACAG,WAAAA,EACAzB,gBAAAA,EACAz0B,SAAAA,EACA20B,oBAAAA,MAGJ,CAACj4B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBACA,gBACA,mBAnCgBZ,EA5MmD,EACrEyc,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACAoM,kBAAAA,EACAN,iBAAAA,EACAE,gBAAAA,EACAG,WAAAA,EACAzB,gBAAAA,EACAz0B,SAAAA,EACA20B,oBAAAA,EACAyB,gBAAAA,EACAC,cAAAA,EACAzB,cAAAA,MAEA,MAAM33B,GAAOC,EAAAA,EAAAA,MAENo5B,EAAmBC,IAAwBh2B,EAAAA,EAAAA,KAAS,IACpDi2B,EAAwBC,IAA6Bl2B,EAAAA,EAAAA,KAAS,IAC9D4b,EAAOua,IAAYn2B,EAAAA,EAAAA,OAEnByO,EAAO2nB,IAAYp2B,EAAAA,EAAAA,OACnBq1B,EAAWgB,IAAgBr2B,EAAAA,EAAAA,IAASs1B,GAAoB,KACxDC,EAAUe,IAAet2B,EAAAA,EAAAA,IAASw1B,GAAmB,KACrDE,EAAKa,IAAUv2B,EAAAA,EAAAA,IAAS21B,GAAc,KACtCxI,EAAUmH,IAAet0B,EAAAA,EAAAA,IAAyBk0B,GAAmB,IAEtEsC,GAAuB3lB,EAAAA,EAAAA,GAAS+kB,GAAmB,EAAO9kB,EAAAA,GAAAA,SAE1D0d,EAAY/uB,IAAag3B,EAAAA,GAAAA,WACzBC,GAA+B,IAAbvJ,EAElBwJ,GAAoBn4B,EAAAA,EAAAA,KAAQ,KAC5Bk4B,IAIGzxB,QAAQwJ,IAAUwnB,IAAkD,IAAxB7B,IAClD,CAAC3lB,EAAOwnB,EAAwBS,EAAiBtC,KAEpDhc,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,cAIlDnzB,EAAAA,EAAAA,KAAU,KACR8oB,IAAa,KACX8M,SAED,CAACA,KAEJ51B,EAAAA,EAAAA,KAAU,KACRm2B,OAAS93B,KACR,CAACk4B,KAEJv2B,EAAAA,EAAAA,KAAU,KACRo2B,EAAaf,GAAoB,IACjCgB,EAAYd,GAAmB,IAC/Be,EAAOZ,GAAc,MACpB,CAACL,EAAkBE,EAAiBG,KAEvC11B,EAAAA,EAAAA,KAAU,KACRq0B,EAAYJ,GAAmB,MAC9B,CAACA,KAEJj0B,EAAAA,EAAAA,KAAU,KACJR,IAAag3B,EAAAA,GAAAA,WACfP,GAA0B,GAC1BF,GAAqB,GACrBG,OAAS73B,MAEV,CAACmB,IAEJ,MAAMm3B,GAAoBn6B,EAAAA,EAAAA,KAAao6B,IACrCT,EAASS,KACR,IAEGC,GAAwBr6B,EAAAA,EAAAA,KAAaqE,IACzCu1B,EAAav1B,EAAE0G,OAAOjE,OACtB2yB,GAA0B,KACzB,IAEGa,GAAuBt6B,EAAAA,EAAAA,KAAaqE,IACxCw1B,EAAYx1B,EAAE0G,OAAOjE,OACrB2yB,GAA0B,KACzB,IAEGc,GAAkBv6B,EAAAA,EAAAA,KAAaqE,IACnCy1B,EAAOz1B,EAAE0G,OAAOjE,OAChB2yB,GAA0B,KACzB,IAEGvB,GAAuBl4B,EAAAA,EAAAA,KAAa8G,IACxC+wB,EAAY/wB,GACZyyB,GAAqB,KACpB,IAEGiB,GAAoBx6B,EAAAA,EAAAA,KAAY,KACpC,MAAMy6B,EAAmB7B,EAAUR,OAC7BsC,EAAkB5B,EAASV,OAC3BuC,EAAa1B,EAAIb,OAElBqC,EAAiB97B,OAKlBg8B,EAAWh8B,OA/GI,GAgHjB+6B,EAAShB,IAIXW,EAAc,CACZrnB,MAAAA,KACIwnB,GAA0B,CAC5BZ,UAAW6B,EACX3B,SAAU4B,EACVzB,IAAK0B,MAEHrB,GAAqB,CACvB5I,SAAAA,KAjBFgJ,EAASjB,MAoBV,CACDzmB,EACA4mB,EAAWE,EAAUG,EAAKO,EAC1B9I,EAAU4I,EACVD,IAGF,OACE,0BAAK/4B,UAAU,wBACb,0BAAKA,UAAU,kCACb,0BAAKA,UAAU,yBACb,mBAACs6B,GAAA,EAAD,CACEb,qBAAsBA,EACtBltB,SAAUstB,EACVva,MAAM,0BACNhT,SAAUmlB,IAEZ,mBAAC7T,GAAA,EAAD,CACEpX,MAAO8xB,EACP/rB,SAAUwtB,EACV9Q,MAAOtpB,EAAK,aACZ2M,SAAUmlB,EACV5S,MAAOA,IAAUsZ,GAA2BtZ,OAAQtd,IAEtD,mBAACqc,GAAA,EAAD,CACEpX,MAAOgyB,EACPjsB,SAAUytB,EACV/Q,MAAOtpB,EAAK,YACZ2M,SAAUmlB,IAEZ,mBAAC7T,GAAA,EAAD,CACEpX,MAAOmyB,EACPpsB,SAAU0tB,EACVhR,MAAOtpB,EAAK,WACZ2M,SAAUmlB,EACV5S,MAAOA,IAAUuZ,GAAqBvZ,OAAQtd,IAGhD,wBAAGvB,UAAU,4BAA4BO,IAAKZ,EAAK4b,MAAQ,WAAQha,IAChEf,EAAAA,EAAAA,GAAWb,EAAK,0BAA2B,CAAC,KAAM,sBAIvD,0BAAKK,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,aAEhF,mBAAC46B,GAAD,CACEpD,gBAAiB/G,GAAY,GAC7BqB,UAAWA,EACX4F,oBAAqBA,EACrBC,cAAeA,EACf/qB,SAAUqrB,IAGZ,wBAAG53B,UAAU,4BAA4BO,IAAKZ,EAAK4b,MAAQ,WAAQha,IAChEf,EAAAA,EAAAA,GAAWb,EAAK,gBAAiB,CAAC,KAAM,qBAE1CywB,GACC,wBAAGpwB,UAAU,4BAA4BO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAChE5B,EAAK,qBAAqB,8BAC3B,2BAAMK,UAAU,iBAAhB,gBAA8CowB,MAMtD,mBAACoK,GAAA,EAAD,CACE5uB,QAASguB,EACT35B,QAASi6B,EACT5tB,SAAUmlB,EACV1vB,UAAU,gBAET0vB,EACC,mBAACzhB,EAAA,EAAD,CAASlO,MAAM,UAEf,wBAAG9B,UAAU,qB,0BC9MvB,MAAMy6B,IAAiCh3B,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAO,GAyLrE,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MACEid,OAASC,KAAMC,GACfyQ,OAAS1Q,KAAMyQ,IACb3tB,GAGFg8B,WAAYC,EACZ/e,KAAMgf,EACNC,YAAaC,GACXp8B,EAAOq8B,YAEX,MAAO,CACLlf,UAAAA,EACAwQ,UAAAA,EACAsO,iBAAAA,EACAC,YAAAA,EACAE,uBAAAA,EACAE,gBAAgB1P,EAAAA,EAAAA,IAAqB5sB,GACrCu8B,kBAAkB1P,EAAAA,EAAAA,IAAuB7sB,OAG7C,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,6BAA8B,gBAAiB,gBAvBnFZ,EArLmD,EACrEy8B,eAAAA,EACAC,aAAAA,EACAjgB,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACA5Q,UAAAA,EACAwQ,UAAAA,EACAsO,iBAAAA,EACAC,YAAAA,EACAE,uBAAAA,EACAE,eAAAA,EACAC,iBAAAA,EACAG,2BAAAA,EACAC,cAAAA,EACAC,WAAAA,MAEA,MAAOC,EAAeC,IAAoBv4B,EAAAA,EAAAA,OACnCw4B,EAAmBC,IAAwBz4B,EAAAA,EAAAA,KAAS,GACrD04B,GAAsBj8B,EAAAA,EAAAA,KAAY,IAAMg8B,GAAqB,IAAO,KAE1Ex4B,EAAAA,EAAAA,KAAU,KACHq4B,IACHK,EAAAA,GAAAA,GAAiB,cAAcC,KAAKL,KAErC,CAACD,KAIJr4B,EAAAA,EAAAA,KAAU,KACRu3B,IAA+B,KAC7BW,SAED,CAACA,IAEJ,MAAMU,GAAqBp8B,EAAAA,EAAAA,KAAY,KACjC/B,OAAOi2B,KAAKgH,GAAav8B,QAtCL,GAuCtBi9B,EAAW,CACTS,KAAM,CACJh+B,QAAS,0BACTghB,aAAa,KAOnBmc,MACC,CAACN,EAAaU,EAAYJ,IAEvBv7B,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,SAElD,MAAM2F,GAAcv6B,EAAAA,EAAAA,KAAQ,KAC1B,IAAKk5B,EACH,OAGF,MAAM9d,EAAUlf,OAAOi2B,KAAK/X,GAAWwC,IAAI7T,QAE3C,OAAOmwB,EAAiBtc,KAAKlhB,IAC3B,MAAM8+B,EAASrB,EAAYz9B,GAE3B,MAAO,CACLA,GAAI8+B,EAAO9+B,GACXmiB,MAAO2c,EAAO3c,MACd4c,UAAUC,EAAAA,EAAAA,IACRx8B,EAAMkc,EAAWwQ,EAAW4P,EAAQpf,EAASme,EAAgBC,SAIlE,CAACN,EAAkB9e,EAAW+e,EAAavO,EAAW2O,EAAgBC,EAAkBt7B,IAErFy8B,GAAoC18B,EAAAA,EAAAA,KAAau8B,IACjDt+B,OAAOi2B,KAAKgH,GAAav8B,QA7EL,GA8EtBi9B,EAAW,CACTS,KAAM,CACJh+B,QAAS,0BACTghB,aAAa,KAOnBsc,EAAc,CAAEY,OAAAA,MACf,CAACrB,EAAaS,EAAeC,IAEhC,OACE,0BAAKt7B,UAAU,kCACb,0BAAKA,UAAU,2BACb,0BAAKA,UAAU,yBACZu7B,GACC,mBAACc,GAAA,EAAD,CACEl/B,GAAG,sBACHiD,KAAMk8B,EAAAA,GACNf,cAAeA,EACfxxB,KAAM0xB,EACNc,QAAM,EACNC,OAAQb,KAKd,wBAAG37B,UAAU,iCAAiCO,IAAI,QAC/CZ,EAAK,wBAGR,mBAACiC,EAAA,EAAD,CAEE5B,UAAU,iBACV8B,MAAM,UACN1B,KAAK,UACLq8B,MAAI,EACJC,OAAK,EACLz8B,QAAS67B,EACTvgB,MAAO5b,EAAK4b,OAEZ,wBAAGvb,UAAU,aACZL,EAAK,qBAIV,0BAAKK,UAAU,sBACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,YAEpFq8B,GAAeA,EAAY39B,OAAS29B,EAAY3d,KAAK4d,GACpD,mBAAC3d,GAAA,EAAD,CACEte,UAAU,eACV28B,QAAM,EACNC,WAAS,EACT38B,QAAS,IAAMk7B,EAAaP,EAAYqB,EAAO9+B,MAE/C,2BAAM6C,UAAU,SAASi8B,EAAO3c,OAChC,2BAAMtf,UAAU,YAAYi8B,EAAOC,aAElCF,IAAgBA,EAAY39B,OAC/B,wBAAG2B,UAAU,iCAAiCO,IAAI,QAAlD,4BAGE,mBAACoe,GAAA,EAAD,OAGJmc,KAA4BA,EAAuBz8B,QACnD,0BAAK2B,UAAU,sBACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACjE5B,EAAK,sBAGPm7B,EAAuBzc,KAAK4d,GAC3B,mBAAC3d,GAAA,EAAD,CACEte,UAAU,OACV28B,QAAM,EACN18B,QAAS,IAAMm8B,EAAkCH,IAEjD,0BAAKj8B,UAAU,qCACb,0BAAKA,UAAU,kBACb,2BAAMA,UAAU,SAASi8B,EAAO3c,OAChC,2BAAMtf,UAAU,YAAYi8B,EAAOvT,cAGrC,mBAAC9mB,EAAA,EAAD,CACE5B,UAAU,OACV8B,MAAM,UACN1B,KAAK,OACLq8B,MAAI,EACJC,OAAK,EACLnhB,MAAO5b,EAAK4b,OAEX5b,EAAK,kB,eCzMxB,MAyBA,GAzBqC,EACnCk9B,MAAAA,EACAC,SAAAA,EACAC,eAAAA,EACAtL,UAAAA,EACAxxB,QAAAA,MAEA,MAAMN,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACgC,EAAA,EAAD,CACE5B,UAAU,iBACV8B,MAAM,cACN1B,KAAK,UACLuf,QAAM,EACN8R,UAAWA,EACXlW,MAAO5b,EAAK4b,MACZtb,QAASA,GAET,wBAAGD,UAAU,cATf,QAUQ68B,EAVR,SAUqBA,EAAQ,EAAIE,GAAmB,GAAED,KAAcA,ICiBlEE,GAAiB,0CACjBC,GAAiB,8BAqQvB,IAAen2B,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAEod,GAAYpd,EAAOid,MAE3B,MAAO,CACLuhB,oBAAqBphB,EAAQI,OAC7BihB,sBAAuBrhB,EAAQO,aAGnC,CAACjd,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,iBAAkB,gBAAiB,mBATvEZ,EAnQmD,EACrEw2B,MAAAA,EACAmI,SAAAA,EACAC,mBAAAA,EACAC,mBAAAA,EACApiB,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACA8Q,OAAAA,EACAL,oBAAAA,EACAC,sBAAAA,EACAK,eAAAA,EACAnC,cAAAA,EACA7e,cAAAA,MAEA,MAAO+e,EAAeC,IAAoBv4B,EAAAA,EAAAA,OACnCw4B,EAAmBC,IAAwBz4B,EAAAA,EAAAA,KAAS,GACrD04B,GAAsBj8B,EAAAA,EAAAA,KAAY,IAAMg8B,GAAqB,IAAO,KAEnE+B,EAA6BC,IAAkCz6B,EAAAA,EAAAA,KAAS,IACxE06B,EAA6BC,IAAkC36B,EAAAA,EAAAA,KAAS,IAG7E46B,gBAAiBC,EACjBC,kBAAmBC,IACjBC,EAAAA,GAAAA,IAAkBhJ,EAAO,aAE3B4I,gBAAiBK,EACjBH,kBAAmBI,IACjBF,EAAAA,GAAAA,IAAkBhJ,EAAO,aAE7B/xB,EAAAA,EAAAA,KAAU,KACHq4B,IACHK,EAAAA,GAAAA,GAAiB,cAAcC,KAAKL,KAErC,CAACD,KAEJr4B,EAAAA,EAAAA,KAAU,KACRw6B,GAA+B,GAC/BE,GAA+B,KAC9B,CAAC3I,EAAMmJ,WAEV,MAAOC,EAAwBC,IAA0B78B,EAAAA,EAAAA,KAAQ,KAC/D,MAAM88B,EAAoB,IAAIC,IAAI,IAC7BtB,GAAuB,MACvBC,GAAyB,KAGxBsB,GAAwBC,EAAAA,EAAAA,IAAwBZ,EAAiBS,GACjEI,GAAwBD,EAAAA,EAAAA,IAAwBR,EAAiBK,GAEvE,MAAO,CACLd,EACIgB,EACAA,EAAsB/K,MAAM,EA3DV,EA2DmCsK,EAAkB3/B,QAC3Es/B,EACIgB,EACAA,EAAsBjL,MAAM,EA9DV,EA8DmCyK,EAAkB9/B,WAE5E,CACD6/B,EAAiBJ,EAAiBE,EAAmBG,EACrDR,EAA6BF,EAC7BP,EAAqBC,KAGvBj6B,EAAAA,EAAAA,KAAU,MAENm7B,EAAuBhgC,OAASy/B,EAAgBz/B,QAC7CigC,EAAuBjgC,OAAS6/B,EAAgB7/B,SAEnDme,EAAc,CAAEoiB,SAAU,aAE3B,CACDpiB,EACA0hB,EAAgB7/B,OAChBy/B,EAAgBz/B,OAChBigC,EAAuBjgC,OACvBggC,EAAuBhgC,SAGzB,MAAMsB,GAAOC,EAAAA,EAAAA,KA0Db,SAASi/B,EAAYC,GACnB,MAAMf,EAA6B,aAATe,EAAsBd,EAAoBG,EAC9DY,EAA0B,aAATD,EAAsBT,EAAyBC,EAEhEU,EAAsB,aAATF,EAAsBrB,EAA8BE,EAEjEsB,GADsB,aAATH,EAAsBhB,EAAkBI,GACzB7/B,OAAS0/B,EAAkB1/B,OAAS0gC,EAAe1gC,OAC/E6gC,EAAwB,aAATJ,EACjB,IAAMpB,GAA+B,GACrC,IAAME,GAA+B,GAEzC,OACE,sCACGG,EAAkB1f,KAAKle,GAnC9B,SAAwBA,EAAa2+B,GACnC,MAAMK,EAAoB,aAATL,EACbM,GAAAA,GAAAA,MAAyB,EAAGj/B,IAAKk/B,KAAcA,IAAYl/B,IAC3Dm/B,GAAAA,GAAAA,MAAyB,EAAGn/B,IAAKk/B,KAAcA,IAAYl/B,IAE/D,GAAKg/B,EAIL,OACE,mBAAC7gB,GAAA,EAAD,CACEne,IAAKg/B,EAASh/B,IACdH,UAAU,kCACVqC,KAAM88B,EAAS98B,KACfs6B,QAAM,EACN4C,UAAQ,GAEP5/B,EAAKw/B,EAAS7f,QAkBiBkgB,CAAer/B,EAAK2+B,KACnDC,EAAe1gB,KAAKlhB,GACnB,mBAACmhB,GAAA,EAAD,CACEte,UAAU,kCACV28B,QAAM,EACN4C,UAAQ,IAEPxgC,EAAAA,EAAAA,IAAc5B,GACb,mBAACohB,GAAA,EAAD,CAAiBuN,WAAW,QAAQrN,OAAQthB,IAE5C,mBAACuhB,GAAA,EAAD,CAAeoN,WAAW,QAAQntB,OAAQxB,QAI7C6hC,GAAcC,EAAiB,GAChC,mBAAC,GAAD,CACEpC,MAAOoC,EACPnC,SAAS,OACT78B,QAASi/B,KAOnB,OA9FA7jB,EAAAA,EAAAA,IAAeH,EAAUqiB,EAAQ9H,EAA+B,SAAfR,EAAM6J,KACnDzI,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,qBA6FF,0BAAKr2B,UAAU,wBACb,0BAAKA,UAAU,kCACb,0BAAKA,UAAU,2BACb,0BAAKA,UAAU,yBACZu7B,GACC,mBAACc,GAAA,EAAD,CACEl/B,GAAG,sBACHiD,KAAMk8B,EAAAA,GACNf,cAAeA,EACfxxB,KAAM0xB,GAAqB/Z,OAAOuT,EAAMmJ,UACxC7B,QAAM,EACNC,OAAQb,KAKE,WAAf1G,EAAM6J,MACL,wBAAG9+B,UAAU,iCAAiCO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACrE5B,EAAK,sBAIV,mBAACie,GAAA,EAAD,CACE5d,UAAU,OACVipB,MAAOtpB,EAAK,kBACZ6G,MAAOyuB,EAAMgH,OAAO3c,MACpB/S,SArHV,SAAsBkzB,GACpB,MAAM,cAAEr1B,GAAkBq1B,EAC1BrC,EAAS,CAAE92B,KAAM,WAAY6uB,QAAS/qB,EAAc5D,MAAMsxB,UAoHlDjZ,MAAOoW,EAAMpW,OAASoW,EAAMpW,QAAUme,GAAiBA,QAAiBz7B,KAI5E,0BAAKvB,UAAU,gCACZi1B,EAAMpW,OAASoW,EAAMpW,QAAUoe,IAC9B,wBAAGj9B,UAAU,8CAA8CO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAClF5B,EAAKs1B,EAAMpW,QAIhB,yBAAI7e,UAAU,4BAA4BO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,kBAErF,mBAAC2e,GAAA,EAAD,CACEte,UAAU,gDACVqC,KAAK,MACLpC,QAASo9B,GAER19B,EAAK,mBAGPk/B,EAAY,aAGf,0BAAK7+B,UAAU,gCACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,kBAErF,mBAAC2e,GAAA,EAAD,CACEte,UAAU,gDACVqC,KAAK,MACLpC,QAASq9B,GAER39B,EAAK,mBAGPk/B,EAAY,cAIjB,mBAACrE,GAAA,EAAD,CACE5uB,UAAWqpB,EAAMyK,UACjBpzB,SAAU2oB,EAAMxD,UAChBxxB,QA3JN,WACE,MAAM,MAAEqf,GAAU2V,EAAMgH,OAEnB3c,EAKAwe,EAAgBz/B,QAAWV,OAAOi2B,KAAKoK,GAAmB3/B,QAK/D++B,EAAS,CAAE92B,KAAM,eAAgB6uB,SAAS,IACvB,SAAfF,EAAM6J,KACRtB,EAAe,CAAErgC,GAAI83B,EAAMmJ,SAAUuB,aAAc1K,EAAMgH,SAEzDZ,EAAc,CAAEY,OAAQhH,EAAMgH,SAGhCt2B,YAAW,KACT8mB,MAvHiB,MA2GjB2Q,EAAS,CAAE92B,KAAM,WAAY6uB,QAAS8H,KALtCG,EAAS,CAAE92B,KAAM,WAAY6uB,QAAS6H,MAwJpCj7B,UAA0B,SAAfkzB,EAAM6J,KAAkB,eAAiB,iBAEnD7J,EAAMxD,UACL,mBAACzhB,EAAA,EAAD,CAASlO,MAAM,UAEf,wBAAG9B,UAAU,qB,eC9QvB,MAmLA,IAAe8G,EAAAA,EAAAA,KA7KkC,EAC/Cg4B,KAAAA,EACAjiB,QAAAA,EACA+iB,YAAAA,EACA7B,kBAAAA,EACA8B,YAAAA,EACAC,oBAAAA,EACAC,0BAAAA,EACAC,eAAAA,EACA7hB,WAAAA,MAGA,MAAMnS,GAAWzE,EAAAA,EAAAA,IAAyB,MACpC04B,EAAqB,aAATnB,EAAsBM,GAAAA,GAAsBE,GAAAA,GACxDY,EAAiBN,EAAYvhC,OAAS0/B,EAAkB1/B,OAjBzC,GAkBf8hC,EAAcP,EAAYvhC,QAnBhB,KAqBhB6E,EAAAA,EAAAA,KAAU,KACRyC,YAAW,KACTwS,uBAAsB,KACpBnM,EAASxD,QAASmU,aA1BH,OA6BlB,IAEH,MAAMyjB,GAAkB1gC,EAAAA,EAAAA,KAAavC,IACnC,MAAMkjC,EAAiB,IAAIT,GACvBS,EAAejjC,SAASD,GAC1BkjC,EAAeC,OAAOD,EAAe3tB,QAAQvV,GAAK,GAElDkjC,EAAenc,KAAK/mB,GAEtB2iC,EAAoBO,KACnB,CAACT,EAAaE,IAEXS,GAAsB7gC,EAAAA,EAAAA,KAAaS,IACvC,MAAMqgC,EAAuB,IAAIzC,GAC7ByC,EAAqBpjC,SAAS+C,GAChCqgC,EAAqBF,OAAOE,EAAqB9tB,QAAQvS,GAAM,GAE/DqgC,EAAqBtc,KAAK/jB,GAE5B4/B,EAA0BS,KACzB,CAACzC,EAAmBgC,IAEjBviB,GAAqB9d,EAAAA,EAAAA,KAAaqE,IACtC,MAAM,MAAEyC,GAAUzC,EAAEqG,cACpB41B,EAAex5B,KACd,CAACw5B,IAEErgC,GAAOC,EAAAA,EAAAA,MAgENyd,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBY,EAAYtB,EAAS3U,QAAQ23B,IAE9E,OACE,0BAAK7/B,UAAU,qCACb,0BAAKA,UAAU,+BACZ+9B,EAAkB1f,KAnEzB,SAAgCle,GAC9B,MAAMsgC,EAAeR,EAAUS,MAAK,EAAGvgC,IAAKk/B,KAAcl/B,IAAQk/B,IAClE,GAAKoB,EAIL,OACE,mBAACzP,GAAA,EAAD,CACE3uB,KAAMo+B,EAAap+B,KACnBid,MAAO3f,EAAK8gC,EAAanhB,OACzBqhB,YAAaT,EACbU,UAAQ,EACR3gC,QAASsgC,EACTrP,SAAUuP,EAAatgC,SAuDtBy/B,EAAYvhB,KAAI,CAAClhB,EAAI8mB,IACpB,mBAAC+M,GAAA,EAAD,CACEC,aAAc9zB,EACdwjC,YAAaT,GAAkBjc,EAAI2b,EAAYvhC,OA7H3B,EA8HpBuiC,UAAQ,EACR3gC,QAASmgC,EACTlP,SAAU/zB,MAGZgjC,EAQA,wBAAGngC,UAAU,oBAAoBO,IAAI,QACjC,6CARJ,mBAACqd,GAAA,EAAD,CACE1S,IAAKc,EACLxF,MAAOq5B,EACPtzB,SAAUiR,EACVM,YAAane,EAAK,aAQxB,mBAACse,GAAA,EAAD,CACEje,UAAU,4BACVkyB,aAAa,aACbhU,MAAOb,EACPc,WAAYb,KAETD,IAAgBA,EAAYhf,QAAUgf,EAAYjgB,SAASyf,EAAQ,MACpE,sCACE,yBAAI1c,IAAI,UAAUH,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAC1E5B,EAAK,oBAEPsgC,EAAU5hB,KAnFrB,SAAwB/X,GACtB,OACE,mBAACgY,GAAA,EAAD,CACEne,IAAKmG,EAAKnG,IACVH,UAAU,sDACVC,QAAS,IAAMsgC,EAAoBj6B,EAAKnG,KACxCuG,QAAM,GAEN,wBAAG1G,UAAY,QAAOsG,EAAKjE,SAC3B,yBAAIrC,UAAU,YAAYO,IAAI,QAAQZ,EAAK2G,EAAKgZ,QAChD,mBAACuhB,GAAA,EAAD,CACE5X,MAAM,GACN6X,QAAS/C,EAAkB3gC,SAASkJ,EAAKnG,KACzC0B,OAAK,QAuEH,0BAAK1B,IAAI,UAAUH,UAAU,wBAC7B,yBAAIG,IAAI,UAAUH,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAC1E5B,EAAK,iBAKX0d,GAAeA,EAAYhf,OAC1Bgf,EAAYgB,KAzEpB,SAAoBlhB,GAClB,MAAM4jC,EAAanB,EAAYxiC,SAASD,GAExC,OACE,mBAACmhB,GAAA,EAAD,CACEne,IAAKhD,EACL6C,UAAU,iDACVC,QAAS,IAAMmgC,EAAgBjjC,GAC/BuJ,QAAM,EACN4F,UAAWy0B,GAAcZ,IAExBphC,EAAAA,EAAAA,IAAc5B,GACb,mBAACohB,GAAA,EAAD,CAAiBE,OAAQthB,IAEzB,mBAACuhB,GAAA,EAAD,CAAe/f,OAAQxB,EAAI6jC,cAAY,IAEzC,mBAACH,GAAA,EAAD,CACE5X,MAAM,GACN6X,QAASC,EACTl/B,OAAK,QAuDHwb,IAAgBA,EAAYhf,OAC9B,wBAAG2B,UAAU,aAAaG,IAAI,cAA9B,yBAEA,mBAACwe,GAAA,EAAD,CAASxe,IAAI,iBC9CvB,IAAe2G,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MACEid,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,IAEArd,EAEJ,MAAO,CACLmd,UAAAA,EACAC,QAASA,EAAQI,OACjBH,iBAAkBA,EAAiBG,OACnC+kB,kBAAmBllB,EAAiBM,SACpCD,gBAAiBN,EAAQO,aAG7B,CAACjd,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBAlBpCZ,EAzH0D,EAC5Eyc,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACAqS,KAAAA,EACA7J,MAAAA,EACAmI,SAAAA,EACAvhB,UAAAA,EACAC,QAAAA,EACAC,iBAAAA,EACAK,gBAAAA,EACA6kB,kBAAAA,EACAzkB,cAAAA,MAEA,MAAM,WAAE0kB,GAAejM,GACjB,gBAAE4I,EAAF,kBAAmBE,IAAsBE,EAAAA,GAAAA,IAAkBhJ,EAAO6J,GAAM,GAExEn/B,GAAOC,EAAAA,EAAAA,KACP+b,GAAQla,EAAAA,EAAAA,KAAQ,KACpB,MAAM0/B,EAAmBrlB,GACrBslB,EAAAA,EAAAA,GAAgBvlB,EAAWC,EAASC,EAAkB,YACtDxa,EACE8/B,EAAqBjlB,GACvBglB,EAAAA,EAAAA,GAAgBvlB,EAAWO,EAAiB6kB,EAAmB,iBAC/D1/B,EAEJ,GAAK4/B,GAAqBE,EAI1B,MAAO,IACDF,EACA,IAAIA,EAAiBG,eAAgBH,EAAiBI,YACtD,MAEAF,EAAqBA,EAAmBE,WAAa,MAE1D,CAAC1lB,EAAWC,EAASC,EAAkBK,EAAiB6kB,IAErDO,GAAe//B,EAAAA,EAAAA,KAAQ,KAC3B,GAAKka,EAIL,OAAOA,EACJc,QAAQpc,IACN6gC,IACE/jB,EAAAA,GAAAA,IAAYC,EAAAA,EAAAA,GAAazd,EAAMU,GAAO6gC,IACtCrD,EAAgBzgC,SAASiD,EAAKlD,MAElCkhB,KAAI,EAAGlhB,GAAAA,KAASA,MAClB,CAACwe,EAAOulB,EAAYvhC,EAAMk+B,IAEvBrgB,GAAqB9d,EAAAA,EAAAA,KAAa+hC,IACtCrE,EAAS,CACP92B,KAAM,gBACN6uB,QAASsM,MAEV,CAACrE,IAEEsE,GAA0BhiC,EAAAA,EAAAA,KAAaiiC,IAEzCvE,EADW,aAAT0B,EACO,CACPx4B,KAAM,oBACN6uB,QAAS,IAAKF,EAAM2M,eAAgB9D,gBAAiB6D,IAG9C,CACPr7B,KAAM,oBACN6uB,QAAS,IAAKF,EAAM4M,eAAgB3D,gBAAiByD,OAGxD,CAAC7C,EAAM7J,EAAOmI,IAEX0E,GAAgCpiC,EAAAA,EAAAA,KAAak0B,IACjD,MAAMmO,EAAsC,GAC5CnO,EAAKoO,SAAS7hC,IACZ4hC,EAAW5hC,IAAO,KAIlBi9B,EADW,aAAT0B,EACO,CACPx4B,KAAM,oBACN6uB,QAAS,CACP2I,gBAAiBD,KACdkE,IAIE,CACPz7B,KAAM,oBACN6uB,QAAS,CACP+I,gBAAiBL,KACdkE,OAIR,CAACjD,EAAMjB,EAAiBT,IAK3B,OAHA/hB,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EACvB,aAATqJ,EAAsBzI,EAAAA,GAAAA,qBAAuCA,EAAAA,GAAAA,sBAE1DmL,EAKH,mBAAC,GAAD,CACE1C,KAAMA,EACNjiB,QAAS2kB,EACT5B,YAAa/B,EACbE,kBAAmBA,EACnB8B,YAAaqB,EACbpB,oBAAqB4B,EACrB3B,0BAA2B+B,EAC3B9B,eAAgBxiB,EAChBW,WAAY3B,IAbP,mBAACmC,GAAA,EAAD,UCKX,IAAe7X,EAAAA,EAAAA,KA9HuB,EACpCsuB,cAAAA,EACA6M,YAAAA,EACAhN,MAAAA,EACAmI,SAAAA,EACAliB,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,MAEA,MAAMyV,GAAcxiC,EAAAA,EAAAA,KAAY,KAE5B01B,IAAkBiB,EAAAA,GAAAA,qBACfjB,IAAkBiB,EAAAA,GAAAA,mBAClBjB,IAAkBiB,EAAAA,GAAAA,+BAErB1wB,YAAW,KACTy3B,EAAS,CAAE92B,KAAM,YA5BG,KAiCtB8uB,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,qBAUvB5J,IARqB,WAAfwI,EAAM6J,KACRrJ,EAAeY,EAAAA,GAAAA,qBAEfZ,EAAeY,EAAAA,GAAAA,qBAMlB,CACDpB,EAAM6J,KAAM1B,EACZhI,EAAe3I,EAASgJ,IAGpBqG,GAAqBp8B,EAAAA,EAAAA,KAAY,KACrC09B,EAAS,CAAE92B,KAAM,UACjBmvB,EAAeY,EAAAA,GAAAA,uBACd,CAACZ,EAAgB2H,IAEd+E,GAAmBziC,EAAAA,EAAAA,KAAau8B,IACpCmB,EAAS,CAAE92B,KAAM,aAAc6uB,QAAS8G,IACxCxG,EAAeY,EAAAA,GAAAA,qBACd,CAAC+G,EAAU3H,IAER2M,GAAyB1iC,EAAAA,EAAAA,KAAY,KACzC09B,EAAS,CAAE92B,KAAM,uBACjBmvB,EAAeL,IAAkBiB,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,wBACH,CAACjB,EAAegI,EAAU3H,IAEvB4M,GAAyB3iC,EAAAA,EAAAA,KAAY,KACzC09B,EAAS,CAAE92B,KAAM,uBACjBmvB,EAAeL,IAAkBiB,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,wBACH,CAACjB,EAAegI,EAAU3H,IAE7B,OAAQL,GACN,KAAKiB,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACE6E,eAAgBY,EAChBX,aAAcgH,EACd1M,eAAgBA,EAChBva,SAAUA,GAAY,CACpBmb,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAj5B,SAAS6kC,GACXxV,QAASA,IAGf,KAAK4J,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE,mBAAC,GAAD,CACEpB,MAAOA,EACPmI,SAAUA,EACVC,mBAAoB+E,EACpB9E,mBAAoB+E,EACpB5V,QAASyV,EACTzM,eAAgBA,EAChBva,SAAUA,GAAY,CACpBmb,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAj5B,SAAS6kC,GACX1E,OAAQ9Q,IAGd,KAAK4J,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACEyI,KAAK,WACL7J,MAAOA,EACPmI,SAAUA,EACV3Q,QAASyV,EACTzM,eAAgBA,EAChBva,SAAUA,IAGhB,KAAKmb,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACEyI,KAAK,WACL7J,MAAOA,EACPmI,SAAUA,EACV3Q,QAASyV,EACTzM,eAAgBA,EAChBva,SAAUA,IAIhB,QACE,W,eChIN,MA+EA,IAAepU,EAAAA,EAAAA,KA/EmB,EAChCqiB,QAAAA,EACAmZ,MAAAA,EACArZ,MAAAA,EACAziB,MAAAA,EACA8F,SAAAA,EACAC,SAAAA,MAEA,MAAM5M,GAAOC,EAAAA,EAAAA,KACP2iC,GAAe7iC,EAAAA,EAAAA,KAAa+/B,IAChClzB,EAAS/B,OAAOi1B,EAAMr1B,cAAc5D,UACnC,CAAC+F,IAEEvM,GAAY8D,EAAAA,EAAAA,GAChB,cACAwI,GAAY,YAGRk2B,GAAa/gC,EAAAA,EAAAA,KAAQ,KACzB,GAAI0nB,EACF,OAAQ3iB,GAAS2iB,EAAQ9qB,OAAS,GAAM,IACnC,GAAIikC,EAAO,CAChB,MAAMG,GAAwBH,EAAMl8B,IAAMk8B,EAAMn8B,MAAQm8B,EAAMj8B,MAAQ,GACtE,OAASG,EAAQ87B,EAAMn8B,KAAOs8B,EAAwB,IAExD,OAAO,IACN,CAACj8B,EAAO2iB,EAASmZ,KAEbn8B,EAAKC,EAAKC,IAAQ5E,EAAAA,EAAAA,KAAQ,IAC3B0nB,EACK,CAAC,EAAGA,EAAQ9qB,OAAS,EAAG,GACtBikC,EACF,CAACA,EAAMn8B,IAAKm8B,EAAMl8B,IAAKk8B,EAAMj8B,MAAQ,GAGvC,CAAC,EAAG,EAAG,IACb,CAACi8B,EAAOnZ,IAEX,OACE,0BAAKnpB,UAAWA,GACbipB,GACC,0BAAKjpB,UAAU,iBAAiBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACxD,2BAAMvB,UAAU,QAAQO,IAAI,QAAQ0oB,GACnCqZ,GACC,2BAAMtiC,UAAU,QAAQO,IAAI,QAAQiG,IAI1C,0BAAKxG,UAAU,eACb,0BACEA,UAAU,oBAEVnC,MAAQ,UAAS2kC,OAEnB,4BACEr8B,IAAKA,EACLC,IAAKA,EACLI,MAAOA,EACPH,KAAMA,EACNC,KAAK,QACLiG,SAAUg2B,IAEXpZ,GACC,0BAAKnpB,UAAU,kBACZmpB,EAAQ9K,KAAI,CAACqkB,EAAQpoB,IACpB,0BACEta,WAAW8D,EAAAA,EAAAA,GAAe,6BAA8BwW,IAAU9T,GAAS,UAC3EvG,QAAS,IAAMsM,EAAS+N,IAEvBooB,W,0BCtEjB,MA6BA,IAAe57B,EAAAA,EAAAA,KA7B+B,EAC5C1G,KAAAA,EAAOuiC,EAAAA,GACPC,WAAAA,EACAC,oBAAAA,MAGA,MAAM33B,GAAM3D,EAAAA,EAAAA,IAAuB,MAE7Bu7B,GAAiBC,EAAAA,GAAAA,IAAkB73B,EAAK23B,GAExCG,EAAa,aAAYJ,EAAWzlC,KACpC8lC,GAAanvB,EAAAA,EAAAA,GAASkvB,GAAYF,EAAgB/uB,EAAAA,GAAAA,SAClD,sBAAEmvB,EAAF,qBAAyB35B,IAAyB45B,EAAAA,GAAAA,GAAsBF,EAAY,QAE1F,OACE,0BAAK/3B,IAAKA,EAAKlL,UAAU,sBACrBkjC,IAAyBE,EAAAA,GAAAA,IAAgBR,EAAWtjB,MAAO,GAC5D4jB,GAAyBD,GACxB,mBAAC5G,GAAA,EAAD,CACEl/B,GAAI6lC,EACJ5iC,KAAMA,EACNm7B,cAAe0H,EACfjjC,UAAWuJ,QCPrB,IAAezC,EAAAA,EAAAA,KAnBuB,EAAG87B,WAAAA,EAAYC,oBAAAA,MAEnD,MAAM33B,GAAM3D,EAAAA,EAAAA,IAAuB,MAE7Bu7B,GAAiBC,EAAAA,GAAAA,IAAkB73B,EAAK23B,GAExCliC,GAAYmT,EAAAA,EAAAA,GAAS8uB,EAAWS,cAAiB,aAAYT,EAAWzlC,MAAO2lC,IAC/E,sBAAEI,EAAF,qBAAyB35B,IAAyB45B,EAAAA,GAAAA,GAAsBxiC,EAAW,QAEzF,OACE,0BAAKuK,IAAKA,EAAKlL,UAAU,sBACrBkjC,IAAyBE,EAAAA,GAAAA,IAAgBR,EAAWtjB,MAAO,GAC5D4jB,GACC,0BAAK9mC,IAAKuE,EAAWX,UAAWuJ,EAAsBuG,IAAI,S,eCJlE,MAmEA,IAAehJ,EAAAA,EAAAA,KAnE0B,EACvC87B,WAAAA,EACAC,oBAAAA,EACA5iC,QAAAA,MAEA,MAAMN,GAAOC,EAAAA,EAAAA,KAEb,IAAKgjC,IAAeA,EAAWU,SAC7B,OAGF,MAAMC,EAAeX,EAAWU,UAAYV,EAAWU,SAAS,GAEhE,OAAIV,EAAWS,eAAiBE,EAE5B,mBAACjlB,GAAA,EAAD,CACEqe,QAAM,EACN38B,UAAU,qBACVu/B,UAAWgE,EACXtjC,QAAS,IAAMsjC,GAAgBtjC,EAAQsjC,IAEvC,mBAAC3hC,EAAA,EAAD,CACEG,UAAW6gC,EAAWtjB,MACtBxd,MAAM,cACNyZ,MAAO5b,EAAK4b,OAEXqnB,EAAWY,WACV,mBAAC,GAAD,CACEpjC,KAAMqjC,EAAAA,GACNb,WAAYA,EACZC,oBAAqBA,IAGvB,mBAAC,GAAD,CACED,WAAYA,EACZC,oBAAqBA,KAI3B,0BAAK7iC,UAAU,uBACb,0BAAKA,UAAU,SAAS4iC,EAAWtjB,OACnC,0BAAKtf,UAAU,YAAYL,EAAK,2BAA4BijC,EAAW/F,MAAO,QAMlF,mBAACve,GAAA,EAAD,CACEqe,QAAM,EACN38B,UAAU,qBACVC,QAAS,IAAMA,EAAQsjC,IAEvB,mBAACG,GAAA,EAAD,CACEC,QAASJ,EACTnjC,KAAMqjC,EAAAA,GACNnkB,MAAOsjB,EAAWtjB,MAClBujB,oBAAqBA,IAEvB,0BAAK7iC,UAAU,uBACb,0BAAKA,UAAU,SAAS4iC,EAAWtjB,OACnC,0BAAKtf,UAAU,YAAYL,EAAK,2BAA4BijC,EAAW/F,MAAO,W,eCjCxF,MAAM+G,GAA0B,CAC9B,mBACA,gBACA,iBA8MF,IAAe98B,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACQ,KACFY,EAAAA,EAAAA,IAAKZ,EAAO4R,SAASC,MAAO,CAC7B,kBACA,iBACA,sBACA,sCACA,wCACA,kCACA,oCACA,qBACA,uBACA,wBACA,qBACA,qBACA,uBAEFszB,cAAenlC,EAAO4kC,SAASQ,MAAMC,OACrCC,gBAAiBtlC,EAAO4kC,SAASW,aAGrC,CAAC7kC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,mBAAoB,kBAAmB,uBAvBvBZ,EA3M+C,EACjEyc,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACAoX,cAAAA,EACAG,gBAAAA,EACAE,gBAAAA,EACA7zB,eAAAA,EACA8zB,oBAAAA,EACAC,oCAAAA,EACAC,sCAAAA,EACAC,gCAAAA,EACAC,kCAAAA,EACAC,mBAAAA,EACAC,qBAAAA,EACAC,sBAAAA,EACAC,mBAAAA,EACAC,iBAAAA,EACAC,gBAAAA,EACAC,kBAAAA,MAGA,MAAMC,GAAqBx9B,EAAAA,EAAAA,IAAuB,OAC1Cy9B,QAASC,IAAiCC,EAAAA,GAAAA,IAAwB,CAAEC,QAASJ,KAC9EK,EAAaC,EAAWC,IAAc3iB,EAAAA,GAAAA,MACtCghB,EAAS4B,IAActiC,EAAAA,EAAAA,MAExBtD,GAAOC,EAAAA,EAAAA,KAEP4lC,EAAyB/9B,EAAAA,QAO3BlG,EAP0C,CAC5C,CAAEiF,MAAO,QAASyiB,MAAOtpB,EAAK,2BAA4B8lC,SAAU,6BACpE,CACEj/B,MAAO,aACPyiB,MAAOtpB,EAAK+lC,EAAAA,GAAY,6BAA+B,+BACvDD,SAAU,uBAIdviC,EAAAA,EAAAA,KAAU,KACR2hC,MACC,CAACA,KAEJ3hC,EAAAA,EAAAA,KAAU,KACJ2gC,GAAiBA,EAAcxlC,QACjCymC,MAED,CAACjB,EAAeiB,IAEnB,MAAMa,GAA6BjmC,EAAAA,EAAAA,KAAakmC,IAC9ChC,GAAwB5B,SAAQ,CAAC6D,EAAG5hB,KAClCnoB,SAAS+J,KAAK7J,UAAUoZ,OAAQ,mBAAkB6O,IAAK2hB,IAAa3hB,MAGtE2gB,EAAiB,CAAEv0B,eAAgBu1B,MAClC,CAAChB,IAEEkB,GAA8BpmC,EAAAA,EAAAA,KAAaqmC,IAC/CjqC,SAASkqC,gBAAgBnoC,MAAMooC,YAC7B,uBAAyB,GAAE3jC,KAAK8D,IAAI2/B,EAASr+B,EAAAA,GAAS,GAAK,SAE7D5L,SAASkqC,gBAAgBnoC,MAAMooC,YAAY,wBAA0B,GAAE3jC,KAAKkC,MAAgB,OAAVuhC,QAClFjqC,SAASkqC,gBAAgBnoC,MAAMooC,YAAY,sBAAwB,GAAEF,OACrEjqC,SAASkqC,gBAAgBE,aAAa,yBAA0BH,EAAQ92B,YAExE21B,EAAiB,CAAEV,gBAAiB6B,MACnC,CAACnB,IAEEuB,GAAwBzmC,EAAAA,EAAAA,KAAa8G,IACzC++B,EAAW/+B,GACX6+B,MACC,CAACA,IAEEe,EAAcvC,GAAiBA,EAAcxlB,KAAKlhB,MAC/C6mC,GAAmBA,EAAgB7mC,IAAO6mC,EAAgB7mC,GAAIkpC,gBAAgBrC,EAAgB7mC,KACpGsf,OAAsBvU,SAIzB,OAFAmT,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,SAGhD,0BAAKr2B,UAAU,kCACb,0BAAKA,UAAU,sBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,aAEhF,mBAAC,GAAD,CACEspB,MAAOtpB,EAAK,YAEZ2iC,MAAO,CAAEn8B,IAAK,GAAIC,IAAK,IACvBI,MAAO09B,EACP33B,SAAUu5B,IAGZ,mBAACxnB,GAAA,EAAD,CACEjc,KAAK,QACLpC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,wBAE7B12B,EAAK,oBAIV,0BAAKK,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAA/D,mBAGA,wBAAGvB,UAAU,4BAA4BO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAnE,yCAIA,mBAAC,GAAD,CACE4nB,QAASya,GACTp9B,MAAO6J,EACP9D,SAAUo5B,KAIbH,GACC,0BAAKxlC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,uBAEhF,mBAACupB,GAAA,EAAD,CACExN,KAAK,yBACLyN,QAASqc,EACTj5B,SAAW/F,GAAUo+B,EAAiB,CAAET,oBAAqB39B,IAC7D4iB,SAAU+a,KAKhB,0BAAKnkC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,sBAEhF,mBAACkhC,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,YACZmhC,QAASsD,EACTkC,QAAUC,GAAc3B,EAAiB,CAAER,oCAAqCmC,MAElF,mBAAC1F,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,4BACZmhC,QAASuD,EACTiC,QAAUC,GAAc3B,EAAiB,CAAEP,sCAAuCkC,MAEpF,mBAAC1F,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,0BACZmhC,QAASwD,EACTgC,QAAUC,GAAc3B,EAAiB,CAAEN,gCAAiCiC,MAE9E,mBAAC1F,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,kBACZmhC,QAASyD,EACT+B,QAAUC,GAAc3B,EAAiB,CAAEL,kCAAmCgC,OAIlF,0BAAKvmC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,kBAEhF,mBAACkhC,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,YACZmhC,QAAS0D,EACT8B,QAAUC,GAAc3B,EAAiB,CAAEJ,mBAAoB+B,MAEjE,mBAAC1F,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,kCACZmhC,QAAS2D,EACT6B,QAAUC,GAAc3B,EAAiB,CAAEH,qBAAsB8B,OAIrE,0BAAKvmC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,qBAEhF,mBAACkhC,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,mBACZmhC,QAAS4D,EACT4B,QAAUC,GAAc3B,EAAiB,CAAEF,sBAAuB6B,MAEpE,mBAAC1F,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,wBACZmhC,QAAS6D,EACT2B,QAAUC,GAAc3B,EAAiB,CAAED,mBAAoB4B,MAGjE,0BAAKvmC,UAAU,OAAOkL,IAAK65B,GACxBqB,GAAeA,EAAY/nB,KAAKukB,GAC/B,mBAAC,GAAD,CACEziC,IAAKyiC,EAAWzlC,GAChBylC,WAAYA,EACZC,oBAAqBoC,EACrBhlC,QAASkmC,OAIdxC,GACC,mBAAC,KAAD,CACEhiC,OAAQyjC,EACRoB,YAAa7C,EACbt8B,QAASi+B,UC3PrB,IAAImB,GAEG,SAASC,GAAsBC,EAAS,IAAKC,EAA8BC,GAAa,GACxFJ,KACHA,GAAe3qC,SAASC,cAAc,SACtC0qC,GAAaP,aAAa,OAAQ,SAGpCO,GAAaP,aAAa,SAAUS,GAEhCE,EACFJ,GAAaK,gBAAgB,YAE7BL,GAAaP,aAAa,WAAY,YAIxCO,GAAaM,SAAW,KACxBN,GAAajgC,MAAQ,GACrBigC,GAAaM,SAAWH,EAExBH,GAAaO,Q,eCPR,SAASC,GAAQC,GACtB,MAAO,CACLC,SAASD,EAAME,UAAU,EAAG,GAAI,IAChCD,SAASD,EAAME,UAAU,EAAG,GAAI,IAChCD,SAASD,EAAME,UAAU,EAAG,GAAI,KAS7B,SAASC,GAAQH,GACtB,MAAMI,EAAKJ,EAAM,GAAGj4B,SAAS,IACvBs4B,EAAKL,EAAM,GAAGj4B,SAAS,IACvBu4B,EAAKN,EAAM,GAAGj4B,SAAS,IAC7B,OAAqB,GAAbq4B,EAAGjpC,OAAc,IAAMipC,EAAKA,IAAoB,GAAbC,EAAGlpC,OAAc,IAAMkpC,EAAKA,IAAoB,GAAbC,EAAGnpC,OAAc,IAAMmpC,EAAKA,GAcrG,SAASC,IAASC,EAAGC,EAAGlX,IAC7BiX,GAAK,IACLC,GAAK,IACLlX,GAAK,IAEL,IACImX,EAAYC,EADZzhC,EAAM9D,KAAK8D,IAAIshC,EAAGC,EAAGlX,GAAItqB,EAAM7D,KAAK6D,IAAIuhC,EAAGC,EAAGlX,GACvBqX,EAAY1hC,EAEnC0e,EAAI1e,EAAMD,EAGd,GAFA0hC,EAAW,GAAPzhC,EAAW,EAAI0e,EAAI1e,EAEnBA,GAAOD,EACTyhC,EAAI,MACC,CACL,OAAQxhC,GACN,KAAKshC,EACHE,GAAKD,EAAIlX,GAAK3L,GAAK6iB,EAAIlX,EAAI,EAAI,GAC/B,MACF,KAAKkX,EACHC,GAAKnX,EAAIiX,GAAK5iB,EAAI,EAClB,MACF,KAAK2L,EACHmX,GAAKF,EAAIC,GAAK7iB,EAAI,EAItB8iB,GAAK,EAGP,MAAO,CAACA,EAAGC,EAAGC,GAcT,SAASC,IAASH,EAAGC,EAAGC,IAC7B,IAAIJ,EAAYC,EAAYlX,EAExBxM,EAAI3hB,KAAKkC,MAAU,EAAJojC,GACfI,EAAQ,EAAJJ,EAAQ3jB,EACZgkB,EAAIH,GAAK,EAAID,GACbK,EAAIJ,GAAK,EAAIE,EAAIH,GACjBM,EAAIL,GAAK,GAAK,EAAIE,GAAKH,GAE3B,OAAQ5jB,EAAI,GACV,KAAK,EACHyjB,EAAII,EACJH,EAAIQ,EACJ1X,EAAIwX,EACJ,MACF,KAAK,EACHP,EAAIQ,EACJP,EAAIG,EACJrX,EAAIwX,EACJ,MACF,KAAK,EACHP,EAAIO,EACJN,EAAIG,EACJrX,EAAI0X,EACJ,MACF,KAAK,EACHT,EAAIO,EACJN,EAAIO,EACJzX,EAAIqX,EACJ,MACF,KAAK,EACHJ,EAAIS,EACJR,EAAIM,EACJxX,EAAIqX,EACJ,MACF,KAAK,EACHJ,EAAII,EACJH,EAAIM,EACJxX,EAAIyX,EAIR,MAAO,CACL5lC,KAAKT,MAAU,IAAJ6lC,GACXplC,KAAKT,MAAU,IAAJ8lC,GACXrlC,KAAKT,MAAU,IAAJ4uB,IAuDR,SAAS2X,GAAgBC,GAC9B,IAAKC,EAAKC,EAAY/hC,GAASihC,GAAQY,GAOvC,OALAE,EAAajmC,KAAK6D,IAAI,EAAGoiC,EAAa,IAAO,IAAO,EAAIA,IACxD/hC,EAAQA,EAAQ,GACZlE,KAAK8D,IAAI,EAAW,IAARI,GACZlE,KAAK8D,IAAI,EAAG9D,KAAK6D,IAAI,EAAG,EAAY,IAARK,IAExB,QAAa,IAAN8hC,MAA2B,IAAbC,OAA8B,IAAR/hC,U,0BCxKrD,MAsFA,IAAeM,EAAAA,EAAAA,KAtFqB,EAClC0hC,UAAAA,EACAjX,MAAAA,EACAwP,WAAAA,EACA9gC,QAAAA,MAEA,MAAM,KAAEwoC,EAAF,SAAQ3sC,GAAa0sC,EACrBE,EAAkB,YAAW5sC,EAASqB,KACtCmX,EAAexY,EAAS6sC,eACxBA,GAAiB70B,EAAAA,EAAAA,GAAU,GAAE40B,YAC7BE,GAAWC,EAAAA,GAAAA,GACf/sC,EAASgtC,WAAahtC,EAASgtC,UAAUC,QACzC7gC,QAAQygC,IACR,IAEI,kBACJK,EADI,sBACe9F,EADf,qBACsC35B,IACxC45B,EAAAA,GAAAA,GAAsBwF,GAAkBr0B,EAAc,SACnD20B,EAAmBC,IAAwBjmC,EAAAA,EAAAA,KAAS,IAEzDtC,UAAWwoC,EADP,iBACkBhoC,IACpBiT,EAAAA,EAAAA,GAA6Bs0B,GAAiBO,GAC5CG,GAAyD,KAAnCr9B,EAAAA,EAAAA,GAAYk9B,IAChC5/B,aAAcC,EAAqBC,qBAAsBC,IAAsBC,EAAAA,EAAAA,GACpFw/B,IAAsBE,GAAcV,IAASY,EAAAA,QAC9C9nC,EACA6nC,EACA,QAGIE,GAAc/hC,EAAAA,EAAAA,MACpB+hC,EAAY9gC,QAAU+oB,EAEtB,MAAMgY,GAAe7pC,EAAAA,EAAAA,KAAY,KAC/B,WACE,MAAM8pC,QAAaC,EAAAA,GAAAA,IAAUN,SACvBO,GAASC,KAAKC,EAAAA,GAAsBN,EAAY9gC,QAAUghC,GAChEvpC,EAAQwoC,IAHV,KAKC,CAACU,EAAWlpC,EAASwoC,KAExBvlC,EAAAA,EAAAA,KAAU,KACJimC,GACFI,MAED,CAACJ,EAAWI,IAEf,MAAM3d,GAAclsB,EAAAA,EAAAA,KAAY,KAC1BypC,EACFI,IAEAL,GAAsBW,IAAeA,MAEtC,CAACV,EAAWI,IAETvpC,GAAY8D,EAAAA,EAAAA,GAChB,gBACAi9B,GAAc,YAGhB,OACE,0BAAK/gC,UAAWA,EAAWC,QAAS2rB,GAClC,0BAAK5rB,UAAU,eACZgpC,GACC,6BACE99B,IAAK09B,EACL5oC,UAAU,cAGbkjC,GACC,0BACE9mC,IAAKusC,GAAkBr0B,EACvBtU,UAAY,cAAauJ,IACzBuG,IAAI,KAGPxG,GACC,0BAAKtJ,WAAW8D,EAAAA,EAAAA,GAAe,oBAAqB0F,IAClD,mBAAC/G,EAAA,EAAD,CAAiBC,SAAUvB,EAAkBlB,QAAS2rB,UC9D5DI,IAAevoB,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAO,GA0HnD,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAM6yB,GAAQC,EAAAA,EAAAA,IAAY9yB,IACpB,WAAEorC,EAAF,UAAcC,GAAcrrC,EAAO4R,SAAS05B,OAAOzY,IAAU,IAC7D,iBAAE0Y,GAAqBvrC,EAAO4R,SAEpC,MAAO,CACLw5B,WAAAA,EACAC,UAAAA,EACAE,iBAAAA,EACA1Y,MAAAA,MAGJ,CAACnyB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBAAkB,kBAAmB,sBAdrBZ,EAxHyD,EAC3Eyc,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACAqd,WAAAA,EACAC,UAAAA,EACAE,iBAAAA,EACA1Y,MAAAA,EACA2Y,eAAAA,EACAC,gBAAAA,EACAC,iBAAAA,MAEA,MAAMC,GAAW9iC,EAAAA,EAAAA,MACjB8iC,EAAS7hC,QAAU+oB,GAGnBruB,EAAAA,EAAAA,KAAU,KACR8oB,IAAa,KACXke,SAED,CAACA,IAEJ,MAAMI,GAAmB5qC,EAAAA,EAAAA,KAAaqE,IACpC,MAAM,MAAEwmC,GAAUxmC,EAAE0G,OAEhB8/B,GAASA,EAAMlsC,OAAS,GAC1B8rC,EAAgBI,EAAM,MAEvB,CAACJ,IAEEK,GAAwB9qC,EAAAA,EAAAA,KAAY,KACxCgnC,GAnCoB,aAmCmB4D,GAAkB,KACxD,CAACA,IAEEG,GAAiB/qC,EAAAA,EAAAA,KAAY,KACjC+1B,EAAeY,EAAAA,GAAAA,8BACd,CAACZ,IAEEiV,GAAuBhrC,EAAAA,EAAAA,KAAY,KACvC0qC,EAAiB,CACf7Y,MAAAA,EACAuY,gBAAYvoC,EACZopC,qBAAiBppC,EACjBwoC,WAAW,EACXa,aAAwB,SAAVrZ,EAAmBsZ,EAAAA,GAA2BC,EAAAA,MAE7D,CAACV,EAAkB7Y,IAEhBwZ,GAAwBrrC,EAAAA,EAAAA,KAAa+oC,IACzC2B,EAAiB,CAAE7Y,MAAO8Y,EAAS7hC,QAASshC,WAAYrB,IACxD,MAAMuC,EAAmBf,GAAoBA,EAAiBvJ,MAAM8H,GAAcA,EAAUC,OAASA,IACjGuC,GAAoBA,EAAiBlvC,SAASgtC,WFwC/CmC,eAA+BlkC,GAEpC,MACMmkC,EAAuC,CAAC,EAAG,EAAG,GACpD,IAAInP,EACAjxB,EACAzH,EAEAhF,EADA4lB,GAAK,EAELknB,EAAgC,CAAC,EAAG,EAAG,GACvCtO,EAAQ,EAEZ,MAAMuO,EAAStvC,SAASC,cAAc,UAChCsvC,EAAUD,EAAOE,YAAcF,EAAOE,WAAW,MACvD,IAAKD,EACH,OAAOH,EAGT,MAAM38B,QAAcg9B,EAAAA,GAAAA,IAAaxkC,GACjC1D,EAASkL,EAAMi9B,eAAiBj9B,EAAMhR,cAAgBgR,EAAMlL,OAC5DyH,EAAQyD,EAAMk9B,cAAgBl9B,EAAMm9B,aAAen9B,EAAMzD,MACzDsgC,EAAO/nC,OAASA,EAChB+nC,EAAOtgC,MAAQA,EAEfugC,EAAQM,UAAUp9B,EAAO,EAAG,GAE5B,IACEwtB,EAAOsP,EAAQO,aAAa,EAAG,EAAG9gC,EAAOzH,GACzC,MAAOU,GACP,OAAOmnC,EAMT,IAHA7sC,EAAS09B,EAAKA,KAAK19B,QAGX4lB,GAAK4nB,IAAiBxtC,KAC1Bw+B,EACFsO,EAAI,IAAMpP,EAAKA,KAAK9X,GACpBknB,EAAI,IAAMpP,EAAKA,KAAK9X,EAAI,GACxBknB,EAAI,IAAMpP,EAAKA,KAAK9X,EAAI,GAO1B,OAJAknB,EAAI,GAAK7oC,KAAKkC,MAAM2mC,EAAI,GAAKtO,GAC7BsO,EAAI,GAAK7oC,KAAKkC,MAAM2mC,EAAI,GAAKtO,GAC7BsO,EAAI,GAAK7oC,KAAKkC,MAAM2mC,EAAI,GAAKtO,GAEtBsO,EErFHW,CAAgBd,EAAiBlvC,SAASgtC,UAAUC,SACjDlN,MAAM/5B,IACL,MAAM8oC,EAAexC,GAAgBtmC,GAC/BumC,EAAY,IAAGhB,GAAQvlC,KAC7BsoC,EAAiB,CAAE7Y,MAAO8Y,EAAS7hC,QAASmiC,gBAAiBtC,EAAUuC,aAAAA,SAG5E,CAACX,EAAkBG,IAEhB2B,GAA4BrsC,EAAAA,EAAAA,KAAaqE,IAC7CqmC,EAAiB,CAAE7Y,MAAO8Y,EAAS7hC,QAASuhC,UAAWhmC,EAAE0G,OAAOq2B,YAC/D,CAACsJ,IAEEzqC,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,uBAElD,MAAM2V,EAAc/B,GAAoBA,EAAiB,IAAMA,EAAiB,GAAGxB,OAASY,EAAAA,GAE5F,OACE,0BAAKrpC,UAAU,4DACb,0BAAKA,UAAU,sBACb,mBAACse,GAAA,EAAD,CACEjc,KAAK,aACLrC,UAAU,OACVsM,SAAU0/B,EACV/rC,QAASuqC,GAER7qC,EAAK,gBAGR,mBAAC2e,GAAA,EAAD,CACEjc,KAAK,WACLrC,UAAU,OACVC,QAASwqC,GAER9qC,EAAK,aAGR,mBAAC2e,GAAA,EAAD,CAAUjc,KAAK,WAAWpC,QAASyqC,GAChC/qC,EAAK,yBAGR,mBAACkhC,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,qBACZmhC,QAAS54B,QAAQ6hC,GACjBx9B,SAAUw/B,KAIb9B,EACC,0BAAKjqC,UAAU,uBACZiqC,EAAiB5rB,KAAKmqB,GACrB,mBAAC,GAAD,CACEA,UAAWA,EACXjX,MAAOA,EACPwP,WAAY+I,IAAetB,EAAUC,KACrCxoC,QAAS8qC,OAKf,mBAACpsB,GAAA,EAAD,WC/GFstB,GAAcxE,GAAQR,GAAQ,WAC9BiF,GAAoB,CACxB,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WAsMzD,SAASC,GAAcC,EAA+BC,GACpD,MAAO,CACLC,cAAe,CACbhqC,KAAKT,MAAOuqC,EAAI,IAAOC,EAAME,UAAUzhC,MAAQ,IAC/CxI,KAAKT,OAAO,EAAIuqC,EAAI,KAAOC,EAAME,UAAUlpC,OAAS,KAEtDmpC,YAAalqC,KAAKT,MAAMuqC,EAAI,IAAMC,EAAMI,QAAQ3hC,MAAQ,KAI5D,SAAS4hC,IACP,cAAEJ,EAAF,YAAiBE,GACjBH,GAEA,MAAO,CACLG,GAAeH,EAAMI,QAAQ3hC,MAAQ,GACrCwhC,EAAc,IAAMD,EAAME,UAAUzhC,MAAQ,GAC5C,EAAIwhC,EAAc,IAAMD,EAAME,UAAUlpC,OAAS,IA8ErD,UAAeyD,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAM6yB,GAAQC,EAAAA,EAAAA,IAAY9yB,IACpB,gBAAEisC,GAAoBjsC,EAAO4R,SAAS05B,OAAOzY,IAAU,GAC7D,MAAO,CACLoZ,gBAAAA,EACApZ,MAAAA,MAGJ,CAACnyB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,sBATpCZ,EAlSyD,EAC3Eyc,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACA8E,MAAAA,EACAoZ,gBAAAA,EACAP,iBAAAA,MAEA,MAAMC,GAAW9iC,EAAAA,EAAAA,MACjB8iC,EAAS7hC,QAAU+oB,EAEnB,MAAM9T,GAAelW,EAAAA,EAAAA,IAAuB,MAEtColC,GAAiBplC,EAAAA,EAAAA,IAAuB,MAExCqlC,GAAerlC,EAAAA,EAAAA,IAAuB,MACtCslC,GAAgBtlC,EAAAA,EAAAA,KAAO,IAEtB6kC,EAAKU,IAAU7pC,EAAAA,EAAAA,IA2KxB,SAAuB0nC,GACrB,OAAOA,GAAmBA,EAAgBz2B,WAAW,KACjDuzB,GAAQR,GAAQ0D,EAAgBrmB,QAAQ,IAAK,MAC7C2nB,GA9K2Bc,CAAcpC,IAEvCqC,GAASzlC,EAAAA,EAAAA,IAAO6kC,IACtBlpC,EAAAA,EAAAA,KAAU,KACR8pC,EAAOxkC,QAAU4jC,IAChB,CAACA,IAEJ,MAAOh/B,EAAY6/B,EAAgBC,IAAoBvqB,EAAAA,GAAAA,MAChDwqB,EAAUC,IAAenqC,EAAAA,EAAAA,IAAS,KAClCoqC,EAAUC,IAAerqC,EAAAA,EAAAA,IAAS,IAEnCsqC,GAAWhmC,EAAAA,EAAAA,MACXimC,GAAcjmC,EAAAA,EAAAA,OAGpBrE,EAAAA,EAAAA,KAAU,KAER,MAAMqpC,EAAY,CAChBkB,WAAYd,EAAenkC,QAASilC,eACjCnuC,EAAAA,EAAAA,IAAKqtC,EAAenkC,QAASiG,wBAAyB,CAAC,MAAO,QAAS,YAEtEg+B,EAAU,CACdgB,WAAYb,EAAapkC,QAASilC,eAC/BnuC,EAAAA,EAAAA,IAAKstC,EAAapkC,QAASiG,wBAAyB,CAAC,WAK1D,SAASi/B,EAAgB3pC,GACvB,MAAMuoC,EAAgB,CACpBhqC,KAAK6D,IAAI7D,KAAK8D,IAAI,EAAGrC,EAAEoL,MAASo9B,EAAUkB,YAAalB,EAAUzhC,MAAQ,GACzExI,KAAK6D,IAAI7D,KAAK8D,IAAI,EAAGrC,EAAEqL,MAASm9B,EAAUp1B,IAAMsG,EAAajV,QAASlL,WAAYivC,EAAUlpC,OAAS,KAGjG,YAAEmpC,GAAgBL,GAAca,EAAOxkC,QAAS+kC,EAAS/kC,SAE/DskC,EAAOJ,GAAc,CAAEJ,cAAAA,EAAeE,YAAAA,GAAee,EAAS/kC,UAC9DykC,IAWF,SAASU,EAAc5pC,GACrB,MAAM,cAAEuoC,GAAkBH,GAAca,EAAOxkC,QAAS+kC,EAAS/kC,SAC3DgkC,EAAclqC,KAAK6D,IAAI7D,KAAK8D,IAAI,EAAGrC,EAAEoL,MAASs9B,EAAQgB,YAAahB,EAAQ3hC,MAAQ,GAEzFgiC,EAAOJ,GAAc,CAAEJ,cAAAA,EAAeE,YAAAA,GAAee,EAAS/kC,UAC9DykC,IA3BFM,EAAS/kC,QAAU,CAAE+jC,UAAAA,EAAWE,QAAAA,IAchC9xB,EAAAA,EAAAA,GAAcgyB,EAAenkC,QAAU,CACrColC,UAAWF,EACXG,OAAQH,EACRI,UAAWZ,EACXjtC,QAASitC,EACTa,YAAY,KAWdpzB,EAAAA,EAAAA,GAAciyB,EAAapkC,QAAU,CACnColC,UAAWD,EACXE,OAAQF,EACRG,UAAWZ,EACXjtC,QAASitC,EACTa,YAAY,MAEb,CAACd,EAAgBC,IAEpB,MAAM,cAAEZ,EAAgB,CAAC,EAAG,GAAtB,YAA0BE,EAAc,GAAMe,EAAS/kC,QAAU2jC,GAAcC,EAAKmB,EAAS/kC,SAAW,GACxGwlC,EAAM3G,GAAQU,GAAQqE,IACtB9D,EAAM8D,EAAI,GACV6B,EAAS5G,GAAQU,GAAQ,CAACO,EAAK,EAAG,MAGxCplC,EAAAA,EAAAA,KAAU,KACR,MAAMioC,EAAMpD,GAAQqE,GACdtqC,EAAS,IAAGulC,GAAQ8D,KAK1B,GAHAiC,EAAYjC,EAAIz/B,KAAK,OACrB4hC,EAAYxrC,IAEP+qC,EAAcrkC,QAAS,CAC1B,MAAMoiC,EAAexC,GAAgB+C,GACrCf,EAAiB,CACf7Y,MAAO8Y,EAAS7hC,QAChBshC,gBAAYvoC,EACZopC,gBAAiB7oC,EACjB8oC,aAAAA,IAGJiC,EAAcrkC,SAAU,IACvB,CAAC4jC,EAAKhC,KAGTlnC,EAAAA,EAAAA,KAAU,MA2GZ,SACEkoC,EACA9C,EACAkF,EACAD,GAEA,IAAIW,EACAtG,EACAuG,EAECX,EAAYhlC,SAAY+kC,EAAS/kC,SAWpC0lC,EAAIX,EAAS/kC,QAAQ+jC,UAAUzhC,MAC/B88B,EAAI2F,EAAS/kC,QAAQ+jC,UAAUlpC,OAC/B8qC,EAAMX,EAAYhlC,UAXlB0lC,EAAI9C,EAAOM,YACX9D,EAAIwD,EAAO7tC,aACX4wC,EAAM/C,EAAOE,WAAW,MAExBF,EAAOtgC,MAAQojC,EACf9C,EAAO/nC,OAASukC,EAEhB4F,EAAYhlC,QAAU2lC,GAOxB,MAAMC,EAAUD,EAAKE,gBAAgBH,EAAGtG,GAClC0G,EAASF,EAAQrS,KACjBwS,EAAMxG,GAAQ,CAACO,EAAK,EAAG,IAE7B,IAAIhuB,EAAQ,EAEZ,IAAK,IAAI3M,EAAI,EAAGA,EAAIi6B,EAAGj6B,IAAK,CAC1B,MAAM6gC,EAAO,EAAI7gC,GAAKi6B,EAAI,GACpB6G,EAAK,CAAC,IAAMD,EAAM,IAAMA,EAAM,IAAMA,GACpCE,EAAK,CAACH,EAAI,GAAKC,EAAMD,EAAI,GAAKC,EAAMD,EAAI,GAAKC,GACnD,IAAK,IAAI9gC,EAAI,EAAGA,EAAIwgC,EAAGxgC,IAAK,CAC1B,MAAMihC,EAAOjhC,GAAKwgC,EAAI,GACtBI,EAAOh0B,KAAWm0B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOh0B,KAAWm0B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOh0B,KAAWm0B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOh0B,KAAW,KAItB6zB,EAAKS,aAAaR,EAAS,EAAG,GAvJ5BS,CAAUlC,EAAenkC,QAASjK,WAAiC+pC,EAAKkF,EAAaD,KACpF,CAACjF,KAGJplC,EAAAA,EAAAA,KAAU,MAsJZ,SAAiBkoC,GACf,MAAM8C,EAAI9C,EAAOM,YAEjBN,EAAOtgC,MAAQojC,EACf9C,EAAO/nC,OAFG,EAGV,MAAM8qC,EAAM/C,EAAOE,WAAW,MAExB8C,EAAUD,EAAIE,gBAAgBH,EAL1B,GAMJI,EAASF,EAAQrS,KAEvB,IAAIzhB,EAAQ,EAEZ,IAAK,IAAI5M,EAAI,EAAGA,EAAIwgC,EAAGxgC,IAAK,CAC1B,MACMy9B,EAAMpD,GAAQ,CADRr6B,GAAKwgC,EAAI,GACK,EAAG,IAE7BI,EAAOh0B,KAAW6wB,EAAI,GACtBmD,EAAOh0B,KAAW6wB,EAAI,GACtBmD,EAAOh0B,KAAW6wB,EAAI,GAEtBmD,EAAOh0B,KAAW,IAGpB6zB,EAAIS,aAAaR,EAAS,EAAG,GA5K3BU,CAAQlC,EAAapkC,QAASjK,cAC7B,IAEH,MAAMwwC,GAAkBrvC,EAAAA,EAAAA,KAAaqE,IACnC,MAAMirC,EAAWjrC,EAAEqG,cAAc5D,MAAM8d,QAAQ,WAAY,IAAIoP,MAAM,EAAG,IAExE,GAAIsb,EAAS5gB,MAAM,mCAAoC,CACrD,MAAM+c,EAAM6D,EAAS1e,MAAM,KAAKjS,KAAK4wB,GAAYzkC,OAAOykC,EAAQnX,UAChEgV,EAAOrF,GAAQ0D,IAGjBpnC,EAAEqG,cAAc5D,MAAQwoC,IACvB,IAEGE,GAAkBxvC,EAAAA,EAAAA,KAAaqE,IACnC,MAAMorC,EAAWprC,EAAEqG,cAAc5D,MAAM8d,QAAQ,gBAAiB,IAAIoP,MAAM,EAAG,GAEzEyb,EAAS/gB,MAAM,uBACjB0e,EAAOrF,GAAQR,GAAQkI,EAAS7qB,QAAQ,IAAK,OAG/CvgB,EAAEqG,cAAc5D,MAAQ2oC,IACvB,IAEGC,GAA6B1vC,EAAAA,EAAAA,KAAaqE,IAC9C+oC,EAAOrF,GAAQR,GAAQljC,EAAEqG,cAAcilC,QAAQvtC,MAAOwiB,QAAQ,IAAK,SAClE,IAEGtkB,GAAY8D,EAAAA,EAAAA,GAChB,gEACAsJ,GAAc,eAKhB,OAFAiO,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,4BAGhD,0BAAKnrB,IAAKuS,EAAczd,UAAWA,GACjC,0BAAKA,UAAU,sBACb,0BAAKkL,IAAKyhC,EAAgB3sC,UAAU,gBAClC,kCACA,0BACEA,UAAU,SAEVnC,MAAQ,wBAAuByuC,EAAc,SAASA,EAAc,6BAA6B0B,QAGrG,0BAAK9iC,IAAK0hC,EAAc5sC,UAAU,cAChC,kCACA,0BACEA,UAAU,SAEVnC,MAAQ,yBAAwB2uC,4BAAsCyB,QAG1E,0BAAKjuC,UAAU,SACb,mBAAC4d,GAAA,EAAD,CAAWpX,MAAO6mC,EAAUpkB,MAAM,MAAM1c,SAAU2iC,IAClD,mBAACtxB,GAAA,EAAD,CAAWpX,MAAO2mC,EAAUlkB,MAAM,MAAM1c,SAAUwiC,MAGtD,0BAAK/uC,UAAU,qBACZksC,GAAkB7tB,KAAKvc,GACtB,0BACE9B,UAAW8B,IAAW,IAAGksC,IAAQ,cAAWzsC,EAC5C,aAAYO,EAEZjE,MAAQ,qBAAoBiE,KAC5B7B,QAASmvC,YC1BrB,IAAetoC,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAAsBC,IACjC,CACL4wC,6BAA8BpnC,QAAQxJ,EAAO4R,SAASC,MAAM++B,8BAC5DC,8BAA+BrnC,QAAQxJ,EAAO4R,SAASC,MAAMg/B,+BAC7DC,sBAAuBtnC,QAAQxJ,EAAO4R,SAASC,MAAMi/B,uBACrDC,uBAAwBvnC,QAAQxJ,EAAO4R,SAASC,MAAMk/B,wBACtDC,0BAA2BxnC,QAAQxJ,EAAO4R,SAASC,MAAMm/B,2BACzDC,2BAA4BznC,QAAQxJ,EAAO4R,SAASC,MAAMo/B,4BAC1DC,8BAA+B1nC,QAAQxJ,EAAO4R,SAASC,MAAMq/B,+BAC7DC,oBAAqBnxC,EAAO4R,SAASC,MAAMs/B,oBAC3CC,qBAAsBpxC,EAAO4R,SAASC,MAAMu/B,qBAC5CC,wBAAyBrxC,EAAO4R,SAASC,MAAMw/B,4BAGnD,CAAC3wC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,2BACA,kCACA,6BACA,mCAlBkBZ,EA1KqD,EACvEyc,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACA6iB,6BAAAA,EACAC,8BAAAA,EACAC,sBAAAA,EACAC,uBAAAA,EACAC,0BAAAA,EACAC,2BAAAA,EACAC,8BAAAA,EACAE,qBAAAA,EACAD,oBAAAA,EACAE,wBAAAA,EACAC,yBAAAA,EACAC,gCAAAA,EACAC,2BAAAA,EACAC,8BAAAA,OAEAjtC,EAAAA,EAAAA,KAAU,KACR8sC,MACC,CAACA,IAEJ,MAAMI,GAAuB1wC,EAAAA,EAAAA,KAAY,CACvCqE,EACAssC,EACAC,KAEA,MAAMC,EAA+B,YAAbF,GACnBf,IACc,UAAbe,EAAuBb,EAAwBE,GAC/Cc,EAAyC,YAAbH,EAC9Bd,EACc,UAAbc,EAAuBZ,EAAyBE,EAErDO,EAA2B,CACzBG,SAAAA,KACgB,WAAZC,GAAwB,CAAEvoB,UAAWhkB,EAAE0G,OAAOq2B,QAAS2P,mBAAoBD,MAC/D,iBAAZF,GAA8B,CAAEG,mBAAoB1sC,EAAE0G,OAAOq2B,QAAS/Y,SAAUwoB,OAErF,CACDZ,EAA4BD,EAC5BD,EAAwBD,EACxBD,EAA+BD,EAC/BY,IAGIQ,GAAkChxC,EAAAA,EAAAA,KAAaqE,IACnDksC,EAAgC,CAC9BloB,UAAWhkB,EAAE0G,OAAOq2B,YAErB,CAACmP,IAEEtwC,GAAOC,EAAAA,EAAAA,KAIb,OAFAyb,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,eAGhD,0BAAKr2B,UAAU,kCACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAA/D,qBAGA,mBAACs/B,GAAA,EAAD,CACE5X,MAAM,oBAENwc,SAAU9lC,EAAKkwC,EAAsB,gCAAkC,kCACvE/O,QAAS+O,EACTtjC,SAAWxI,IACTosC,EAA8B,CAAEN,oBAAqB9rC,EAAE0G,OAAOq2B,aAGlE,mBAACD,GAAA,EAAD,CACE5X,MAAM,wBACN3c,UAAWujC,EAEXpK,SAAU9lC,EAAKmwC,EAAuB,gCAAkC,kCACxEhP,QAASgP,EACTvjC,SAAWxI,IACTosC,EAA8B,CAAEL,qBAAsB/rC,EAAE0G,OAAOq2B,aAGnE,0BAAK9gC,UAAU,wBACb,mBAAC,GAAD,CACEipB,MAAM,QACN3c,UAAWujC,EACXvN,MAAO,CACLn8B,IAAK,EACLC,IAAK,IAEPI,MAAOupC,EACPxjC,SAAWokC,IACTR,EAA8B,CAAEJ,wBAAyBY,SAKjE,0BAAK3wC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAC5D5B,EAAK,6BAGR,mBAACkhC,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,gCAEZ8lC,SAAU9lC,EAAK2vC,EAA+B,gCAAkC,kCAChFxO,QAASwO,EACT/iC,SAAWxI,IAAQqsC,EAAqBrsC,EAAG,UAAW,aAExD,mBAAC88B,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,kBACZ2M,UAAWgjC,EAEX7J,SAAU9lC,EAAK4vC,EAAgC,gCAAkC,kCACjFzO,QAASyO,EACThjC,SAAWxI,IAAQqsC,EAAqBrsC,EAAG,UAAW,oBAI1D,0BAAK/D,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,iBAEhF,mBAACkhC,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,0BACZ8lC,SAAU9lC,EAAK6vC,EAAwB,gCAAkC,kCACzE1O,QAAS0O,EACTjjC,SAAWxI,IAAQqsC,EAAqBrsC,EAAG,QAAS,aAEtD,mBAAC88B,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,kBACZ2M,UAAWkjC,EACX/J,SAAU9lC,EAAK8vC,EAAyB,gCAAkC,kCAC1E3O,QAAS2O,EACTljC,SAAWxI,IAAQqsC,EAAqBrsC,EAAG,QAAS,oBAIxD,0BAAK/D,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,mBAEhF,mBAACkhC,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,4BAEZ8lC,SAAU9lC,EAAK+vC,EAA4B,gCAAkC,kCAC7E5O,QAAS4O,EACTnjC,SAAWxI,IAAQqsC,EAAqBrsC,EAAG,YAAa,aAE1D,mBAAC88B,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,kBACZ2M,UAAWojC,EAEXjK,SAAU9lC,EAAKgwC,EAA6B,gCAAkC,kCAC9E7O,QAAS6O,EACTpjC,SAAWxI,IAAQqsC,EAAqBrsC,EAAG,YAAa,oBAI5D,0BAAK/D,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,eAEhF,mBAACkhC,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,iBACZmhC,QAAS8O,EACTrjC,SAAUmkC,UCSpB,IAAe5pC,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MACE4R,UACEC,OAAO,YAAEqgC,EAAF,mBAAeC,EAAf,mBAAmCC,GADlC,QAERC,GAHE,QAKJC,EALI,eAMJC,GACEvyC,EAEJ,MAAO,CACLkyC,YAAAA,EACAM,aAAcF,EAAQG,WACtBC,cAAeH,EAAe5yC,OAC9BwyC,mBAAAA,EACAC,mBAAAA,EACAO,6BAA8BN,EAAQO,aAAeP,EAAQO,YAAYC,WACzEC,0BAA2BT,EAAQU,UAAYV,EAAQU,SAASF,WAChEG,8BAA+BX,EAAQY,cAAgBZ,EAAQY,aAAaJ,WAC5EK,4BAA6Bb,EAAQc,UAAYd,EAAQc,SAASN,WAClEO,4BAA6Bf,EAAQgB,YAAchB,EAAQgB,WAAWR,eAG1E,CAACnyC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,sBAAuB,qBAAsB,sBAAuB,sBAAuB,2BAzB3EZ,EAhL+C,EACjEyc,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACAmkB,YAAAA,EACAM,aAAAA,EACAE,cAAAA,EACAP,mBAAAA,EACAC,mBAAAA,EACAO,6BAAAA,EACAG,0BAAAA,EACAE,8BAAAA,EACAE,4BAAAA,EACAE,4BAAAA,EACAE,oBAAAA,EACAC,oBAAAA,EACAC,mBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,OAEAlvC,EAAAA,EAAAA,KAAU,KACR+uC,IACAC,IACAF,IACAG,MACC,CAACF,EAAqBC,EAAoBF,EAAqBG,IAElE,MAAMxyC,GAAOC,EAAAA,EAAAA,KAIb,SAASyyC,EAAmBd,GAC1B,OAAQA,GACN,IAAK,YACH,OAAO5xC,EAAK,gBAEd,IAAK,WACH,OAAOA,EAAK,eAEd,IAAK,SACH,OAAOA,EAAK,cAMlB,OAjBA0b,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,SAkBhD,0BAAKr2B,UAAU,kCACb,0BAAKA,UAAU,sBACb,mBAACse,GAAA,EAAD,CACEjc,KAAK,cACLs6B,QAAM,EACN18B,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,sBAE9B,0BAAKr2B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,iBAC7BuxC,EAAe,GACd,2BAAMlxC,UAAU,WAAWO,IAAI,QAC5BZ,EAAK,QAASuxC,MAKvB,mBAAC5yB,GAAA,EAAD,CACEjc,KAAK,OACLs6B,QAAM,EACN18B,QAAS,IAAMw1B,EACbmb,EAAcva,EAAAA,GAAAA,aAA+BA,EAAAA,GAAAA,gBAG/C,0BAAKr2B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,wBAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5BZ,EAAKixC,EAAc,aAAe,kBAIzC,mBAACtyB,GAAA,EAAD,CACEjc,KAAK,kBACLs6B,QAAM,EACN18B,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,wBAE9B,0BAAKr2B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,kBAC7ByxC,EAAgB,GACf,2BAAMpxC,UAAU,WAAWO,IAAI,QACV,IAAlB6wC,EAAsB,YAAe,GAAEA,iBAOlD,0BAAKpxC,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,iBAErF,mBAAC2e,GAAA,EAAD,CACEqe,QAAM,EACN38B,UAAU,UACVC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,qBAE9B,0BAAKr2B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,sBAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5B8xC,EAAmBhB,MAI1B,mBAAC/yB,GAAA,EAAD,CACEqe,QAAM,EACN38B,UAAU,UACVC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,kBAE9B,0BAAKr2B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,kBAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5B8xC,EAAmBb,MAI1B,mBAAClzB,GAAA,EAAD,CACEqe,QAAM,EACN38B,UAAU,UACVC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,sBAE9B,0BAAKr2B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,6BAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5B8xC,EAAmBX,MAI1B,mBAACpzB,GAAA,EAAD,CACEqe,QAAM,EACN38B,UAAU,UACVC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,oBAE9B,0BAAKr2B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,yBAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5B8xC,EAAmBT,MAI1B,mBAACtzB,GAAA,EAAD,CACEqe,QAAM,EACN38B,UAAU,UACVC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,oBAE9B,0BAAKr2B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,gBAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5B8xC,EAAmBP,OAM3BhB,GACC,0BAAK9wC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAC5D5B,EAAK,iCAER,mBAACkhC,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,4CACZ8lC,SAAU9lC,EAAK,gCACfmhC,QAAS54B,QAAQ2oC,GACjBvkC,UAAWwkC,EACXxK,QAAS8L,U,cCjHrB,UAAetrC,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACQ,CACL4zC,UAAW5zC,EAAO4R,SAASC,MAAM+hC,UACjCC,SAAU7zC,EAAO4R,SAASC,MAAMgiC,aAGpC,CAACnzC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,gBAAiB,sBARDZ,EAhEgD,EAClEyc,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACA6lB,UAAAA,EACAC,SAAAA,EACAC,cAAAA,EACA5N,iBAAAA,MAEA,MAAO6N,EAAkBC,IAAuBzvC,EAAAA,EAAAA,IAAiBsvC,IAC1D9gB,EAAWkhB,EAAeC,IAAmBjwB,EAAAA,GAAAA,MAGpDzf,EAAAA,EAAAA,KAAU,KACRsvC,MACC,CAACA,IAEJ,MAAMjQ,GAAe7iC,EAAAA,EAAAA,KAAamzC,IAChCH,EAAoBG,GACpBF,KAEKG,EAAAA,GAAAA,IAAYD,GAAsB,KACrCD,IAEAhO,EAAiB,CAAE2N,SAAUM,SAE9B,CAACF,EAAeC,EAAiBhO,IAE9Bzb,GAAU1nB,EAAAA,EAAAA,KAAQ,IACf6wC,EAsBX,SAAsBA,GACpB,MAAMS,GAAmBrvC,OAAOsvC,UAAUT,UAAY,MAAMU,cACtDC,EAAgBH,EAAgBI,OAAO,EAAG,GAEhD,OAAOb,EAAUj0B,KAAI,EAAGw0B,SAAAA,EAAUO,WAAAA,EAAY13B,KAAAA,MAAzB,CACnBlV,MAAOqsC,EACP5pB,MAAOmqB,EACP3N,SAAU/pB,MACR6U,MAAMC,IACDuiB,GAAoBviB,EAAEhqB,QAAUusC,GAAmBviB,EAAEhqB,QAAU0sC,EAAsB,GAAJ,IA/BrEG,CAAaf,QAAa/wC,GAC5C,CAAC+wC,IAIJ,OAFAj3B,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,UAGhD,0BAAKr2B,UAAU,kEACZmpB,EACC,mBAACD,GAAA,EAAD,CACExN,KAAK,yBACLyN,QAASA,EACTC,SAAUqpB,EACVa,cAAe7hB,EAAYghB,OAAmBlxC,EAC9CgL,SAAUg2B,IAGZ,mBAAC5jB,GAAA,EAAD,WCtED,SAAS40B,GAAcC,GAC5B,OAAQA,GACN,KAAKnd,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,MAAO,cACT,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,MAAO,eACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,cCQb,MAgLA,IAAevvB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAU80C,OAAAA,MACT,IAAIC,EAEJ,MACE93B,OAASC,KAAMC,GACfvL,UAAU,QAAEygC,IACVryC,EAEJ,OAAQ80C,GACN,KAAKnd,EAAAA,GAAAA,mBACHod,EAAkB1C,EAAQO,YAC1B,MAEF,KAAKjb,EAAAA,GAAAA,gBACHod,EAAkB1C,EAAQU,SAC1B,MAEF,KAAKpb,EAAAA,GAAAA,oBACHod,EAAkB1C,EAAQY,aAC1B,MAEF,KAAKtb,EAAAA,GAAAA,kBACHod,EAAkB1C,EAAQc,SAC1B,MAEF,KAAKxb,EAAAA,GAAAA,kBACHod,EAAkB1C,EAAQgB,WAI9B,OAAK0B,EAIE,IACFA,EACH53B,UAAAA,GALO,MAQX,CAACzc,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAxCpCZ,EAhLyD,EAC3E+0C,OAAAA,EACAt4B,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACA8kB,WAAAA,EACAmC,aAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAh4B,UAAAA,EACAi4B,qBAAAA,MAEA,MAAMn0C,GAAOC,EAAAA,EAAAA,KAEPm0C,GAAoBtyC,EAAAA,EAAAA,KAAQ,KAChC,OAAQ+xC,GACN,KAAKnd,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACH,MAAO,CACL,CAAE7vB,MAAO,YAAayiB,MAAOtpB,EAAK,iBAClC,CAAE6G,MAAO,WAAYyiB,MAAOtpB,EAAK,iBAGrC,QACE,MAAO,CACL,CAAE6G,MAAO,YAAayiB,MAAOtpB,EAAK,iBAClC,CAAE6G,MAAO,WAAYyiB,MAAOtpB,EAAK,gBACjC,CAAE6G,MAAO,SAAUyiB,MAAOtpB,EAAK,kBAGpC,CAACA,EAAM6zC,IAEJQ,EAAiB,CACrBC,iBAAiC,WAAf1C,EAClB2C,kBAAkC,cAAf3C,GAGf4C,EAAaZ,GAAcC,GAE3BY,GAAa3yC,EAAAA,EAAAA,KAAQ,KACzB,OAAQ+xC,GACN,KAAKnd,EAAAA,GAAAA,mBACH,OAAO12B,EAAK,qBACd,KAAK02B,EAAAA,GAAAA,gBACH,OAAO12B,EAAK,iBACd,KAAK02B,EAAAA,GAAAA,oBACH,OAAO12B,EAAK,4BACd,KAAK02B,EAAAA,GAAAA,kBACH,OAAO12B,EAAK,wBACd,KAAK02B,EAAAA,GAAAA,kBACH,OAAO12B,EAAK,eACd,QACE,UAEH,CAACA,EAAM6zC,KAEVn4B,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgB+d,GAElD,MAAMa,GAAkB5yC,EAAAA,EAAAA,KAAQ,KAC9B,OAAQ+xC,GACN,KAAKnd,EAAAA,GAAAA,gBACH,OAAO12B,EAAK,cACd,QACE,UAEH,CAACA,EAAM6zC,IAEJc,EAAwB,MAC5B,OAAQd,GACN,KAAKnd,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,mCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,iCACT,QACE,OAAOA,EAAAA,GAAAA,mCAXiB,GAexBke,EAAuB,MAC3B,OAAQf,GACN,KAAKnd,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,iCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,8BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,gCACT,QACE,OAAOA,EAAAA,GAAAA,kCAXgB,GAevBme,GAAe/yC,EAAAA,EAAAA,KAAQ,IACtBiyC,GAAiBC,GAAiB93B,EAIhC83B,EAAac,QAAO,CAACC,EAAQ/1C,IAC3B+1C,GAAU74B,EAAUld,GAAUkd,EAAUld,GAAQg2C,aAAgB,IACtEjB,EAAar1C,QALP,GAMR,CAACs1C,EAAcD,EAAc73B,IAE1B+4B,GAAanzC,EAAAA,EAAAA,KAAQ,IACpBmyC,GAAiBC,GAAiBh4B,EAIhCg4B,EAAaY,QAAO,CAACC,EAAQ/1C,IAC3B+1C,GAAU74B,EAAUld,GAAUkd,EAAUld,GAAQg2C,aAAgB,IACtEf,EAAav1C,QALP,GAMR,CAACw1C,EAAcD,EAAc/3B,IAE1Bg5B,GAAyBn1C,EAAAA,EAAAA,KAAa8G,IAC1CstC,EAAqB,CACnBK,WAAAA,EACA5C,WAAY/qC,MAEb,CAAC2tC,EAAYL,IAEhB,OACE,0BAAK9zC,UAAU,kCACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY6yC,GAE3E,mBAAClrB,GAAA,EAAD,CACExN,KAAO,cAAay4B,IACpBhrB,QAAS4qB,EACTxnC,SAAUsoC,EACVzrB,SAAUmoB,IAGX8C,GACC,wBAAGr0C,UAAU,mCAAmCO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY8yC,IAI1F,0BAAKr0C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAAY5B,EAAK,sBAEpFq0C,EAAeE,mBACd,mBAAC51B,GAAA,EAAD,CACEqe,QAAM,EACNt6B,KAAK,WACLpC,QAAS,KAAQw1B,EAAe6e,KAEhC,0BAAKt0C,UAAU,iCACZw0C,EAAe,GAAK,2BAAMx0C,UAAU,OAAOO,IAAI,QAA3B,IAAoCi0C,GACzD,2BAAMx0C,UAAU,SAASL,EAAK,oBAC9B,2BAAMK,UAAU,YAAYL,EAAK,wBAItCq0C,EAAeC,kBACd,mBAAC31B,GAAA,EAAD,CACEqe,QAAM,EACNt6B,KAAK,cACLpC,QAAS,KAAQw1B,EAAe8e,KAEhC,0BAAKv0C,UAAU,iCACZ40C,EAAa,GAAK,2BAAM50C,UAAU,OAAOO,IAAI,QAA3B,IAA0Cq0C,GAC7D,2BAAM50C,UAAU,SAASL,EAAK,mBAC9B,2BAAMK,UAAU,YAAYL,EAAK,8BChD/C,SAASm1C,GAAYC,GACnB,MAAO,CAACA,EAAQC,OAAQD,EAAQE,SAASx4B,OAAOvU,SAASwD,KAAK,MAGhE,SAASwpC,GAAqBH,GAC5B,MAAQ,GAAEA,EAAQI,cAAcJ,EAAQI,YAAc,KAAO,MAAMJ,EAAQK,YAAYL,EAAQM,gBAGjG,UAAevuC,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACQ,CACLuyC,eAAgBvyC,EAAOuyC,mBAG3B,CAAC7xC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,qBAAsB,yBAA0B,gCAPhCZ,EA9H6D,EAC/Eyc,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACAwkB,eAAAA,EACAiB,mBAAAA,EACAoD,uBAAAA,EACAC,2BAAAA,MAEA,MAAOC,EAAiCC,EAA+BC,IAAkC/yB,EAAAA,GAAAA,MACzGzf,EAAAA,EAAAA,KAAU,KACRgvC,MACC,CAACA,IAEJ,MAAMyD,GAA8Bj2C,EAAAA,EAAAA,KAAa2f,IAC/Ci2B,EAAuB,CAAEj2B,KAAAA,MACxB,CAACi2B,IAEEM,GAA6Bl2C,EAAAA,EAAAA,KAAY,KAC7Cg2C,IACAH,MACC,CAACG,EAAgCH,IAE9BM,GAAiBp0C,EAAAA,EAAAA,KAAQ,IACtBwvC,EAAevQ,MAAMqU,GAAYA,EAAQe,aAC/C,CAAC7E,IAEE8E,GAAgBt0C,EAAAA,EAAAA,KAAQ,IACrBwvC,EAAex0B,QAAQs4B,IAAaA,EAAQe,aAClD,CAAC7E,IAEEtxC,GAAOC,EAAAA,EAAAA,KAqEb,OAnEAyb,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,uBAoEhD,0BAAKr2B,UAAU,kCACZ61C,IAnEyBd,EAmEcc,EAjExC,0BAAK71C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACjE5B,EAAK,gCAGR,mBAAC2e,GAAA,EAAD,CAAUqe,QAAM,EAAC4C,UAAQ,EAACv/B,UAAU,WAClC,0BAAKA,UAAU,sBAAsBO,IAAI,QACvC,2BAAMP,UAAU,QAAQO,IAAI,QAAQw0C,EAAQiB,SAC5C,2BAAMh2C,UAAU,wBAAwBk1C,GAAqBH,IAC7D,2BAAM/0C,UAAU,YAAY+0C,EAAQkB,GAApC,MAA2CnB,GAAYC,MAI3D,mBAACz2B,GAAA,EAAD,CACEte,UAAU,2BACVqC,KAAK,OACLqE,QAAM,EACNi2B,QAAM,EACN18B,QAASw1C,GAER91C,EAAK,2BA8CTo2C,IAxCwBG,EAwCaH,EAtCtC,0BAAK/1C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACjE5B,EAAK,kBAGPu2C,EAAS73B,KAKhB,SAAuB02B,GACrB,OACE,mBAACz2B,GAAA,EAAD,CACEne,IAAK40C,EAAQ11B,KACb3Y,QAAM,EACNi2B,QAAM,EACNlR,eAAgB,CAAC,CACfnM,MAAO,YACPjd,KAAM,OACN8zC,QAAS,KACPR,EAA4BZ,EAAQ11B,SAGxCrf,UAAU,WAEV,0BAAKA,UAAU,gCAAgCO,IAAI,QACjD,2BAAMP,UAAU,SAAQ8tB,EAAAA,EAAAA,IAAoBnuB,EAA2B,IAArBo1C,EAAQqB,aAC1D,2BAAMp2C,UAAU,SAAS+0C,EAAQiB,SACjC,2BAAMh2C,UAAU,wBAAwBk1C,GAAqBH,IAC7D,2BAAM/0C,UAAU,YAAY+0C,EAAQkB,GAApC,MAA2CnB,GAAYC,WAU1DgB,GACC,mBAACv1B,GAAA,EAAD,CACE7e,OAAQ6zC,EACRnuC,QAASquC,EACT9yC,KAAK,yDACL6d,aAAa,+BACbC,eAAgBk1B,EAChBrf,sBAAoB,KAhD5B,IAA6B2f,EA5BCnB,M,eC5BhC,MA6FA,IAAejuC,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MACEid,OACEC,KAAMy6B,GAER/pB,OACE1Q,KAAM06B,GAERtF,SAAS,IACPrP,IAEAjjC,EAEJ,MAAO,CACL23C,WAAAA,EACAC,WAAAA,EACAC,WAAY5U,MAGhB,CAACviC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,oBApBpCZ,EA7F2D,EAC7Eyc,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACA4pB,WAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAC,eAAAA,MAEA,MAAMC,GAAqB/2C,EAAAA,EAAAA,KAAag3C,IACtCF,EAAe,CAAEE,UAAAA,MAChB,CAACF,IAEE72C,GAAOC,EAAAA,EAAAA,KA2Cb,OAzCAyb,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,qBA0ChD,0BAAKr2B,UAAU,wBACb,0BAAKA,UAAU,oCACb,0BAAKA,UAAU,iBACb,wBAAGA,UAAU,6CAA6CO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACjF5B,EAAK,sBAIV,0BAAKK,UAAU,2BACZu2C,GAAcA,EAAWl4C,OACxB,0BAAK2B,UAAU,oBACZu2C,EAAYl4B,KAAI,CAACq4B,EAAWzyB,IAnDzC,SAAuByyB,EAAmBzyB,EAAW0yB,GACnD,MAAMC,GAAY73C,EAAAA,EAAAA,IAAc23C,GAC1Bp2C,EAAOs2C,EAAYN,EAAWI,QAAan1C,EAC3ClB,EAAQu2C,OAAoCr1C,EAAxB80C,EAAWK,GAE/B12C,GAAY8D,EAAAA,EAAAA,GAChB,wDACA8yC,EAAY,UAAY,SAG1B,OACE,mBAACt4B,GAAA,EAAD,CACEne,IAAKu2C,EACL12C,UAAWA,EACX0G,QAAM,EACNi2B,QAAM,EACNlR,eAAgB,CAAC,CACfnM,MAAO,UACPjd,KAAM,SACN8zC,QAAS,KACPM,EAAmBC,MAGvB74C,MAAQ,SA4B6D,EA5BpComB,GAAK4yB,EAAAA,SAEtC,mBAAC32C,EAAA,EAAD,CAAQE,KAAK,SAASE,KAAMA,EAAMD,KAAMA,IACxC,0BAAKL,UAAU,eAAeO,IAAI,QAChC,yBAAIA,IAAI,SAAQC,EAAAA,EAAAA,IAAYo2C,GAAYzmB,EAAAA,EAAAA,IAAgB7vB,IAAQ8c,EAAAA,EAAAA,GAAazd,EAAMU,KAAW,KAC7FC,GAAQA,EAAKgxC,aACZ,0BAAKtxC,UAAU,gBAAgBO,IAAI,SAAQu2C,EAAAA,GAAAA,IAA0Bx2C,EAAKgxC,cAE3EhxC,IAASA,EAAKgxC,aAAehxC,EAAK8vB,UACjC,0BAAKpwB,UAAU,mBAAmBO,IAAI,QAAtC,IAA+CD,EAAK8vB,YAmBf2mB,CAAcL,EAAWzyB,MAE5DsyB,IAAeA,EAAWl4C,OAC5B,0BAAK2B,UAAU,aAAaO,IAAI,QAAhC,iBAIA,mBAACoe,GAAA,EAAD,CAASxe,IAAI,cAKnB,mBAACq6B,GAAA,EAAD,CACE5uB,SAAO,EACP3L,QAAS,OAETD,UAAU,kBACV+B,UAAU,sBAEV,wBAAG/B,UAAU,mB,eCtGrB,MAyCA,IAAe8G,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAAsBC,IACjC,CACLs4C,eAAeC,EAAAA,EAAAA,IAAoBv4C,EAAQ,SAF3BD,EAzCoC,EACtDyc,SAAAA,EAAUuR,QAAAA,EAASuqB,cAAAA,EAAevhB,eAAAA,MAElC,MAAM91B,GAAOC,EAAAA,EAAAA,KAIb,OAFAyb,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,cAGhD,0BAAKr2B,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACk3C,GAAA,EAAD,CAAevT,QAASqT,EAAe52C,KAAK,UAE5C,wBAAGJ,UAAU,iCAAiCO,IAAI,SAC/CC,EAAAA,EAAAA,GAAWb,EAAK,uBAAwB,CAAC,SAI9C,0BAAKK,UAAU,gCACb,mBAACse,GAAA,EAAD,CACEjc,KAAK,OACLpC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,6BAE7B12B,EAAK,mBAER,mBAAC2e,GAAA,EAAD,CACEjc,KAAK,eACLpC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,eAE7B12B,EAAK,oBAER,mBAAC2e,GAAA,EAAD,CACEjc,KAAK,QACLpC,QAAS,IAAMw1B,EAAeY,EAAAA,GAAAA,oCAE7B12B,EAAK,2B,0BC/BhB,MA6DA,IAAemH,EAAAA,EAAAA,KA3D6B,EAC1C0sC,OAAAA,EACAt4B,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACA5N,MAAAA,EACA4S,UAAAA,EACA0lB,iBAAAA,EACAr5B,YAAAA,EAAc,mBACdgX,KAAAA,EACAsiB,YAAAA,EACAC,WAAAA,EACAl1B,SAAAA,MAEA,MAAOm1B,EAAiBC,IAAsBt0C,EAAAA,EAAAA,IAAiB,KACxDu0C,EAAoBC,IAAyBx0C,EAAAA,EAAAA,KAAS,GAEvDy0C,GAAeh4C,EAAAA,EAAAA,KAAai4C,IAC5BR,GAAoBQ,IAAgBR,EACtCI,EArBuB,6BAuBvBp1B,EAASw1B,KAEV,CAACx1B,EAAUg1B,IAERS,GAAmBl4C,EAAAA,EAAAA,KAAY,KAC/B23C,GACFA,IAEFE,EAAmB,MAClB,CAACF,IAEE13C,GAAOC,EAAAA,EAAAA,KAIb,OAFAyb,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgB+d,GAGhD,0BAAKxzC,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAAC63C,GAAA,EAAD,CAAgBC,OAAK,EAACC,kBAAmBP,KAG3C,0BAAKx3C,UAAU,gCACb,mBAACg4C,GAAA,EAAD,CACEn5B,MAAOy4B,GAAmBz4B,EAC1BiW,KAAMA,EACNhX,YAAaA,EACbs5B,YAAaA,GAAez3C,EAAK,QACjC03C,WAAYO,EACZnmB,UAAWA,EACXsmB,kBAAmBP,EACnBS,2BAA4BR,EAC5Bt1B,SAAUu1B,SCjCpB,IAAe5wC,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAAsBC,IACjC,CACLs4C,eAAeC,EAAAA,EAAAA,IAAoBv4C,EAAQ,SAF3BD,EAxBkC,EACpDyc,SAAAA,EAAUua,eAAAA,EAAgBhJ,QAAAA,EAASuqB,cAAAA,EAAekB,QAAAA,MAElD,MAAMv4C,GAAOC,EAAAA,EAAAA,KAIb,OAFAyb,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,eAGhD,0BAAKr2B,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACk3C,GAAA,EAAD,CAAevT,QAASqT,EAAe52C,KAAK,UAE5C,wBAAGJ,UAAU,iCAAiCO,IAAI,QAC/CZ,EAAK,+BAIV,0BAAKK,UAAU,gCACb,mBAAC4B,EAAA,EAAD,CAAQ3B,QAASi4C,GAAUv4C,EAAK,uCCHlCw4C,GAAyBn2C,EAAAA,GAA0B,IAAM,IA8H/D,IAAe8E,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAAqB,CAACC,GAAU2D,KAAAA,MAC3C,CACL20C,eAAeC,EAAAA,EAAAA,IAAoBv4C,EAAiB,UAAT2D,EAAmB,KAAO,SAFrD5D,EA5H0C,EAC5Du4C,cAAAA,EACA1wC,KAAAA,EAAO,OACPmrB,UAAAA,EACA5S,MAAAA,EACAf,YAAAA,EACAs6B,cAAAA,EACAf,WAAAA,EACAl1B,SAAAA,EACAjH,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACA+mB,OAAAA,MAGA,MAAMxnC,GAAWzE,EAAAA,EAAAA,IAAyB,OAEnCf,EAAO6xC,IAAYp1C,EAAAA,EAAAA,IAAiB,KACpCq1C,EAAgBC,EAAoBC,IAAwB71B,EAAAA,GAAAA,IAAQ,IAE3Ezf,EAAAA,EAAAA,KAAU,KACHuE,EAAAA,IACH9B,YAAW,KACTqG,EAASxD,QAASmU,UACjBw7B,MAEJ,IAEH,MA2BMx4C,GAAOC,EAAAA,EAAAA,KAIb,OAFAyb,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgB+d,GAGhD,0BAAKxzC,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACk3C,GAAA,EAAD,CAAevT,QAASqT,EAAe52C,KAAK,WAG9C,0BAAKJ,UAAU,gCACb,2BAAMk1B,OAAO,GAAG/S,SA9BApe,IACpBA,EAAE6G,iBAEGoB,EAASxD,SAId2Z,EAAS3b,KAwBH,mBAACoX,GAAA,EAAD,CACE1S,IAAKc,EACLxF,MAAOA,EACP2e,UAAW7e,EACX2iB,MAAOnL,EACPe,MAAOA,EACPtS,SA7CiBxI,IACrB8a,GAASw4B,GACXA,IAGFgB,EAASt0C,EAAE0G,OAAOjE,UA2CXA,EACC,mBAAC5E,EAAA,EAAD,CAAQ0E,KAAK,SAASmrB,UAAWA,EAAW/qB,QAAM,GAAE/G,EAAK,aAEzD,mBAACiC,EAAA,EAAD,CACE+d,QAAM,EACN8R,UAAWA,EACX/qB,QAAM,EACNzG,QAASm4C,EAAgBG,EArClB,KACjBp2B,MAsCWxiB,EAAK,mBAIXy4C,GACC,mBAACr6B,GAAA,EAAD,CACE/d,UAAU,SACV2B,OAAQ22C,EACRh5B,MAAO3f,EAAK,wBACZ0H,QAASmxC,IAERh4C,EAAAA,EAAAA,GAAWb,EAAK,4BAA6B,CAAC,KAAM,oBACrD,0BAAKK,UAAU,kBACb,mBAAC4B,EAAA,EAAD,CACEE,MAAM,SACN4E,QAAM,EACNiZ,QAAM,EACN3f,UAAU,wBACVC,QArDY,KACxBu4C,IACAr2B,MAqDaxiB,EAAK,kBAER,mBAACiC,EAAA,EAAD,CACEE,MAAM,UACN4E,QAAM,EACNiZ,QAAM,EACN3f,UAAU,wBACVC,QAASu4C,GAER74C,EAAK,mBCxGtB,IAAemH,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAAsBC,IACjC,CACLs4C,eAAeC,EAAAA,EAAAA,IAAoBv4C,EAAQ,SAF3BD,EA5B4C,EAC9Dyc,SAAAA,EAAUuR,QAAAA,EAASuqB,cAAAA,EAAevhB,eAAAA,MAElC,MAAM91B,GAAOC,EAAAA,EAAAA,KAQb,OAFAyb,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgBY,EAAAA,GAAAA,sBAGhD,0BAAKr2B,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACk3C,GAAA,EAAD,CAAevT,QAASqT,EAAe52C,KAAK,UAE5C,wBAAGJ,UAAU,iCAAiCO,IAAI,QAC/CZ,EAAK,wCAIV,0BAAKK,UAAU,gCACb,mBAAC4B,EAAA,EAAD,CAAQ3B,QAjBM,KAClBw1B,EAAeY,EAAAA,GAAAA,WAgBoB12B,EAAK,oDCZtCw4C,GAAyBn2C,EAAAA,GAA0B,IAAM,IAmE/D,IAAe8E,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAAsBC,IACjC,CACLs4C,eAAeC,EAAAA,EAAAA,IAAoBv4C,EAAQ,MAC3C+5C,WAAY/5C,EAAOg6C,cAAcC,0BAHjBl6C,EAjEsC,EACxDu4C,cAAAA,EACAyB,WAAAA,EACAhnB,UAAAA,EACA5S,MAAAA,EACAw4B,WAAAA,EACAl1B,SAAAA,EACAjH,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACA+mB,OAAAA,MAGA,MAAMxnC,GAAWzE,EAAAA,EAAAA,IAAyB,OAEnCf,EAAO6xC,IAAYp1C,EAAAA,EAAAA,IAAiB,KAE3CC,EAAAA,EAAAA,KAAU,KACHuE,EAAAA,IACH9B,YAAW,KACTqG,EAASxD,QAASmU,UACjBw7B,MAEJ,IAEH,MAAMx4C,GAAOC,EAAAA,EAAAA,KAmBb,OAjBAyb,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgB+d,GAkBhD,0BAAKxzC,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACk3C,GAAA,EAAD,CAAevT,QAASqT,EAAe52C,KAAK,WAG9C,0BAAKJ,UAAU,gCACb,mBAAC4d,GAAA,EAAD,CACEpX,MAAOA,EACP0E,IAAKc,EACLmZ,UAAU,UACV8D,MAAOtpB,EAAK,iBACZkf,MAAOA,EACPtS,SA5BmBxI,IACrB8a,GAASw4B,GACXA,IAGF,MAAMuB,EAAW70C,EAAE0G,OAAOjE,MAAMktB,MAAM,EAAG+kB,GAErCG,EAASv6C,SAAWo6C,GACtBt2B,EAASy2B,GAGXP,EAASO,GACT70C,EAAE0G,OAAOjE,MAAQoyC,KAkBZnnB,GAAa,mBAAC9S,GAAA,EAAD,YCqVtB,IAAe7X,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IAAD,IAA8BA,EAAOg6C,kBACrC,CAACt5C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBAAkB,sBAAuB,gBAAiB,wBAC1D,gBAAiB,qBAJDZ,EA/Y6C,EAC/D22B,cAAAA,EACA6M,YAAAA,EACAhN,MAAAA,EACAH,KAAAA,EACArD,UAAAA,EACA5S,MAAAA,EACA85B,uBAAAA,EACAvb,SAAAA,EACAliB,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,EACAosB,eAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,EACAC,cAAAA,OAEAh2C,EAAAA,EAAAA,KAAU,KACJy1C,IACEvjB,IAAkBiB,EAAAA,GAAAA,sBACpBZ,EAAeY,EAAAA,GAAAA,2BACNjB,IAAkBiB,EAAAA,GAAAA,oBAC3BZ,EAAeY,EAAAA,GAAAA,2BAGlB,CAACjB,EAAeK,EAAgBkjB,IAEnC,MAAMQ,GAAoBz5C,EAAAA,EAAAA,KAAY,KACpC09B,EAAS,CAAE92B,KAAM,UACjBmvB,EAAeY,EAAAA,GAAAA,oBACd,CAAC+G,EAAU3H,IAER2jB,GAAoB15C,EAAAA,EAAAA,KAAa8G,IACrC42B,EAAS,CAAE92B,KAAM,cAAe6uB,QAAS3uB,IACzCivB,EAAeY,EAAAA,GAAAA,2BACd,CAAC+G,EAAU3H,IAER4jB,GAA2B35C,EAAAA,EAAAA,KAAY,KAC3C+1B,EAAeY,EAAAA,GAAAA,wBACd,CAACZ,IAEE6jB,GAAwB55C,EAAAA,EAAAA,KAAa8G,IACzC42B,EAAS,CAAE92B,KAAM,UAAW6uB,QAAS3uB,IACrCivB,EAAeY,EAAAA,GAAAA,yBACd,CAAC+G,EAAU3H,IAER8jB,GAAyB75C,EAAAA,EAAAA,KAAa8G,IAC1C42B,EAAS,CAAE92B,KAAM,WAAY6uB,QAAS3uB,IACtCqyC,EAAe,IACV5jB,EACHF,MAAOvuB,EACPgzC,UAAW,KACT/jB,EAAeY,EAAAA,GAAAA,2BAGlB,CAAC+G,EAAU3H,EAAgBR,EAAO4jB,IAE/BY,GAA8B/5C,EAAAA,EAAAA,KAAa8G,IAC/C42B,EAAS,CAAE92B,KAAM,qBAAsB6uB,QAAS3uB,IAChDsyC,EAAc,CACZlkB,gBAAiBpuB,EACjBgzC,UAAW,KACT/jB,EAAeY,EAAAA,GAAAA,6BAGlB,CAACyiB,EAAe1b,EAAU3H,IAEvBikB,GAA0Bh6C,EAAAA,EAAAA,KAAa8G,IAC3C42B,EAAS,CAAE92B,KAAM,cAAe6uB,QAAS3uB,IACzCivB,EAAeY,EAAAA,GAAAA,8BACd,CAAC+G,EAAU3H,IAERkkB,GAA8Bj6C,EAAAA,EAAAA,KAAY,KAC9C+1B,EAAeY,EAAAA,GAAAA,2BACd,CAACZ,IAEEmkB,GAA2Bl6C,EAAAA,EAAAA,KAAa8G,IAC5C42B,EAAS,CAAE92B,KAAM,UAAW6uB,QAAS3uB,IACrCqyC,EAAe,IACV5jB,EACHH,KAAMtuB,EACNgzC,UAAW,KACT/jB,EAAeY,EAAAA,GAAAA,2BAGlB,CAAC+G,EAAU3H,EAAgBR,EAAO4jB,IAE/BgB,GAAgBn6C,EAAAA,EAAAA,KAAa8G,IACjC0yC,EAAc,CACZtkB,gBAAiBpuB,EACjBgzC,UAAW,KACT/jB,EAAeY,EAAAA,GAAAA,cAGlB,CAAC6iB,EAAezjB,IAEbqkB,GAAqCp6C,EAAAA,EAAAA,KAAa8G,IACtD42B,EAAS,CAAE92B,KAAM,qBAAsB6uB,QAAS3uB,IAChDsyC,EAAc,CACZlkB,gBAAiBpuB,EACjBgzC,UAAW,KACT/jB,EAAeY,EAAAA,GAAAA,yBAGlB,CAACyiB,EAAe1b,EAAU3H,IAEvBskB,GAAsBr6C,EAAAA,EAAAA,KAAa8G,IACvC42B,EAAS,CAAE92B,KAAM,WAAY6uB,QAAS3uB,IACtCwyC,EAAoB,IACf/jB,EACHF,MAAOvuB,EACPgzC,UAAW,KACT/jB,EAAeY,EAAAA,GAAAA,2BAGlB,CAAC+G,EAAU3H,EAAgBR,EAAO+jB,IAE/BgB,GAAkBt6C,EAAAA,EAAAA,KAAa6lB,IACnC0zB,EAAsB,CAAE1zB,KAAAA,MACvB,CAAC0zB,IAEEt5C,GAAOC,EAAAA,EAAAA,KAEb,OAAQw1B,GACN,KAAKiB,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACE6hB,QAASiB,EACT1jB,eAAgBA,EAChBva,SAAUA,GAAY,CACpBmb,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj5B,SAAS6kC,GACXxV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,iBACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACRtX,YAAane,EAAK,uBAClBy3C,YAAaz3C,EAAK,YAClBwiB,SAAUi3B,EACV3jB,eAAgBA,EAChBva,SAAUA,GAAY,CACpBmb,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj5B,SAAS6kC,GACXxV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,wBACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACR+hB,iBAAkBliB,EAAMJ,SACxB/W,YAAane,EAAK,yBAClBy3C,YAAaz3C,EAAK,YAClBwiB,SAAUk3B,EACV5jB,eAAgBA,EAChBva,SAAUA,GAAY,CACpBmb,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj5B,SAAS6kC,GACXxV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACEh0B,KAAK,OACLyb,YAAane,EAAK,2BAClBwiB,SAAUm3B,EACV9F,OAAQpe,EACRK,eAAgBA,EAChBva,SAAUA,GAAY,CACpBmb,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj5B,SAAS6kC,GACXxV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACEh0B,KAAK,QACLiE,KAAK,QACLmrB,UAAWA,EACX5S,MAAOA,EACPw4B,WAAY0B,EACZj7B,YAAane,EAAK,sBAClBy4C,eAAa,EACbj2B,SAAUo3B,EACV/F,OAAQpe,EACRK,eAAgBA,EAChBva,SAAUA,GAAY,CACpBmb,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj5B,SAAS6kC,GACXxV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,0BACH,OACE,mBAAC,GAAD,CACE5E,UAAWA,EACX5S,MAAOA,EACPw4B,WAAY0B,EACZ52B,SAAU63B,EACVxG,OAAQpe,EACRK,eAAgBA,EAChBva,SAAUA,GAAY+mB,IAAgB5L,EAAAA,GAAAA,qBACtC5J,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBva,SAAUA,EACVuR,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBva,SAAUA,GAAY,CACpBmb,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAj5B,SAAS6kC,GACXxV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACR3D,UAAWA,EACX5S,MAAOA,EACPw4B,WAAY0B,EACZjkB,KAAMA,EACN3S,SAAUs3B,EACVhkB,eAAgBA,EAChBva,SAAUA,GAAY,CACpBmb,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAj5B,SAAS6kC,GACXxV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACRtX,YAAane,EAAK,+BAClBwiB,SAAUu3B,EACVjkB,eAAgBA,EAChBva,SAAUA,GAAY,CACpBmb,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAj5B,SAAS6kC,GACXxV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACR+hB,iBAAkBliB,EAAMJ,SACxB/W,YAAane,EAAK,yBAClBwiB,SAAUw3B,EACVlkB,eAAgBA,EAChBva,SAAUA,GAAY,CACpBmb,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAj5B,SAAS6kC,GACXxV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,wBACH,OACE,mBAAC,GAAD,CACE5E,UAAWA,EACX5S,MAAOA,EACPw4B,WAAY0B,EACZ12C,KAAK,OACLyb,YAAane,EAAK,2BAClBwiB,SAAUy3B,EACVnkB,eAAgBA,EAChBva,SAAUA,GAAY+mB,IAAgB5L,EAAAA,GAAAA,qBACtC5J,QAASA,EACT+mB,OAAQpe,IAId,KAAKiB,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACE5E,UAAWA,EACX5S,MAAOA,EACPw4B,WAAY0B,EACZjkB,KAAMA,EACN3S,SAAU03B,EACVpkB,eAAgBA,EAChBva,SAAUA,EACVuR,QAASA,EACT+mB,OAAQpe,IAId,KAAKiB,EAAAA,GAAAA,kCACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACR3D,UAAWA,EACX5S,MAAOA,EACPw4B,WAAY0B,EACZjkB,KAAMA,EACN3S,SAAU23B,EACVrkB,eAAgBA,EAChBva,SAAUA,GAAY,CACpBmb,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAj5B,SAAS6kC,GACXxV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACR/yB,KAAK,QACLiE,KAAK,QACLwX,YAAane,EAAK,sBAClBwiB,SAAU43B,EACVtkB,eAAgBA,EAChBva,SAAUA,GAAY,CACpBmb,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAj5B,SAAS6kC,GACXxV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACR3D,UAAWA,EACX5S,MAAOA,EACPw4B,WAAY0B,EACZ52B,SAAU63B,EACVvkB,eAAgBA,EAChBva,SAAUA,GAAY+mB,IAAgB5L,EAAAA,GAAAA,qBACtC5J,QAASA,IAIf,QACE,Y,eCrRN,SAASwtB,GAA0Bv7C,EAAqB80C,GACtD,MAAM,QAAEzC,GAAYryC,EAAO4R,SAC3B,OAAQkjC,GACN,KAAKnd,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAO0a,EAAQO,YACjB,KAAKjb,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,OAAO0a,EAAQU,SACjB,KAAKpb,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,OAAO0a,EAAQY,aACjB,KAAKtb,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAO0a,EAAQc,SACjB,KAAKxb,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAO0a,EAAQgB,YAMrB,UAAejrC,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAU80C,OAAAA,MACT,MACE73B,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,GAJE,cAMJC,GACEtd,EAEJ,MAAO,CACLsd,cAAAA,EACAH,UAAAA,EACAC,QAASA,EAAQI,OACjBH,iBAAkBA,EAAiBG,OACnC+kB,kBAAmBllB,EAAiBM,SACpCD,gBAAiBN,EAAQO,SACzB/L,SAAU2pC,GAA0Bv7C,EAAQ80C,OAGhD,CAACp0C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,wBArBpCZ,EAxIsE,EACxFud,cAAAA,EACAk+B,YAAAA,EACA1G,OAAAA,EACAljC,SAAAA,EACAuL,UAAAA,EACAC,QAAAA,EACAC,iBAAAA,EACAK,gBAAAA,EACA6kB,kBAAAA,EACAkZ,mBAAAA,EACAj/B,SAAAA,EACAua,eAAAA,EACAhJ,QAAAA,MAEA,MAAM9sB,GAAOC,EAAAA,EAAAA,KAEPw6C,GAAqB34C,EAAAA,EAAAA,KAAQ,IAC5B6O,EAID4pC,EACK,IAAI5pC,EAASojC,gBAAiBpjC,EAASqjC,cAEvC,IAAIrjC,EAASsjC,gBAAiBtjC,EAASujC,cANvC,IAQR,CAACqG,EAAa5pC,KACV6c,EAAaktB,IAAkBp3C,EAAAA,EAAAA,IAAiB,KAChDq3C,EAAeC,IAAoBt3C,EAAAA,EAAAA,KAAkB,IACrDu3C,EAAuBC,IAA4Bx3C,EAAAA,EAAAA,IAAmBm3C,GAEvEz+B,GAAQla,EAAAA,EAAAA,KAAQ,KACpB,MAAM0/B,EAAmBrlB,GACrBslB,EAAAA,EAAAA,GAAgBvlB,EAAWC,EAASC,EAAkB,YACtDxa,EACE8/B,EAAqBjlB,GACvBglB,EAAAA,EAAAA,GAAgBvlB,EAAWO,EAAiB6kB,EAAmB,iBAC/D1/B,EAEJ,GAAK4/B,GAAqBE,EAI1B,MAAO,IACDF,EACA,IACGA,EAAiBG,eACjBH,EAAiBI,YAEpB,MAEAF,EAAqBA,EAAmBE,WAAa,MAE1D,CAAC1lB,EAAWC,EAASC,EAAkBK,EAAiB6kB,IAErDO,GAAe//B,EAAAA,EAAAA,KAAQ,KAC3B,GAAKka,EAIL,OAAOA,EACJc,QAAQpc,KACLtB,EAAAA,EAAAA,IAAcsB,EAAKlD,KAAOkD,EAAKlD,KAAO6e,IAAkBuW,EAAAA,EAAAA,IAAYlyB,OAEnE8sB,IACAhQ,EAAAA,GAAAA,IAAYC,EAAAA,EAAAA,GAAazd,EAAMU,GAAO8sB,IACtCitB,EAAmBh9C,SAASiD,EAAKlD,OAGrCkhB,KAAI,EAAGlhB,GAAAA,KAASA,MAClB,CAACwe,EAAOK,EAAerc,EAAMwtB,EAAaitB,IAEvCM,GAAiCh7C,EAAAA,EAAAA,KAAa8G,IAClDi0C,EAAyBj0C,GACzB+zC,GAAiB,KAChB,IAEG7C,GAAeh4C,EAAAA,EAAAA,KAAY,KAC/By6C,EAAmB,CACjBhG,WAAYZ,GAAcC,GAC1B0G,YAAahyC,QAAQgyC,GACrBS,YAAaH,IAGf/kB,EAAeY,EAAAA,GAAAA,WACd,CAAC6jB,EAAaM,EAAuB/kB,EAAgB+d,EAAQ2G,IAIhE,OAFA9+B,EAAAA,EAAAA,IAAeH,EAAUuR,EAASgJ,EAAgB+d,GAGhD,0BAAKxzC,UAAU,wBACb,mBAAC46C,GAAA,EAAD,CACEC,QAASrZ,GAAgB,GACzB5B,YAAa4a,EACb3a,YAAa1S,EACb2tB,kBAAiCn7C,EAAdu6C,EAAmB,6BAAqC,6BAC3Ea,cAAc,0BACdjb,oBAAqB4a,EACrB1a,eAAgBqa,IAGlB,mBAAC7f,GAAA,EAAD,CACE5uB,QAAS0uC,EACTr6C,QAASy3C,EACT31C,UAAyBpC,EAAdu6C,EAAmB,uBAA+B,wBAE7D,wBAAGl6C,UAAU,2BCzHf2zB,GAA0Bh2B,OAAOi2B,KAAKyC,EAAAA,IAAiBh4B,OAAS,EAGhE28C,GAAiB,CACrB3kB,EAAAA,GAAAA,cACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,wBAGI4kB,GAAkB,CACtB5kB,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,kCAGI6kB,GAAkB,CACtB7kB,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,uBAGI8kB,GAA+B,CACnC9kB,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,kCAGI+kB,GAAkC,CACtC/kB,EAAAA,GAAAA,+BACAA,EAAAA,GAAAA,+BAGIglB,GAAgC,CACpChlB,EAAAA,GAAAA,mCACAA,EAAAA,GAAAA,mCAGIilB,GAA6B,CACjCjlB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCAGIklB,GAA8B,CAClCllB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCA6QF,IAAevvB,EAAAA,EAAAA,KAhQgB,EAC7BoU,SAAAA,EACAka,cAAAA,EACAomB,aAAAA,EACAC,gBAAAA,EACAhmB,eAAAA,EACAhJ,QAAAA,EACAivB,qBAAAA,MAEA,MAAOC,EAAYC,IpClDZC,EAAAA,GAAAA,GAAW7mB,GAAcL,IoCoD1BuN,GAAcxiC,EAAAA,EAAAA,KAAY,KAE5B01B,IAAkBiB,EAAAA,GAAAA,qBACfjB,IAAkBiB,EAAAA,GAAAA,mBAClBjB,IAAkBiB,EAAAA,GAAAA,+BAErB1wB,YAAW,KACT81C,EAAgB,CAAEn1C,KAAM,YA1FJ,KA+FtB8uB,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,qBAUvB5J,IAR4B,WAAtB+uB,EAAa1c,KACfrJ,EAAeY,EAAAA,GAAAA,qBAEfZ,EAAeY,EAAAA,GAAAA,qBAMlB,CACDmlB,EAAa1c,KAAM2c,EACnBrmB,EAAe3I,EAASgJ,IAGpBqmB,GAAmBp8C,EAAAA,EAAAA,KAAY,KACnC+7C,EAAgB,CAAEn1C,KAAM,gBACxB47B,MACC,CAACuZ,EAAiBvZ,IA0LrB,SAAS6Z,EAAqBC,EAAyBC,EAAiBC,GACtE,OACE,sCACE,mBAAC,GAAD,CACE9mB,cAAeA,EACf3I,QAASyV,EACT5M,aAAcwmB,EACdrmB,eAAgBA,EAChBJ,eAAgBmmB,EAAapd,WAhMrC,SAAqC4d,EAAyBxI,GAC5D,MAAM2I,EAA+C,CACnD,CAAC9lB,EAAAA,GAAAA,oBAAqC8kB,GAA6B/9C,SAASo2C,GAC5E,CAACnd,EAAAA,GAAAA,iBAAkC+kB,GAAgCh+C,SAASo2C,GAC5E,CAACnd,EAAAA,GAAAA,qBAAsCglB,GAA8Bj+C,SAASo2C,GAC9E,CAACnd,EAAAA,GAAAA,mBAAoCilB,GAA2Bl+C,SAASo2C,GACzE,CAACnd,EAAAA,GAAAA,mBAAoCklB,GAA4Bn+C,SAASo2C,IAGtE4I,EAAgBpB,GAAe59C,SAASo2C,GACxC6I,EAAkBpB,GAAgB79C,SAASo2C,GAC3C8I,EAAkBpB,GAAgB99C,SAASo2C,IAC5C4I,GACAz+C,OAAOi2B,KAAKuoB,GAAqB/+C,SAASo2C,EAAOvkC,aACjDtR,OAAO4+C,OAAOJ,GAAqBzb,MAAMvgC,IAAgB,IAARA,IAEtD,OAAQi1B,GACN,KAAKiB,EAAAA,GAAAA,KACH,OACE,mBAAC,GAAD,CAAcZ,eAAgBA,EAAgBva,SAAUA,EAAUuR,QAASyV,IAE/E,KAAK7L,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBva,SAAUA,GAAY8gC,EACtBvvB,QAASyV,IAGf,KAAK7L,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBva,SAAU8gC,GACPxI,IAAWnd,EAAAA,GAAAA,4BACXmd,IAAWnd,EAAAA,GAAAA,uBACXimB,GAAmBD,EACtB5vB,QAASyV,IAGf,KAAK7L,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CAAuBZ,eAAgBA,EAAgBva,SAAU8gC,EAAgBvvB,QAASyV,IAE9F,KAAK7L,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBva,SAAU8gC,GAAkBM,GAAmBF,EAC/C3vB,QAASyV,IAGf,KAAK7L,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CAAkBZ,eAAgBA,EAAgBva,SAAU8gC,EAAgBvvB,QAASyV,IAEzF,KAAK7L,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBva,SAAU8gC,GAAkBxI,IAAWnd,EAAAA,GAAAA,2BACvC5J,QAASyV,IAGf,KAAK7L,EAAAA,GAAAA,2BACH,OACE,mBAACmmB,GAAD,CACE/mB,eAAgBA,EAChBva,SAAU8gC,EACVvvB,QAASyV,IAGf,KAAK7L,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBva,SAAU8gC,EACVvvB,QAASyV,IAGf,KAAK7L,EAAAA,GAAAA,oBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBva,SAAU8gC,EACVvvB,QAASyV,IAGf,KAAK7L,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACRK,eAAgBA,EAChBva,SAAU8gC,GAAkBG,EAAoB/mB,GAChD3I,QAASyV,IAIf,KAAK7L,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACE6jB,aAAW,EACX1G,OAAQpe,EACRK,eAAgBA,EAChBva,SAAU8gC,GAAkBG,EAAoB/mB,GAChD3I,QAASyV,IAIf,KAAK7L,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,gCACH,OACE,mBAAC,GAAD,CACEmd,OAAQpe,EACRK,eAAgBA,EAChBva,SAAU8gC,EACVvvB,QAASyV,IAIf,KAAK7L,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACEjB,cAAeA,EACf6M,YAAauR,EACbve,MAAOumB,EACPpe,SAAUqe,EACVvgC,SAAU8gC,EACVvmB,eAAgBA,EAChBhJ,QAASyV,IAIf,KAAK7L,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEjB,cAAeA,EACfH,MAAO0mB,EACPve,SAAUwe,EACV3Z,YAAauR,EACbt4B,SAAU8gC,EACVvmB,eAAgBA,EAChBhJ,QAASyV,IAIf,QACE,QAcCua,CAA4BT,EAAgBE,IAKnD,OACE,mBAAC1gC,EAAA,EAAD,CACEre,GAAG,WACHue,KAAMggC,EAAuB,OAASgB,EAAAA,GACtCjhC,UAAW2Z,EACXV,YAAaf,IAEZooB,MC5TD/vB,IAAevoB,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAO,GAkEnD,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAQwtB,QAASywB,GAAej+C,EAAO+vB,aAAe,IAC9C7S,KAAMyQ,GAAc3tB,EAAO4tB,MAEnC,MAAO,CACLD,UAAAA,EACAswB,WAAAA,EACAC,iBAAkBl+C,EAAOk+C,qBAG7B,CAACx9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kBAAmB,cAXvDZ,EAhE2C,EAC7Dyc,SAAAA,EAAUuR,QAAAA,EACVhQ,OAAAA,EAAQ4P,UAAAA,EAAWswB,WAAAA,EAAYhwB,gBAAAA,EAAiBC,SAAAA,EAAUgwB,iBAAAA,OAI1D15C,EAAAA,EAAAA,KAAU,KACR8oB,IAAa,KACXW,WAIJtR,EAAAA,EAAAA,IAAeH,EAAUuR,GAEzB,MAAMb,GAAclsB,EAAAA,EAAAA,KACjBvC,IACCyvB,EAAS,CAAEzvB,GAAAA,EAAI8vB,sBAAsB,MAEvC,CAACL,IAGG9Q,GAAUra,EAAAA,EAAAA,KAAQ,KACtB,IAAKk7C,EACH,OAGF,MAAME,EAAYpgC,EAASkgC,EAAWlgC,QAAQtf,IAC5C,MAAMmD,EAAO+rB,EAAUlvB,GACvB,IAAKmD,EACH,OAAO,EAET,MAAM4vB,GAAWC,EAAAA,EAAAA,IAAgB7vB,GACjC,OAAO4vB,IAAY/S,EAAAA,GAAAA,GAAY+S,EAAUzT,MACtCkgC,EAEL,OAAOG,EAAAA,EAAAA,IAAYD,EAAWxwB,OAAW9qB,EAAWq7C,KACnD,CAACD,EAAYlgC,EAAQ4P,EAAWuwB,KAE5Bv/B,EAAaC,IAAWC,EAAAA,GAAAA,QAAkBhc,EAAWua,EAAS5T,QAAQuU,IAE7E,OACE,mBAACwB,GAAA,EAAD,CAAgBC,MAAOb,EAAac,WAAYb,EAAStd,UAAU,2BAChEqd,GAAeA,EAAYhf,OAC1Bgf,EAAYgB,KAAKlhB,GACf,mBAACmhB,GAAA,EAAD,CACEne,IAAKhD,EACL6C,UAAU,sBACVC,QAAS,IAAM2rB,EAAYzuB,GAC3BuJ,QAAS1E,EAAAA,IAET,mBAACuc,GAAA,EAAD,CAAiBE,OAAQthB,EAAIy5B,eAAa,EAAC9K,WAAW,aAGxDzO,IAAgBA,EAAYhf,OAC9B,wBAAG2B,UAAU,aAAaG,IAAI,aAAaI,IAAI,QAC5Ckc,EAAOpe,OAAS,mCAAqC,0BAGxD,mBAACsgB,GAAA,EAAD,CAASxe,IAAI,iBCtDf6rB,IAAevoB,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAO,GAsHnD,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAQwtB,QAASsC,GAAoB9vB,EAAO+vB,aAAe,IACnD7S,KAAMyQ,GAAc3tB,EAAO4tB,OAC3B1Q,KAAMC,GAAcnd,EAAOid,OAC7B,cAAEK,GAAkBtd,GAGxBmxB,MAAO1C,EADH,eAEJuB,EAFI,cAGJC,EAHI,aAIJC,GACElwB,EAAO8tB,cACHN,QAAS4C,GAAkBH,GAAiB,IAC5CzC,QAAS8C,GAAiBJ,GAAgB,GAElD,MAAO,CACL5S,cAAAA,EACAqQ,UAAAA,EACAxQ,UAAAA,EACA2S,gBAAAA,EACArB,YAAAA,EACA4vB,YAAaruB,GAAkBA,EAAe/S,MAC9CmT,cAAAA,EACAE,aAAAA,MAGJ,CAAC5vB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kBAAmB,0BA3BvDZ,EApH4C,EAC9D+gB,UAAAA,EACAtE,SAAAA,EACA8hC,kBAAAA,EACAC,0BAAAA,EACAC,WAAAA,EACAzwB,QAAAA,EACAzQ,cAAAA,EACAqQ,UAAAA,EACAxQ,UAAAA,EACA2S,gBAAAA,EACArB,YAAAA,EACA4vB,YAAAA,EACA/tB,aAAAA,EACAF,cAAAA,EACAnC,gBAAAA,EACAwwB,qBAAAA,OAIAj6C,EAAAA,EAAAA,KAAU,KACR8oB,IAAa,KACXW,UAIJ,MAAMhtB,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAUuR,GAEzB,MAAMjP,GAAqB9d,EAAAA,EAAAA,KAAamwB,IACtCstB,EAAqB,CAAEttB,MAAAA,MACtB,CAACstB,IAEE3b,GAAe//B,EAAAA,EAAAA,KAAQ,KAC3B,MAAMk7C,EAAanuB,GACfxR,EAAAA,EAAAA,IAAYwR,EAAgB/R,QAAQtf,GAAOA,IAAO6e,IAAgBH,GAClE,GAEJ,IAAKsR,EACH,OAAOwvB,EAGT,MAAM1sB,EAAkB0sB,EAAWlgC,QAAQtf,IACzC,MAAMmD,EAAO+rB,EAAUlvB,GACvB,IAAKmD,EACH,OAAO,EAET,MAAM4vB,GAAWC,EAAAA,EAAAA,IAAgB7vB,GACjC,OAAO4vB,IAAY/S,EAAAA,GAAAA,GAAY+S,EAAU/C,MAG3C,OAAOnQ,EAAAA,EAAAA,KACLD,EAAAA,EAAAA,IAAO,IACFkT,KACCjB,GAAgB,MAChBF,GAAiB,KACpBrS,QAAQi6B,IACT,MAAMp2C,EAAO+rB,EAAUqqB,GAEvB,OAAQp2C,KAAS88C,EAAAA,EAAAA,IAAU98C,IAASA,EAAK+8C,uBAE3CxhC,GACA,EACAmhC,KAED,CACDxuB,EAAiB3S,EAAWsR,EAAa6B,EAAcF,EAAekuB,EACtEhhC,EAAeqQ,IAGXixB,GAAiB59C,EAAAA,EAAAA,KAAY,MAC7Bs9C,EAAkB3+C,QAAUmhB,KAC9B29B,EAAqB,CAAEttB,MAAO,KAC9BqtB,OAED,CAACF,EAAkB3+C,OAAQmhB,EAAW29B,EAAsBD,IAE/D,OACE,0BAAKl9C,UAAU,kBACb,0BAAKA,UAAU,eACb,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAASwsB,EACT1qB,UAAU,uBAEV,wBAAG/B,UAAU,qBAEf,6BAAKL,EAAK,qBAEZ,0BAAKK,UAAU,wBACb,mBAAC46C,GAAA,EAAD,CACEC,QAASrZ,EACT5B,YAAaod,EACbnd,YAAa1S,EACb2tB,kBAAmBn7C,EAAK,iBACxBo7C,cAAc,0BACdtpB,UAAWsrB,EACXjd,oBAAqBmd,EACrBjd,eAAgBxiB,IAGlB,mBAACgd,GAAA,EAAD,CACE5uB,QAAS1D,QAAQ80C,EAAkB3+C,QAAUmhB,GAC7Cvf,QAASq9C,EACTv7C,UAAWyd,EAAY,2BAA6B,0BAEpD,wBAAGxf,UAAU,4BCwCvB,IAAe8G,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MACEgE,SAAU66C,EACV1+B,MAAO2+B,GACL9+C,EAAO++C,cAAgB,GAE3B,MAAO,CACLF,iBAAAA,EACAC,cAAAA,MAGJ,CAACp+C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAAmB,mBAbHZ,EA3J4C,EAC9D+gB,UAAAA,EACAtE,SAAAA,EACAwiC,UAAAA,EACAjxB,QAAAA,EACA8wB,iBAAAA,EACAC,cAAAA,EACAG,gBAAAA,EACAC,cAAAA,MAEA,MAAMj+C,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAUuR,GAEzB,MAAOnN,EAAOu+B,IAAY56C,EAAAA,EAAAA,IAAS,KAC5B66C,EAAOC,IAAY96C,EAAAA,EAAAA,IAAS,KAC5ByO,EAAO2nB,IAAYp2B,EAAAA,EAAAA,OACnB4b,EAAOua,IAAYn2B,EAAAA,EAAAA,MAEpB+6C,EAAsB,4BACtBC,EAAyB,+BACzBC,EAAwB,mDAExBzsB,EAAY8rB,IAAqBY,EAAAA,GAAAA,WAEjCC,GAAoB1+C,EAAAA,EAAAA,KAAaqE,IACrC,MAAM,MAAEyC,GAAUzC,EAAEqG,cACdwuC,EAAWpyC,EAAM8d,QAAQ,OAAQ,IAEvCu5B,EAASjF,GAELA,IAAapyC,IACfzC,EAAEqG,cAAc5D,MAAQoyC,KAEzB,IAEG7vB,GAA0BrpB,EAAAA,EAAAA,KAAaqE,IAC3Cg6C,EAASh6C,EAAEqG,cAAc5D,SACxB,IAEG63C,GAAoB3+C,EAAAA,EAAAA,KAAY,KAC/B4f,EAAMjhB,OAKPq/C,EAAUr/C,OAhDgB,IAiD5B+6B,EAAS8kB,GAIXP,EAAgB,CACdr+B,MAAAA,EACA5N,MAAAA,EACAgsC,UAAAA,IAZAtkB,EAAS4kB,KAcV,CAAC1+B,EAAOo+B,EAAWC,EAAiBjsC,EAAOssC,EAAqBE,IAE7DI,GAAsB5+C,EAAAA,EAAAA,KAAY,KACjC4f,EAAMjhB,OAKXu/C,EAAc,CACZt+B,MAAAA,EACAw+B,MAAAA,EACApsC,MAAAA,EACAgsC,UAAAA,IARAtkB,EAAS6kB,KAUV,CAAC3+B,EAAOs+B,EAAeE,EAAOpsC,EAAOgsC,EAAWO,KAEnD/6C,EAAAA,EAAAA,KAAU,KACJq6C,IAAqBY,EAAAA,GAAAA,UACvB1xB,GAAQ,KAET,CAAC8wB,EAAkB9wB,IAEtB,MAAM8xB,EAAgBf,IACpB3+B,IAAUm/B,GAAuBn/B,IAAUo/B,EACvCp/B,OACAtd,GAGN,OACE,0BAAKvB,UAAU,WACb,0BAAKA,UAAU,eACb,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAAS,IAAMwsB,IACf1qB,UAAU,8BAEV,wBAAG/B,UAAU,qBAEf,6BAAKL,EAAK6f,EAAY,aAAe,cAEvC,0BAAKxf,UAAU,wBACb,mBAACs6B,GAAA,EAAD,CACE/tB,SAAU8sB,EACV/Z,MAAO3f,EAAK,cAEd,mBAACie,GAAA,EAAD,CACEpX,MAAO8Y,EACP/S,SAAU6xC,EACVn1B,MAAOtpB,EAAK6f,EAAY,mBAAqB,aAC7CX,MAAOA,IAAUm/B,GAAuBn/B,IAAUo/B,EAAyBp/B,OAAQtd,IAEpFie,GACC,sCACE,mBAAC5B,GAAA,EAAD,CACEpX,MAAOs3C,EACPvxC,SAAUwc,EACVE,MAAOtpB,EAAK,oCAEd,wBAAGK,UAAU,QAAQL,EAAK,qBAI7B4+C,GACC,wBAAGv+C,UAAU,SAASu+C,GAGvBb,EAAUr/C,OAAS,GAClB,sCACE,yBAAI2B,UAAU,wBAAwBL,EAAK,6BAA8B+9C,EAAUr/C,OAAQ,MAE3F,0BAAK2B,UAAU,mCACZ09C,EAAUr/B,KAAKlhB,GACd,mBAACmhB,GAAA,EAAD,CAAUihB,UAAQ,EAACv/B,UAAU,uBAC3B,mBAACue,GAAA,EAAD,CAAiBE,OAAQthB,UAQrC,mBAACq9B,GAAA,EAAD,CACE5uB,QAA0B,IAAjB0T,EAAMjhB,OACf4B,QAASuf,EAAY8+B,EAAsBD,EAC3C/xC,SAAUmlB,EACV1vB,UAAWyd,EAAY7f,EAAK,8BAAgC,gBAE3D8xB,EACC,mBAACzhB,EAAA,EAAD,CAASlO,MAAM,UAEf,wBAAG9B,UAAU,2BCnKjBw+C,GAAe7gD,OAAOi2B,KAAK6qB,EAAAA,IAAmBpgD,OAAS,EAsD7D,IAAeyI,EAAAA,EAAAA,KApDe,EAC5BoU,SAAAA,EACAsE,UAAAA,GAAY,EACZ6U,QAAAA,EACAqqB,gBAAAA,EACAjyB,QAAAA,MAEA,MAAOkyB,EAAkBC,IAAuB37C,EAAAA,EAAAA,IAAmB,IAE7Dq6C,GAAiB59C,EAAAA,EAAAA,KAAY,KACjCg/C,EAAgBl/B,EAAYi/B,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,iBAC/D,CAACj/B,EAAWk/B,IAEf,OACE,mBAACljC,EAAA,EAAD,CACEre,GAAG,UACHue,KAAMghC,EAAAA,GACNhoB,YAAa8pB,GACb/iC,UAAW4Y,IAETwqB,IACA,OAAQxqB,GACN,KAAKoqB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACEj/B,UAAWA,EACXtE,SAAUA,EACV8hC,kBAAmB2B,EACnB1B,0BAA2B2B,EAC3B1B,WAAYI,EACZ7wB,QAASA,IAGf,KAAKgyB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACEj/B,UAAWA,EACXtE,SAAU2jC,GAAgB3jC,EAC1BwiC,UAAWiB,EACXlyB,QAASA,IAGf,QACE,c,eCpDZ,MAwBA,IAAe3lB,EAAAA,EAAAA,KAxBqB,EAAGoU,SAAAA,EAAUuR,QAAAA,EAASiyB,gBAAAA,MACxD,MAAM/+C,GAAOC,EAAAA,EAAAA,KAIb,OAFAyb,EAAAA,EAAAA,IAAeH,EAAUuR,EAASiyB,EAAiBD,EAAAA,GAAAA,UAGjD,0BAAKz+C,UAAU,iBACb,0BAAKA,UAAU,eACb,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAASwsB,EACT1qB,UAAU,uBAEV,wBAAG/B,UAAU,qBAEf,6BAAKL,EAAK,mBAEZ,mBAACm/C,GAAA,EAAD,CAAUC,WAAW,WAAW7jC,SAAUA,QCpC1C8jC,GAAwC,CAC5CC,MAAM,EACNC,WAAW,EACXC,IAAI,EACJC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,OAAO,EACPC,YAAY,EACZ,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,KAAK,EACLC,MAAM,EACNC,KAAK,GAkBDj1C,GAAkB7G,IACtBA,EAAE6G,kBAGJ,SAASk1C,GAA4B/7C,GAC/Bi7C,GAAaj7C,EAAE5D,OApBrB,SAAmBsK,GACjB,KAAKA,GAAYA,aAAkBs1C,aAAc,OAAO,EACxD,MAAMtiD,EAAUgN,EACVu1C,EAAUviD,EAAQuiD,QAAQ/M,cAChC,GAAgB,aAAZ+M,EAAwB,OAAO,EACnC,GAAgB,UAAZA,EAAqB,OAAO,EAChC,MAAM15C,EAAO7I,EAAQwiD,aAAa,QAClC,QAAK35C,GACc,CACjB,OAAQ,WAAY,SAAU,QAAS,MAAO,MAC9C,SAAU,OAAQ,WAAY,iBAAkB,OAAQ,QAAS,QAEjDoM,QAAQpM,EAAK2sC,gBAAkB,EAQrBiN,CAAUn8C,EAAE0G,SACtCG,GAAe7G,GAIZ,SAASo8C,KAEdrkD,SAAS6H,iBAAiB,QAASiH,GAAgB,CAAEw1C,SAAS,IAC9D18C,OAAO28C,YAAcz1C,GACrB9O,SAASwkD,UAAYR,GAGhB,SAASS,KACdzkD,SAAS8H,oBAAoB,QAASgH,IAEtClH,OAAO28C,YAAc,KAErBvkD,SAASwkD,UAAY,K,yBC4BvB,SAASE,GAAaC,GACpB,OAAIA,EACK,4BAEF,wB,0BCrCT,MAkGA,GAhGyC,EACvC9+C,OAAAA,EACA5D,QAAAA,EACA2iD,OAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAC,SAAAA,EACAC,QAAAA,EACAC,OAAAA,EACAC,SAAAA,EACA13B,UAAAA,EACAC,UAAAA,EACA03B,WAAAA,EACAC,eAAAA,EACAC,iBAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAC,OAAAA,EACAC,MAAAA,EACAx5B,QAAAA,EACAjnB,UAAAA,EACAupB,SAAAA,EACAm3B,SAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACA/2B,SAAAA,EACAg3B,OAAAA,EACAC,aAAAA,EACAz6C,QAAAA,EACA06C,oBAAAA,EACAC,WAAAA,MAEA,MAAMC,EDnED,SACLlkD,EAAqBmkD,EAA0BF,GAE/C,MAAM74B,EAAwB,GACxBvmB,GAAOu/C,EAAAA,EAAAA,IAAepkD,GACtB2T,GAAQC,EAAAA,EAAAA,IAAgB5T,MACvBiU,EAAAA,EAAAA,IAAuBjU,QAA6CwD,GAAlCuQ,EAAAA,EAAAA,IAAuB/T,IAC1DilC,GAAY1hC,EAAAA,EAAAA,IAAoBvD,EAAS,UACzCqkD,EAAmB1wC,IAAUsxB,IAAaqf,EAAAA,EAAAA,IAAuBtkD,KAAaukD,GAAAA,GAC9EC,EAAY7+C,OAAO8+C,eAgBzB,GAdIJ,GACFj5B,EAAQjF,KAAK,CACX+E,MAAO,yBACPktB,QAAS,KACPsM,QAAQC,QAAQ1f,EAAY2f,GAAAA,GAAkB3f,EAAWjvB,EAAAA,GAAAA,SAA0BrC,EAAO/B,SACvFksB,KAAK+mB,GAAAA,IAEJV,GACFA,OAMJt/C,EAAM,CAER,MAAM69C,EAAev4C,QACnBq6C,GACGA,EAAUM,YACVN,EAAUM,WAAWC,YACpBP,EAAUM,WAAWC,WAA2B5lD,QAAQ,4BACD,KAAxDqlD,EAAUtzC,WAAWqV,QAAQ,kBAAmB,KAGrD6E,EAAQjF,KAAK,CACX+E,MAAOu3B,GAAaC,GACpBtK,QAAS,KACP,MAAM4M,EAAgBtC,GAAgB8B,EAAYA,EAAUtzC,WAAarM,GACzEogD,EAAAA,GAAAA,IAAoBD,GAEhBb,GACFA,OAmBR,OAbIF,GACF74B,EAAQjF,KAAK,CACX+E,MAAO,gCACPktB,QAAS,KACP6L,IAEIE,GACFA,OAMD/4B,ECMa85B,CAAsBllD,EAASsJ,EAASg6C,EAAcW,OAAazgD,GAEjF2hD,GAAoBxjD,EAAAA,EAAAA,KAAY,IAC7B5D,SAASY,cAAe,+CAA8CqB,EAAQZ,SACpF,CAACY,EAAQZ,KAENgmD,GAAiBzjD,EAAAA,EAAAA,KACrB,IAAM5D,SAASY,cAAc,2BAC7B,IAGI0mD,GAAiB1jD,EAAAA,EAAAA,KACrB,IAAM5D,SAASY,cAAc,gCAC7B,KAGI,UAAEyF,EAAF,UAAakhD,EAAb,MAAwBxlD,IAAUylD,EAAAA,GAAAA,GACtC5C,EACAwC,EACAC,EACAC,EAxDoB,GA0DnBtnD,SAASY,cAAc,iBAAiCa,cAGrDoC,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC2jD,GAAA,EAAD,CACE5hD,OAAQA,EACRQ,UAAWA,EACXkhD,UAAWA,EACXxlD,MAAOA,EACPmC,UAAU,2BACVqH,QAASA,EACT06C,oBAAqBA,GAEpBpB,GAAc,mBAACv+C,EAAA,EAAD,CAAUC,KAAK,eAAepC,QAAS4hD,GAASliD,EAAK,wBACnEihD,GACC,mBAACx+C,EAAA,EAAD,CAAUC,KAAK,WAAWpC,QAAS6hD,GAAeniD,EAAK,4BAExDkhD,GAAY,mBAACz+C,EAAA,EAAD,CAAUC,KAAK,QAAQpC,QAASshD,GAAU5hD,EAAK,UAC3DmhD,GAAW,mBAAC1+C,EAAA,EAAD,CAAUC,KAAK,OAAOpC,QAASuhD,GAAS7hD,EAAK,SACxDuhD,GACC,mBAAC9+C,EAAA,EAAD,CAAUC,KAAK,WAAWpC,QAAS0hD,GAAgBhiD,EAAK,mBAEzDwhD,GACC,mBAAC/+C,EAAA,EAAD,CAAUC,KAAK,WAAWpC,QAAS2hD,GAAkBjiD,EAAK,iCAE3DyhD,GAAWa,EAAY5jC,KAAK8K,GAC3B,mBAAC/mB,EAAA,EAAD,CAAUjC,IAAKgpB,EAAQF,MAAO5mB,KAAK,OAAOpC,QAASkpB,EAAQgtB,SAAUx2C,EAAKwpB,EAAQF,UAEnF83B,GAAU,mBAAC3+C,EAAA,EAAD,CAAUC,KAAK,MAAMpC,QAASwhD,GAAQ9hD,EAAK,cACrDqhD,GAAY,mBAAC5+C,EAAA,EAAD,CAAUC,KAAK,QAAQpC,QAASgoB,GAAUtoB,EAAK,gBAC3DshD,GAAc,mBAAC7+C,EAAA,EAAD,CAAUC,KAAK,UAAUpC,QAASe,GAAYrB,EAAK,YACjE2hD,GAAa,mBAACl/C,EAAA,EAAD,CAAUC,KAAK,SAASpC,QAAS4qB,GAAWlrB,EAAK,kBAC9D4pB,GAAa,mBAACnnB,EAAA,EAAD,CAAUC,KAAK,OAAOpC,QAASyhD,GAAW/hD,EAAK,2BAC5D2pB,GAAa,mBAAClnB,EAAA,EAAD,CAAUwoB,aAAW,EAACvoB,KAAK,SAASpC,QAASsqB,GAAW5qB,EAAK,aCqJjF,IAAemH,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUX,QAAAA,EAASsrB,gBAAAA,MAClB,MAAM,SAAEpZ,IAAagW,EAAAA,EAAAA,IAAyBvnB,IAAW,IACnD,UACJ8kD,EADI,SAEJ3C,EAFI,OAGJE,EAHI,SAIJC,EAJI,UAKJ13B,EALI,UAMJC,EANI,QAOJu3B,EAPI,WAQJG,EARI,eASJC,EATI,iBAUJC,EAVI,QAWJC,EAXI,YAYJC,EAZI,UAaJC,GACGrxC,IAAYkW,EAAAA,EAAAA,IAA4BznB,EAAQX,EAASkS,IAAc,GACtEib,EAA+B,WAApB7B,EACXo6B,EAAkC,cAApBp6B,EAEpB,MAAO,CACLm6B,UAAAA,EACA7C,WAAY8C,EACZ7C,cAAe6C,EACf5C,UAAW31B,IAAau4B,GAAe5C,EACvCE,QAAS0C,GAAe1C,EACxBC,UAAWyC,GAAezC,EAC1B13B,UAAAA,EACAC,UAAAA,EACAu3B,SAAU51B,GAAY41B,EACtBG,YAAawC,GAAexC,EAC5BC,gBAAiBuC,GAAevC,EAChCC,kBAAmBsC,GAAetC,EAClCC,QAAAA,EACAC,aAAcoC,GAAepC,EAC7BC,UAAAA,MAGJ,CAACliD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBACA,eACA,aACA,kBACA,cACA,gBACA,yBACA,wBACA,uBAhDgBZ,EA3OoD,EACtEkD,OAAAA,EACA0nB,gBAAAA,EACAq6B,aAAAA,EACA3lD,QAAAA,EACA4oB,MAAAA,EACA+5B,OAAAA,EACAr5C,QAAAA,EACA06C,oBAAAA,EACAyB,UAAAA,EACA7C,WAAAA,EACAC,cAAAA,EACAC,SAAAA,EACAE,OAAAA,EACAC,SAAAA,EACA13B,UAAAA,EACAC,UAAAA,EACAu3B,QAAAA,EACAG,WAAAA,EACAC,eAAAA,EACAC,iBAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAC,UAAAA,EACAqC,gBAAAA,EACAC,aAAAA,EACAl8B,WAAAA,EACAnW,gBAAAA,EACAsyC,YAAAA,EACAC,cAAAA,EACAC,uBAAAA,EACAC,sBAAAA,EACAC,kBAAAA,MAEA,MAAM,qBAAE16C,IAAyBE,EAAAA,EAAAA,GAAkB9H,EAAQogD,OAAqBxgD,GAAW,IACpF2iD,EAAYC,IAAiBlhD,EAAAA,EAAAA,KAAS,IACtC8mB,EAAmBq6B,IAAwBnhD,EAAAA,EAAAA,KAAS,IACpDinB,EAAmBm6B,IAAwBphD,EAAAA,EAAAA,KAAS,IACpDqhD,EAAgBC,IAAqBthD,EAAAA,EAAAA,KAAS,IAC9CuhD,EAAgBC,EAAcC,IAAiB/hC,EAAAA,GAAAA,KAEhDgJ,GAAejsB,EAAAA,EAAAA,KAAY,KAC/BykD,GAAc,GACdC,GAAqB,KACpB,IAEGx7B,GAAelpB,EAAAA,EAAAA,KAAY,KAC/BykD,GAAc,GACdE,GAAqB,KACpB,IAEGM,GAAYjlD,EAAAA,EAAAA,KAAY,KAC5BykD,GAAc,GACd98C,MACC,CAACA,IAEE4iB,GAAmBvqB,EAAAA,EAAAA,KAAY,KACnC0kD,GAAqB,GACrB/8C,MACC,CAACA,IAEE+iB,GAAmB1qB,EAAAA,EAAAA,KAAY,KACnC2kD,GAAqB,GACrBh9C,MACC,CAACA,IAEEu9C,GAAgBllD,EAAAA,EAAAA,KAAY,KAChC6kD,GAAkB,GAClBl9C,MACC,CAACA,IAEEw9C,GAAsBnlD,EAAAA,EAAAA,KAAY,KACtCglD,IACAr9C,MACC,CAACq9C,EAAer9C,IAEby9C,IAAcplD,EAAAA,EAAAA,KAAY,KAC9BikD,EAAgB,CAAE/kD,UAAWb,EAAQZ,KACrCwnD,MACC,CAAChB,EAAiB5lD,EAAQZ,GAAIwnD,IAE3BI,IAAarlD,EAAAA,EAAAA,KAAY,KAC7BkkD,EAAa,CAAEhlD,UAAWb,EAAQZ,KAClCwnD,MACC,CAACf,EAAc7lD,EAAQZ,GAAIwnD,IAExBK,IAAYtlD,EAAAA,EAAAA,KAAY,KAC5BykD,GAAc,GACdI,GAAkB,KACjB,IAEGU,IAAcvlD,EAAAA,EAAAA,KAAY,KAC9BgoB,EAAW,CAAE9oB,UAAWb,EAAQZ,GAAIyqB,SAAS,IAC7C+8B,MACC,CAACj9B,EAAY3pB,EAAQZ,GAAIwnD,IAEtB5qC,IAAgBra,EAAAA,EAAAA,KAAY,KAEhC,GADAilD,IACIh+B,GAASA,EAAMI,SAAU,CAC3B,MAAMxU,EAAaoU,EAAMI,SAAS1I,KAAI,EAAGlhB,GAAAA,KAASA,IAClDoU,EAAgB,CAAEyI,WAAYjc,EAAQY,OAAQ4T,WAAAA,SAE9ChB,EAAgB,CAAEyI,WAAYjc,EAAQY,OAAQ4T,WAAY,CAACxU,EAAQZ,QAEpE,CAACoU,EAAiBxT,EAAS4mD,EAAWh+B,IAEnCu+B,IAAoBxlD,EAAAA,EAAAA,KAAY,KACpCilD,IACAd,EAAY,CAAElgB,QAAS5lC,EAAQs2B,QAAQsP,YACtC,CAACghB,EAAW5mD,EAAQs2B,QAAQsP,QAASkgB,IAElCsB,IAAsBzlD,EAAAA,EAAAA,KAAY,KACtCilD,IACAb,EAAc,CAAEngB,QAAS5lC,EAAQs2B,QAAQsP,YACxC,CAACghB,EAAW5mD,EAAQs2B,QAAQsP,QAASmgB,IAElCsB,IAAsB1lD,EAAAA,EAAAA,KAAY,KACtC,MAAM2lD,EAAS1+B,GAASA,EAAMI,SAC1B,CACAnoB,UAAWb,EAAQZ,GACnBmoD,gBAAiB3+B,EAAMI,SAAS1I,KAAI,EAAGlhB,GAAAA,KAASA,IAChDooD,WAAW,GAEX,CAAE3mD,UAAWb,EAAQZ,GAAIooD,WAAW,GAExCxB,EAAuBsB,GACvBV,MACC,CAACA,EAAW5mD,EAAQZ,GAAI4mD,EAAwBp9B,IAE7C6+B,IAA6B9lD,EAAAA,EAAAA,KAAY,KAC7CskD,EAAsB,CAAErlD,OAAQZ,EAAQY,OAAQxB,GAAIY,EAAQZ,KAC5DwnD,MACC,CAACA,EAAW5mD,EAAQY,OAAQZ,EAAQZ,GAAI6mD,IAErCyB,IAAqB/lD,EAAAA,EAAAA,KAAY,KACrCykD,GAAc,GACdM,MACC,CAACA,IAEEiB,IAA0BhmD,EAAAA,EAAAA,KAAagB,IAC3CujD,EAAkB,CAChBtlD,OAAQZ,EAAQY,OAChBC,UAAWb,EAAQZ,GACnBwoD,YAAarjD,KAAKT,MAAMnB,EAAK6iB,UAAY,SAE1C,CAACxlB,EAAQY,OAAQZ,EAAQZ,GAAI8mD,IAE1B2B,IAAiBlmD,EAAAA,EAAAA,KAAY,MACjCsjD,EAAAA,GAAAA,IAAqB,gBAAeU,GAAiB,KAAIphD,KAAKujD,IAAI9nD,EAAQY,aAAaZ,EAAQZ,MAC/FwnD,MACC,CAACjB,EAAciB,EAAW5mD,EAAQY,OAAQZ,EAAQZ,MAErD+F,EAAAA,EAAAA,KAAU,KACRi9C,KAEOI,KACN,IAEH,MAAMuF,IAAmBrkD,EAAAA,EAAAA,KAAQ,KAAOklB,EAAQA,EAAMI,SAAW,CAAChpB,IAAUsgB,KAAI,EAAGlhB,GAAAA,KAASA,KAAK,CAACwpB,EAAO5oB,IAEzG,GAAIylD,EAGF,YAFAmB,IAKF,MAAMoB,GAAmB,IAAI5kC,KAG7B,OAFA4kC,GAAiBniC,YAAYmiC,GAAiB1kC,cAAgB,GAG5D,0BAAKrhB,UAAW,CAAC,uBAAwBuJ,GAAsBmC,KAAK,MAClE,mBAAC,GAAD,CACE3N,QAASA,EACT4D,OAAQuiD,EACRxD,OAAQA,EACRC,WAAYA,EACZC,cAAeA,EACfC,SAAUA,EACVv3B,UAAWA,EACXC,UAAWA,EACXw3B,OAAQA,EACRC,SAAUA,EACVF,QAASA,EACTG,WAAYA,EACZC,eAAgBA,EAChBC,iBAAkBA,EAClBC,QAASA,EACTC,YAAaA,EACbC,UAAWA,EACXC,QAASuD,GACTtD,OAAQuD,GACRtD,MAAOuD,GACP/8B,QAASg9B,GACTjkD,UAAW+Y,GACXwQ,SAAUoB,EACV+1B,SAAU94B,EACV+4B,cAAeuD,GACftD,gBAAiBuD,GACjBt6B,SAAUu6B,GACVvD,OAAQ2D,GACR1D,aAAc2D,GACdp+C,QAASs9C,EACT3C,WAAY4D,KAEd,mBAAC,GAAD,CACEjkD,OAAQooB,EACR/D,WAAgC,cAApBqD,EACZhiB,QAAS4iB,EACTtD,MAAOA,EACP5oB,QAASA,IAEX,mBAAC,GAAD,CACE4D,OAAQuoB,EACR7iB,QAAS+iB,EACT7X,WAAYuzC,KAEd,mBAAC,GAAD,CACEnkD,OAAQ2iD,EACR1lD,UAAWb,EAAQZ,GACnBwB,OAAQZ,EAAQY,OAChB0I,QAASu9C,IAEX,mBAAC,GAAD,CACEjjD,OAAQ6iD,EACRxiC,gBAAc,EACdJ,WAA2B,IAAf7jB,EAAQ2C,KACpBmhB,OAAOmkC,EAAAA,EAAAA,IAAcD,IACrBjkC,cAAY,EACZza,QAASw9C,EACT1iC,SAAUujC,UC1JlB,IAAe5+C,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAU8nC,YAAAA,EAAayf,oBAAAA,MACf,CACLrjB,WAAY4D,GACR0f,EAAAA,EAAAA,IAAiBxnD,EAAQ8nC,EAAY2f,cACrCF,GACEG,EAAAA,EAAAA,IAA4B1nD,EAAQunD,QACpC1kD,MAGV,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,eACA,mBACA,iBAbgBZ,EA9F+C,EACjEkD,OAAAA,EACA6kC,YAAAA,EACAyf,oBAAAA,EACArjB,WAAAA,EACAv7B,QAAAA,EACAg/C,aAAAA,EACAC,iBAAAA,EACAC,YAAAA,MAGA,MAAM9oC,GAAelW,EAAAA,EAAAA,IAAuB,MACtC5H,GAAOC,EAAAA,EAAAA,MAGXolC,QAASnC,IACPqC,EAAAA,GAAAA,IAAwB,CAAEC,QAAS1nB,EAAc+oC,WAlBzB,IAkB4DC,YAAa9kD,KAErGuB,EAAAA,EAAAA,KAAU,KACR,GAAIvB,EACF,GAAI6kC,EAAa,CACf,MAAM,aAAE2f,EAAF,qBAAgBO,GAAyBlgB,EAC/C6f,EAAa,CACXF,aAAAA,EACAO,qBAAAA,SAEOT,GACTI,EAAa,CACXJ,oBAAAA,MAIL,CAACtkD,EAAQ6kC,EAAa6f,EAAcJ,IAEvC,MAAM1c,GAAe7pC,EAAAA,EAAAA,KAAaikC,IAChCA,EAAU,IACLA,EACHgjB,qBAAqB,GAGvBJ,EAAY,CAAE5iB,QAAAA,IACdt8B,MACC,CAACA,EAASk/C,IAEPK,GAAoBlnD,EAAAA,EAAAA,KAAY,KAChCkjC,IACF0jB,EAAiB,CAAEH,aAAcvjB,EAAWzlC,KAC5CkK,OAED,CAACA,EAASu7B,EAAY0jB,IAEzB,OACE,mBAACvoC,GAAA,EAAD,CACE/d,UAAU,kBACV2B,OAAQA,EACR0F,QAASA,EACTw/C,gBAAc,EACdvnC,MAAOsjB,GAAapiC,EAAAA,EAAAA,GAAWoiC,EAAWtjB,MAAO,CAAC,QAAS,UAAY3f,EAAK,uBAE3EijC,GAAcA,EAAWU,SACxB,sCACE,0BAAKp4B,IAAKuS,EAAczd,UAAU,0BAC/B4iC,EAAWU,SAASjlB,KAAKslB,GACxB,mBAACD,GAAA,EAAD,CACEC,QAASA,EACTvjC,KAAM0mD,EAAAA,GACNjkB,oBAAqBA,EACrB5iC,QAASspC,EACTrY,SAAUyS,OAIhB,0BAAK3jC,UAAU,kBACb,mBAAC4B,EAAA,EAAD,CACExB,KAAK,UACLs8B,OAAK,EACL56B,MAAO8gC,EAAWyD,cAAgB,SAAW,UAC7CpmC,QAAS2mD,GAERjnD,EACCijC,EAAWyD,cAAgB,iCAAmC,8BAC9DzD,EAAW/F,MACX,QAMR,mBAACle,GAAA,EAAD,W,eCvER,MAmKA,IAAe7X,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAChC,OAAK0B,GAAQA,EAAK0mD,aACT,GAGF,CACL1mD,KAAAA,EACA+qB,SAASC,EAAAA,EAAAA,IAAkBhrB,GAAMirB,EAAAA,EAAAA,IAAqB5sB,IAAS6sB,EAAAA,EAAAA,IAAuB7sB,IACtFk4C,WAAW73C,EAAAA,EAAAA,IAAcsB,EAAKlD,IAC9B6pD,eAAeC,EAAAA,EAAAA,IAAiB5mD,OAGpC,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,yBACA,iBACA,gBAlBgBZ,EAnKmD,EACrEE,OAAAA,EACAgD,OAAAA,EACA++C,OAAAA,EACAlhC,UAAAA,EACA0nC,YAAAA,EACAC,cAAAA,EACAC,aAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAhG,UAAAA,EACAiG,SAAAA,EACAlnD,KAAAA,EACAu2C,UAAAA,EACAxrB,QAAAA,EACA47B,cAAAA,EACAQ,mBAAAA,EACAC,cAAAA,EACApgD,QAAAA,EACA06C,oBAAAA,EACA2F,qBAAAA,EACAC,uBAAAA,EACAC,eAAAA,EACAC,WAAAA,MAEA,MAAO3D,EAAYC,IAAiBlhD,EAAAA,EAAAA,KAAS,IACtC8mB,EAAmBq6B,IAAwBnhD,EAAAA,EAAAA,KAAS,IACrD,EAAEyK,EAAF,EAAKC,GAAM+yC,GAEjBj3C,EAAAA,EAAAA,GAAkB9H,EAAQogD,OAAqBxgD,GAAW,GAE1D,MAAMoqB,GAAejsB,EAAAA,EAAAA,KAAY,KAC/BykD,GAAc,GACdC,GAAqB,KACpB,IAEGO,GAAYjlD,EAAAA,EAAAA,KAAY,KAC5BykD,GAAc,GACd98C,MACC,CAACA,IAEE4iB,GAAmBvqB,EAAAA,EAAAA,KAAY,KACnC0kD,GAAqB,GACrB/8C,MACC,CAACA,IAEEygD,GAAiBpoD,EAAAA,EAAAA,KAAY,KACjCkoD,EAAe,CAAEG,QAAS,aACzB,CAACH,IAEEI,GAAmBtoD,EAAAA,EAAAA,KAAY,KACnCmoD,EAAW,CAAElpD,OAAAA,MACZ,CAACA,EAAQkpD,IAENI,GAAwBvoD,EAAAA,EAAAA,KAAY,KACxCgoD,EAAqB,CAAE/oD,OAAAA,EAAQysB,SAAUA,IACzCu5B,MACC,CAAChmD,EAAQgmD,EAAWv5B,EAASs8B,IAE1BQ,GAAkBxoD,EAAAA,EAAAA,KAAY,KAClC8nD,IACA7C,MACC,CAACA,EAAW6C,IAETW,GAAezoD,EAAAA,EAAAA,KAAY,KAC/B+nD,IACA9C,MACC,CAACA,EAAW8C,IAETW,GAAuB1oD,EAAAA,EAAAA,KAAY,KACvCioD,IACAhD,MACC,CAACA,EAAWgD,KAEfzkD,EAAAA,EAAAA,KAAU,KACRi9C,KAEOI,KACN,IAEH,MAAM5gD,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACyoD,GAAA,EAAD,KACE,0BAAKroD,UAAU,uBACb,mBAACujD,GAAA,EAAD,CACE5hD,OAAQuiD,EACR/hD,UAAU,QACVtE,MAAQ,SAAQ6P,YAAYC,OAC5BtG,QAASs9C,GAER3iD,EAAAA,IAA2BklD,GAC1B,mBAAC9kD,EAAA,EAAD,CACEC,KAAK,OACLpC,QAAS6nD,GAERnoD,EAAK,aAGTqC,EAAAA,IAA2BmlD,GAC1B,mBAAC/kD,EAAA,EAAD,CACEC,KAAK,OACLpC,QAAS+nD,GAERroD,EAAK,eAGTqC,EAAAA,IAA2BolD,GAC1B,mBAAChlD,EAAA,EAAD,CACEC,KAAMmd,EAAY,UAAY,QAC9Bvf,QAASioD,GAERvoD,EAAK6f,EAAY,YAAc,eAGnCxd,EAAAA,IAA2BqlD,GAC1B,mBAACjlD,EAAA,EAAD,CACEC,KAAK,SACLpC,QAASkoD,GAERxoD,EAAK,WAGT2nD,GACC,mBAACllD,EAAA,EAAD,CACEC,KAAM+oB,EAAU,SAAW,OAC3BnrB,QAASgoD,GAERtoD,EAAKyrB,EAAU,cAAgB,cAGnCk2B,GACC,mBAACl/C,EAAA,EAAD,CACEC,KAAK,SACLpC,QAASmoD,GAERzoD,EAAK,yBAGT4nD,GACC,mBAACnlD,EAAA,EAAD,CACEwoB,aAAW,EACXvoB,KAAK,SACLpC,QAAS0rB,GAERhsB,EAAKi3C,EACF,SACCoQ,EAAgB,0BAA6BxnC,EAAY,eAAiB,sBAIpFnf,GACC,mBAAC0rB,GAAA,EAAD,CACEpqB,OAAQooB,EACR1iB,QAAS4iB,EACT5pB,KAAMA,U,eC7KlB,MAAMioD,IAAwBpxB,EAAAA,EAAAA,KAAUjL,GAAOA,KAAM,KAAK,GAsK1D,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAM2B,GAAOgoB,EAAAA,EAAAA,IAAkB3pB,GAC/B,IAAK2B,EACH,MAAO,GAGT,MAAM,MAAEwvB,EAAF,QAAS04B,IAAYC,EAAAA,EAAAA,IAAwB9pD,IAAW,IACxD,WAAEyyC,EAAF,SAAchgC,GAAao3C,GAAW,GAE5C,MAAO,CACLloD,KAAAA,EACAwvB,MAAAA,EACAshB,WAAAA,EACAhgC,SAAAA,EACAs3C,sBAAuBvgD,QAAQxJ,EAAOgnB,+BAG1C,CAACtmB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,0BACA,0BACA,eACA,uBACA,yBAvBgBZ,EApKuC,EACzDyc,SAAAA,EACA7a,KAAAA,EACAwvB,MAAAA,EACAshB,WAAAA,EACAhgC,SAAAA,EACAs3C,sBAAAA,EACAC,wBAAAA,EACAC,wBAAAA,EACAnpD,aAAAA,EACAopD,qBAAAA,EACAC,oBAAAA,MAGA,MAAM78C,GAAWzE,EAAAA,EAAAA,IAAyB,OACnCuhD,EAAcC,IAAmB9lD,EAAAA,EAAAA,IAAS,IAGjDC,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAE8lD,GAAmBtlD,OAC3B,IAAKslD,EACH,OAGF,MAAMC,EAASntD,SAAS2c,eAAe,QACjCjV,EAAe,KACnB,MAAM,cAAEunB,GAAkBjvB,SAC1B,GAAIivB,GAAkBA,IAAkB/e,EAASxD,QAAU,CACzD,MAAM,QAAE0gD,EAAF,OAAW7lD,GAAW2lD,EAC5BC,EAAOprD,MAAMmR,UAAa,cAAak6C,OACvCD,EAAOprD,MAAMwF,OAAU,GAAEA,MACzBvH,SAASkqC,gBAAgB1oC,UAAY4rD,OAErCD,EAAOprD,MAAMmR,UAAY,GACzBi6C,EAAOprD,MAAMwF,OAAS,IAM1B,OAFA2lD,EAAerlD,iBAAiB,SAAUH,GAEnC,KACLwlD,EAAeplD,oBAAoB,SAAUJ,MAE9C,KAGHN,EAAAA,EAAAA,KAAU,KACJ7C,GAAQ8Q,GAAYA,EAAS9S,QAC/BmB,EAAa,CAAEb,OAAQ0B,EAAKlD,GAAIyB,UAAWuS,EAASA,EAAS9S,OAAS,KACtE0qD,EAAgB,IAEhBA,GAAiB,KAElB,CAAC1oD,EAAMb,EAAc2R,KAGxBjO,EAAAA,EAAAA,KAAU,KACRimD,MAAMC,KAAKttD,SAASqC,iBAAmC,UAAU6jC,SAASqnB,IACxEA,EAAM/8C,SAAWpE,QAAQgT,GAAYmuC,IAAUr9C,EAASxD,YAG1D2gD,MAAMC,KAAKttD,SAASqC,iBAAiC,yBAAyB6jC,SAASsnB,IACrFA,EAAIC,gBAAkBruC,EAAW,QAAU,YAE5C,CAACA,KAGJhY,EAAAA,EAAAA,KAAU,KACHgY,GACHlP,EAASxD,QAASoU,SAEnB,CAAC1B,KAEJ/S,EAAAA,EAAAA,KAAgB,KACMrM,SAASY,cAAgC,uBACjDkgB,SACX,CAAC6rC,IAEJ,MAAMe,GAAiC9pD,EAAAA,EAAAA,KAAa+pD,IAClDf,EAAwB,CAAE74B,MAAO45B,IAE7BA,EAASprD,QACXiqD,GAAsBK,KAEvB,CAACA,EAAyBD,IAEvBgB,GAAWhqD,EAAAA,EAAAA,KAAY,KAC3B,GAAIW,GAAQ8Q,EAAU,CACpB,MAAMw4C,EAAgBb,EAAe,EACrCtpD,EAAa,CAAEb,OAAQ0B,EAAKlD,GAAIyB,UAAWuS,EAASA,EAAS9S,OAAS,EAAIsrD,KAC1EZ,EAAgBY,MAEjB,CAACtpD,EAAMyoD,EAActpD,EAAc2R,IAEhCy4C,GAAalqD,EAAAA,EAAAA,KAAY,KAC7B,GAAIW,GAAQ8Q,EAAU,CACpB,MAAMw4C,EAAgBb,EAAe,EACrCtpD,EAAa,CAAEb,OAAQ0B,EAAKlD,GAAIyB,UAAWuS,EAASA,EAAS9S,OAAS,EAAIsrD,KAC1EZ,EAAgBY,MAEjB,CAACtpD,EAAMyoD,EAActpD,EAAc2R,IAEtC,OACE,0BAAKhU,GAAG,eAAe6C,UAAWkb,EAAW,SAAW,IACtD,0BAAKlb,UAAU,UACb,mBAAC4B,EAAA,EAAD,CACExB,KAAK,UACLyB,OAAK,EACLC,MAAM,cACN7B,QAAS2oD,GAET,wBAAG5oD,UAAU,qBAEf,mBAAC6pD,GAAA,EAAD,CACE3+C,IAAKc,EACLxF,MAAOqpB,EACPtjB,SAAUi9C,KAGd,0BAAKxpD,UAAU,UACb,0BAAKA,UAAU,WACZ6vB,EACC1e,GAAYA,EAAS9S,OAClB,GAAEyqD,EAAe,QAAQ3X,IACxBhgC,IAAaA,EAAS9S,OACxB,aAEA,GAGF,mBAACuD,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAAS,IAAM4oD,EAAoB,CAAEjnC,YAAYokC,EAAAA,EAAAA,IAAc7kC,KAAKkB,SACpEtgB,UAAU,2BAEV,wBAAG/B,UAAU,oBAInB,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAASypD,EACTp9C,UAAW6E,IAAaA,EAAS9S,QAAUyqD,IAAiB33C,EAAS9S,OAAS,GAE9E,wBAAG2B,UAAU,aAEf,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAAS2pD,EACTt9C,UAAW6E,IAAaA,EAAS9S,QAA2B,IAAjByqD,GAE3C,wBAAG9oD,UAAU,qB,2DCnMR,SAAS8pD,GACtBjtD,EACAktD,EACAC,EAAS,EACTC,GAAU,EACVC,GAAsB,EACtBC,GAAe,GAEf,MAAMC,EAAavtD,EAAUstD,EAAe,aAAe,aACrDE,EAAaD,EAAavtD,EAAUstD,EAAe,cAAgB,gBACnEG,EAA4C,iBAAvBP,EACvBltD,EAAUsB,iBAA8B4rD,GACxCA,GACE,OAAE1rD,GAAWisD,EACbC,EAA2B,GACjC,IAAIC,GAAU,EAEd,IAAK,IAAIvmC,EAAI,EAAGA,EAAI5lB,EAAQ4lB,IAAK,CAC/B,MAAMxmB,EAAU6sD,EAAYrmC,GACtBwmC,EAAKhtD,EAAQ0sD,EAAe,aAAe,aAC3CO,EAAKD,EAAKhtD,EAAQ0sD,EAAe,cAAgB,gBAKvD,GAJkBD,EACdQ,GAAMN,EAAaJ,GAAUU,GAAML,EAAaL,EAChDS,GAAMJ,EAAaL,GAAUU,GAAMN,EAAaJ,EAGlDO,EAAermC,KAAKD,GACpBumC,GAAU,OACL,GAAIA,IAAYP,EACrB,MAIJ,MAAO,CAAEK,YAAAA,EAAaC,eAAAA,GCzBxB,SARA,SAAwB1tD,EAAwBY,EAAsB0sD,GAAe,GACnF,MAAMC,EAAavtD,EAAUstD,EAAe,aAAe,aACrDE,EAAaD,EAAavtD,EAAUstD,EAAe,cAAgB,gBACnEM,EAAKhtD,EAAQ0sD,EAAe,aAAe,aAC3CO,EAAKD,EAAKhtD,EAAQ0sD,EAAe,cAAgB,gBACvD,OAAOM,EAAKL,GAAcM,EAAKL,G,cCElB,SAASM,GAAsBC,EAAkBtwC,EAAemD,GAC7E,MAAM5gB,EAAY4gB,EAAajV,QAC/B,IAAK3L,GAAayd,EAAQ,EACxB,OAEF,MAAM,eAAEiwC,EAAF,YAAkBD,GAAgBR,GACtCjtD,EACA+tD,EAVoB,GAYpB,GACA,GAGF,IAAKN,EAAYjsD,SAAWisD,EAAYhwC,GACtC,OAEF,MAAMuwC,EAAQN,EAAe,GAC7B,IAAKA,EAAentD,SAASkd,IACvBA,IAAUuwC,IAAUC,GAAejuD,EAAWytD,EAAYO,IAAU,CACxE,MAAME,EAAWzwC,EAAQiwC,EAAeA,EAAelsD,OAAS,GAAK,QAAU,OAC/E2sD,EAAAA,GAAAA,GAAiBnuD,EAAWytD,EAAYhwC,GAAQywC,EAtB9B,K,eCDf,SAASE,IAAsB,SACpC/vC,EADoC,aAEpCivC,EAFoC,6BAGpCe,EAHoC,kBAIpCC,EAJoC,MAKpCjtC,EALoC,kBAMpCktC,EANoC,SAOpCvgC,EAPoC,QAQpCxjB,IAWA,MAAOgkD,EAAmBC,IAAwBroD,EAAAA,EAAAA,KAAU,GAEtDsoD,GAAmB7rD,EAAAA,EAAAA,KAAa8rD,GAC/BttC,GAIEutC,EAAAA,GAAAA,GAAcvtC,EAAM7f,OAAQmtD,IAHzB,GAIT,CAACttC,IAEEwtC,GAAiBhsD,EAAAA,EAAAA,KAAY,CAAC8G,EAAezC,KACjDA,EAAE6G,iBACF0gD,GAAsBhxC,GAAWixC,EAAiBjxC,EAAQ9T,OACzD,CAAC8kD,EAAsBC,IAEpBI,GAAmBjsD,EAAAA,EAAAA,KAAaqE,IACpC,GAAIma,GAASA,EAAM7f,QAAUgtD,GAAqB,EAAG,CACnD,MAAMO,EAAO1tC,EAAMmtC,GACfO,IACF7nD,EAAE6G,iBACFigB,EAAS+gC,OAGZ,CAAC1tC,EAAO2M,EAAUwgC,IAkBrB,OAhBAnoD,EAAAA,EAAAA,KAAU,KACRooD,EAAqBJ,GAAgC,EAAI,KACxD,CAAChtC,EAAOgtC,KAEXhoD,EAAAA,EAAAA,KAAU,IAAOgY,GAAWmP,EAAAA,GAAAA,GAAyB,CACnDG,MAAOnjB,EACPwkD,KAAMV,GAAqBhB,OAAe5oD,EAAawC,GAAqB2nD,GAAgB,EAAG3nD,GAC/F+nD,OAAQX,GAAqBhB,OAAe5oD,EAAawC,GAAqB2nD,EAAe,EAAG3nD,GAChGgoD,OAAQZ,IAAsBhB,OAAe5oD,EAAawC,GAAqB2nD,GAAgB,EAAG3nD,GAClGioD,QAASb,IAAsBhB,OAAe5oD,EAAawC,GAAqB2nD,EAAe,EAAG3nD,GAClGkoD,MAAOb,EAAoBO,OAAmBpqD,EAC9C2lB,QAASykC,SACNpqD,GAAY,CACf4pD,EAAmBO,EAAgBC,EAAkBzwC,EAAUivC,EAAc9iD,EAAS+jD,IAGjFC,ECvCT,MAiFA,IAAevkD,EAAAA,EAAAA,KAjFsB,EACnCnF,OAAAA,EACA0F,QAAAA,EACA6kD,iBAAAA,EACA7/B,UAAAA,EACA8/B,cAAAA,MAGA,MAAM1uC,GAAelW,EAAAA,EAAAA,IAAuB,OACtC,aAAE8B,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB9H,OAAQJ,OAAWA,GAAW,GAEzF6qD,GAAmB1sD,EAAAA,EAAAA,KAAY,CAAC+e,EAAgB4tC,GAAa,KACjE,MAAM/rD,EAAO+rB,GAAaA,EAAU5N,GAC/Bne,GAIL4rD,EAAiB5rD,EAAM+rD,KACtB,CAAChgC,EAAW6/B,IAETI,GAAsB5sD,EAAAA,EAAAA,KAAa6sD,IACvCH,EAAiBG,EAAOpvD,IAAI,KAC3B,CAACivD,IAEEI,EAAuBvB,GAAsB,CACjD/vC,SAAUvZ,EACVuc,MAAOiuC,EACPthC,SAAUyhC,EACVlB,mBAAmB,EACnB/jD,QAAAA,KAGFnE,EAAAA,EAAAA,KAAU,KACRynD,GAAsB,uBAAwB6B,EAAsB/uC,KACnE,CAAC+uC,KAEJtpD,EAAAA,EAAAA,KAAU,KACJipD,IAAkBA,EAAc9tD,QAClCgJ,MAED,CAAC8kD,EAAe9kD,IAEnB,MAAMolD,GAAkB1gD,EAAAA,EAAAA,GACtBogD,GAAiBA,EAAc9tD,OAC3B8tD,OACA5qD,EACJ8H,GAEIqjD,EAAsBP,IAAkBA,EAAc9tD,OACxDouD,EACAN,EAEJ,IAAK9iD,GAAiBqjD,IAAwBA,EAAoBruD,OAChE,OAGF,MAAM2B,GAAY8D,EAAAA,EAAAA,GAChB,gDACAyF,GAGF,OACE,0BAAKvJ,UAAWA,EAAWkL,IAAKuS,GAC7BivC,GAAuBA,EAAoBruC,KAAI,EAAGlhB,GAAAA,GAAMmd,IACvD,mBAACgE,GAAA,EAAD,CACEne,IAAKhD,EACL6C,UAAU,kCACVC,QAAS,IAAMmsD,EAAiBjvD,GAChCwf,MAAO6vC,IAAyBlyC,GAEhC,mBAACiE,GAAA,EAAD,CACEE,OAAQthB,EACR2uB,WAAW,QACXN,cAAY,W,eCzDxB,MAqNA,IAAe1kB,EAAAA,EAAAA,KAnNuB,EACpC6lD,YAAAA,EACAC,QAAAA,EACAC,QAAAA,EACA7wC,cAAAA,EACA8wC,iBAAAA,EACAzgC,UAAAA,EACA0gC,aAAAA,EACAC,kBAAAA,EACAC,cAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAtL,OAAAA,EACAuL,aAAAA,EACAC,QAAAA,MAGA,MAAMC,GAAiB/lD,EAAAA,EAAAA,IAAe,MAChCgmD,GAAkBxhD,EAAAA,EAAAA,GAAY4gD,GAC9Ba,EAAuBb,EAAYtuD,OAASsuD,EAAcY,EAC1D5rD,EAASuG,QAAQykD,EAAYtuD,SAC5BovD,EAAWC,EAAaC,IAAiBhrC,EAAAA,GAAAA,KAC1CirC,EAAU1lD,QAAQslD,GAAwBA,EAAqBK,OAAOr9B,GAAMA,EAAEs9B,SAC9EnuD,GAAOC,EAAAA,EAAAA,MAEP,qBACJmuD,EADI,oBACkBC,EADlB,cACuCC,EADvC,qBACsDC,IACxDC,EAAAA,GAAAA,GACFxsD,EACAirD,EACAO,EACAiB,EAAAA,GACAtB,OACAvrD,EACAya,EACAqQ,IAEI,mBACJgiC,EADI,kBACgBC,EADhB,eACmCC,EADnC,YACmDC,IACrDC,EAAAA,GAAAA,GACF9sD,EACAirD,EACAG,EACAqB,EAAAA,GACAjB,EACAH,EACAC,GACCJ,IAGH3pD,EAAAA,EAAAA,KAAU,IAAOvB,GAASsY,EAAAA,EAAAA,GAAsBozC,QAAW9rD,GAAY,CAACI,EAAQ0rD,IAEhF,MAAMqB,GAAkBhvD,EAAAA,EAAAA,KAAY,KAC9BiC,GACFkgD,MAED,CAAClgD,EAAQkgD,IAsBN8M,GAAkBjvD,EAAAA,EAAAA,KAAaqE,IACnCA,EAAE6G,iBACF+iD,IAEA,MAAQiB,cAAc,MAAErkB,IAAYxmC,EAEpC,GAAIwmC,GAASA,EAAMlsC,OAAQ,CACzB,MAAMwwD,EAAWjB,EACbzE,MAAMC,KAAK7e,GAAO9tB,QAAQqyC,GACnBA,EAAKxoD,MAAQyoD,EAAAA,GAAAA,IAAmCD,EAAKxoD,QAE5D6iD,MAAMC,KAAK7e,GAEf6iB,EAAayB,EAAUjB,MAExB,CAACA,EAASR,EAAcO,IAW3B,IAAKH,EACH,OAGF,MAAMwB,EAAexB,EAAqBK,OAAOr9B,GAAMA,EAAEy+B,SAAS/6C,WAAW,YACvEg7C,EAAe1B,EAAqBK,OAAOr9B,GAAMA,EAAEy+B,SAAS/6C,WAAW,YAE7E,IAAIoL,EAAQ,GAgCZ,OA9BEA,EAAQ3f,EADNqvD,EACW,0BACJE,EACI,0BAEA,yBAJ2B1B,EAAqBnvD,OAAQ,KA+BrE,mBAAC0f,GAAA,EAAD,CACEpc,OAAQA,EACR0F,QAASgmD,EACTrvC,OA3BJ,WACE,GAAKwvC,EAIL,OACE,0BAAKxtD,UAAU,yBAAyBO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAChE,mBAACK,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,cAAc1B,KAAK,UAAU2B,UAAU,qBAAqB9B,QAASotD,GACvF,wBAAGrtD,UAAU,gBAEf,0BAAKA,UAAU,eAAesf,GAC9B,mBAAC1d,EAAA,EAAD,CACEE,MAAM,UACN1B,KAAK,UACLJ,UAAU,sBACVC,QAASyuD,GAER/uD,EAAK,UAUFwvD,GACRnvD,UAAY,oBAAkBytD,EAAY,UAAY,KAEtD,0BACEztD,UAAU,cACVovD,YAAa1B,EACb2B,OAAQV,EACRW,WA3DN,SAAwBvrD,GACtBA,EAAE6G,iBACF7G,EAAEC,kBAEEspD,EAAe9kD,SACjB9E,OAAOkC,aAAa0nD,EAAe9kD,UAuDjC+mD,YAjGmBxrD,IACvB,MAAQyrD,cAAeC,EAAUhlD,OAAQilD,GAAe3rD,EAGnD2rD,EAA8Bz4C,QAAQ,kBAAoBw4C,IAC7DnC,EAAe9kD,QAAU9E,OAAOiC,WAAWgoD,EAjEnB,MAqEtB+B,GAAeA,EAA2BxyD,QAAQ,8BAIlDuyD,GACF1rD,EAAEC,kBAGJ2pD,MAiFI,0BAAyBhuD,EAAK,4BAA6B,KAE1DiuD,EACC,0BAAK5tD,UAAU,+BACZwtD,EAAqBnvC,KAAKsxC,GACzBA,EAAWV,SAAS/6C,WAAW,UAC3B,0BAAK9X,IAAKuzD,EAAWhgD,QAASG,IAAI,KAClC,4BAAO1T,IAAKuzD,EAAWhgD,QAASxE,UAAQ,EAACG,OAAK,EAACD,MAAI,OAI3D,0BAAKrL,UAAU,kCACZwtD,EAAqBnvC,KAAKsxC,GACzB,mBAACC,GAAA,EAAD,CACEl0C,KAAMi0C,EAAWE,SACjBC,WAAWC,EAAAA,GAAAA,IAAiBJ,EAAWE,SAAUF,EAAWV,UAC5De,YAAaL,EAAWhnB,eACxBvoC,KAAMuvD,EAAWvvD,KACjB6yB,SAAO,OAMf,0BAAKjzB,UAAU,8BACb,mBAAC,GAAD,CACE2B,OAAQosD,EACR1mD,QAAS2mD,EACT9B,iBAAkB+B,EAClB9B,cAAe+B,EACf7hC,UAAWA,IAEb,mBAAC,KAAD,CACE1qB,OAAQ0sD,EACR4B,OAAQ1B,EACRlnD,QAASinD,EACT4B,cAAe1B,EACftB,eAAgBA,IAElB,mBAACiD,GAAA,EAAD,CACEhzD,GAAG,qBACHizD,wBAAsB,EACtBC,KAAMzD,EACN0D,gBAAiBlC,EAAAA,GACjBtwC,YAAane,EAAK,WAClB4wD,SAAUpD,EACVtL,OAAQA,EACR2O,eAAgBtoD,QAAQykD,EAAYtuD,gB,eC7NhD,MAqUA,IAAeyI,EAAAA,EAAAA,KA/TiB,EAAGnF,OAAAA,EAAQkgD,OAAAA,EAAQwL,QAAAA,MAEjD,MAAMoD,GAAmBlpD,EAAAA,EAAAA,IAAyB,MAE5CmpD,GAAiBnpD,EAAAA,EAAAA,IAAuB,MAExCopD,GAAcppD,EAAAA,EAAAA,IAAuB,OAEpCqpD,EAAUC,IAAe5tD,EAAAA,EAAAA,IAAiB,KAC1CkmB,EAAS2nC,IAAc7tD,EAAAA,EAAAA,IAAmB,CAAC,MAC3C8tD,EAAaC,IAAkB/tD,EAAAA,EAAAA,KAAS,IACxCguD,EAAmBC,IAAwBjuD,EAAAA,EAAAA,KAAS,IACpDkuD,EAAYC,IAAiBnuD,EAAAA,EAAAA,KAAS,IACtCouD,EAAUC,IAAeruD,EAAAA,EAAAA,OACzBsuD,EAAeC,IAAoBvuD,EAAAA,EAAAA,OACnCwuD,EAAWC,IAAgBzuD,EAAAA,EAAAA,KAAkB,GAE9CtD,GAAOC,EAAAA,EAAAA,KAEP+xD,GAAajyD,EAAAA,EAAAA,KAAawL,IAC1BvJ,GAAUuJ,EAAI1C,SAChB0C,EAAI1C,QAAQmU,UAEb,CAAChb,KAEJuB,EAAAA,EAAAA,KAAU,IAAOvB,GAASsY,EAAAA,EAAAA,GAAsBozC,QAAW9rD,GAAY,CAACI,EAAQ0rD,KAChFnqD,EAAAA,EAAAA,KAAU,KACHvB,IACHkvD,EAAY,IACZC,EAAW,CAAC,KACZE,GAAe,GACfE,GAAqB,GACrBE,GAAc,GACdE,EAAY,IACZE,EAAiB,IACjBE,GAAa,MAEd,CAAC/vD,KAEJuB,EAAAA,EAAAA,KAAU,IAAMyuD,EAAWlB,IAAmB,CAACkB,EAAYhwD,KAE3DwG,EAAAA,EAAAA,KAAgB,KACd,MAAMypD,EAAajB,EAAYnoD,QAE3BopD,GAAcP,IAAaO,EAAWC,YACxCD,EAAWC,UAAYR,KAExB,CAACA,IAEJ,MAAMS,GAAepyD,EAAAA,EAAAA,KAAY,CAACqyD,EAAuB,MACvDjB,EAAW,IAAIiB,EAAY,KAC3B55C,uBAAsB,KACpB,MAAM65C,EAAOtB,EAAeloD,QACvBwpD,IAILA,EAAKh2D,UAAUoZ,OAAO,YAAa48C,EAAKC,aA/DtB,KAgElBD,EAAKE,SAAS,CAAE/6C,IAAK66C,EAAKC,aAAcE,SAAU,iBAEnD,IAEGC,GAAe1yD,EAAAA,EAAAA,KAAY,KAE/B,GADAgyD,GAAa,IACR/vD,EACH,OAGF,MAAM0wD,EAAkBzB,EAAS94B,OAAOsP,UAAU,EAvE1B,KAwElBkrB,EAAiBnpC,EAAQ9K,KAAKk0C,GAAMA,EAAEz6B,OAAOsP,UAAU,EAzEvC,OAyE8D3qB,QAAQ81C,GAAMA,EAAEl0D,SAEpG,IAAKg0D,GAAmBC,EAAej0D,OAAS,EAY9C,OAXAwyD,EAAYwB,GACRC,EAAej0D,OACbi0D,EAAej0D,OAAS,EAC1ByzD,EAAaQ,GAEbxB,EAAWwB,GAGbR,SAEFJ,GAAa,GAIf,GAAIP,KAAgBI,IAAkBe,EAAe9nD,OAAO+mD,KAE1D,YADAG,GAAa,GAIf,MAOMv8B,EAAsB,CAC1Bq9B,QAAS,CACP5B,SAAUyB,EACVI,QAVYH,EACbj0C,KAAI,CAACzb,EAAM0X,KAAP,CACH1X,KAAMA,EAAKk1B,OACX4K,OAAQhhB,OAAOpH,MACXoH,OAAOpH,KAAWi3C,GAAiB,CAAEmB,SAAS,WAO7C3B,GAAe,CAAE4B,UAAU,MAC5B1B,GAAqB,CAAE2B,gBAAgB,MACvCzB,GAAc,CAAE0B,MAAM,KAI9B,GAAI1B,EAAY,CACd,MAAM,KAAEvuD,EAAF,SAAQkwD,GAAczB,IAAY0B,EAAAA,GAAAA,GAAkB1B,EAASjqB,UAAU,EA/GvD,OA+GoF,GAE1GjS,EAAQ09B,KAAO,CACbG,eAAgB,CAACzB,MACb3uD,GAAQ,CAAEyuD,SAAUzuD,MACpBkwD,GAAY,CAAEG,iBAAkBH,IAIxCjR,EAAO1sB,KACN,CACDxzB,EACAivD,EACAznC,EACAgoC,EACAI,EACAR,EACAE,EACApP,EACAiQ,EACAT,IAGI6B,GAAexzD,EAAAA,EAAAA,KAAY,CAAC4a,EAAe1X,KAC/C,MAAMmvD,EAAa,IAAI5oC,GACvB4oC,EAAWz3C,GAAS1X,EAChBmvD,EAAWA,EAAW1zD,OAAS,GAAGy5B,OAAOz5B,QAAU0zD,EAAW1zD,OA5I5C,GA6IpByzD,EAAaC,GAEbjB,EAAWiB,KAEZ,CAAC5oC,EAAS2oC,IAEPqB,GAAezzD,EAAAA,EAAAA,KAAa4a,IAChC,MAAMy3C,EAAa,IAAI5oC,GACvB4oC,EAAWzxB,OAAOhmB,EAAO,GACzBw2C,EAAWiB,GACX55C,uBAAsB,KACfu4C,EAAeloD,SAIpBkoD,EAAeloD,QAAQxM,UAAUoZ,OAAO,YAAas7C,EAAeloD,QAAQypD,aA7J1D,UA+JnB,CAAC9oC,IAEEiqC,GAA4B1zD,EAAAA,EAAAA,KAAak5C,IAC7C4Y,EAAiB5Y,KAChB,CAAC4Y,IAEE6B,GAA0B3zD,EAAAA,EAAAA,KAAaqE,IAC3CitD,EAAejtD,EAAE0G,OAAOq2B,WACvB,IAEGwyB,GAA8B5zD,EAAAA,EAAAA,KAAaqE,IAC/CmtD,EAAqBntD,EAAE0G,OAAOq2B,WAC7B,IAEGyyB,GAAuB7zD,EAAAA,EAAAA,KAAaqE,IACxCqtD,EAAcrtD,EAAE0G,OAAOq2B,WACtB,IAEG0yB,GAAiB9zD,EAAAA,EAAAA,KAAaqE,IAChB,KAAdA,EAAE0vD,SACJrB,MAED,CAACA,IAEEsB,GAAmBh0D,EAAAA,EAAAA,KAAY,KACnC,GAAI+xD,IAAcb,EAAS94B,OAAOz5B,OAChC,OAAOsB,EAAK,+BAIb,CAAC8xD,EAAW9xD,EAAMixD,IAEf+C,GAAkBj0D,EAAAA,EAAAA,KAAa4a,IACnC,MAAMg4C,EAAiBnpC,EAAQ9K,KAAKk0C,GAAMA,EAAEz6B,SAAQrb,QAAQ81C,GAAMA,EAAEl0D,SACpE,GAAIozD,GAAaa,EAAej0D,OAAS,IAAM8qB,EAAQ7O,GAAOwd,OAAOz5B,OACnE,OAAOsB,EAAK,8BAGb,CAAC8xD,EAAW9xD,EAAMwpB,IAqBrB,SAASyqC,IACP,OAAOzqC,EAAQ9K,KAAI,CAACqkB,EAAQpoB,IAC1B,0BAAKta,UAAU,kBACb,mBAAC4d,GAAA,EAAD,CACEqL,MAAO3O,IAAU6O,EAAQ9qB,OAAS,GA7NlB,KA6NuB8qB,EAAQ9qB,OAC3CsB,EAAK,cACLA,EAAK,wBACTkf,MAAO80C,EAAgBr5C,GACvB9T,MAAOk8B,EACPn2B,SAAWxI,GAAMmvD,EAAa54C,EAAOvW,EAAEqG,cAAc5D,OACrDqtD,WAAYL,IAEbl5C,IAAU6O,EAAQ9qB,OAAS,GAC1B,mBAACuD,EAAA,EAAD,CACE5B,UAAU,uBACV6B,OAAK,EACLC,MAAM,cACN1B,KAAK,UACL2B,UAAWpC,EAAK,UAChBM,QAAS,IAAMkzD,EAAa74C,IAE5B,wBAAGta,UAAU,mBAoBvB,OACE,mBAAC+d,GAAA,EAAD,CAAOpc,OAAQA,EAAQ0F,QAASgmD,EAASrvC,OA3DvC,0BAAKhe,UAAU,0BACb,mBAAC4B,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,cAAc1B,KAAK,UAAU2B,UAAU,uBAAuB9B,QAASotD,GACzF,wBAAGrtD,UAAU,gBAEf,0BAAKA,UAAU,eAAeL,EAAK,YACnC,mBAACiC,EAAA,EAAD,CACEE,MAAM,UACN1B,KAAK,UACLJ,UAAU,sBACVC,QAASmyD,GAERzyD,EAAK,YAgDqDK,UAAU,aACzE,mBAAC4d,GAAA,EAAD,CACE1S,IAAKulD,EACLxnC,MAAOtpB,EAAK,gBACZ6G,MAAOoqD,EACP/xC,MAAO60C,IACPnnD,SAAWxI,GAAM8sD,EAAY9sD,EAAEqG,cAAc5D,OAC7CqtD,WAAYL,IAEd,0BAAKxzD,UAAU,oBAEf,0BAAKA,UAAU,6BAA6BkL,IAAKwlD,GAC/C,yBAAI1wD,UAAU,kBAAkBL,EAAK,gBAEpC8xD,GAvBP,WACE,MAAMa,EAAiBnpC,EAAQ9K,KAAKk0C,GAAMA,EAAEz6B,SAAQrb,QAAQ81C,GAAMA,EAAEl0D,SAEpE,OAAO8yD,KAAgBI,IAAkBe,EAAe9nD,OAAO+mD,MAC7D,wBAAGvxD,UAAU,SAASL,EAAK,6BAmBXm0D,GACb3C,EACC,mBAACjoC,GAAA,EAAD,CACExN,KAAK,gBACLyN,QA/BDyqC,IACJv1C,KAAI,CAAC4K,EAAO3O,KAAR,CAAqB9T,MAAOkb,OAAOpH,GAAQ2O,MAAAA,EAAO8qC,OAAQz5C,IAAU6O,EAAQ9qB,OAAS,MA+BpFkO,SAAU6mD,IAGZQ,KAKJ,0BAAK5zD,UAAU,oBAEf,0BAAKA,UAAU,aACb,mBAAC6gC,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,iBACZmhC,QAASiwB,EACTxkD,SAAU8mD,IAEZ,mBAACxyB,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,gBACZmhC,QAASmwB,EACT3kD,SAAU6kD,EACV5kD,SAAU+mD,IAEZ,mBAACzyB,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,YACZmhC,QAASqwB,EACT7kD,SAAU2kD,EACV1kD,SAAUgnD,IAEXpC,GACC,sCACE,yBAAInxD,UAAU,kBAAkBL,EAAK,6BACrC,0BACEuL,IAAKylD,EACL3wD,UAAU,eACVupD,iBAAe,EACfhpD,IAAI,OACJgM,SAAWxI,GAAMutD,EAAYvtD,EAAEqG,cAAcynD,aAE/C,0BAAK7xD,UAAU,QAAQL,EAAK,qC,qCC1UxC,MAmBA,IAAemH,EAAAA,EAAAA,KAnBmB,EAAGktD,MAAAA,EAAOr3C,MAAAA,EAAO1c,QAAAA,MACjD,MAAM2rB,GAAclsB,EAAAA,EAAAA,KAAaqE,IAE/BA,EAAE6G,iBAEF3K,EAAQ+zD,EAAMC,OAAQD,EAAM72D,MAC3B,CAAC62D,EAAO/zD,IAEX,OACE,0BACED,UAAY,gBAAc2c,EAAQ,QAAU,IAC5CnQ,YAAaof,EACbtM,MAAQ,IAAG00C,EAAME,MAAM,OAEtBC,EAAAA,GAAqBH,EAAMC,OAAS,0BAAK73D,IAAM,kBAAiB43D,EAAMzlD,YAAauB,IAAI,GAAGskD,QAAQ,aCuDzG,IAAettD,EAAAA,EAAAA,KAxDqB,EAClCutD,SAAAA,EAAU/5C,MAAAA,EAAOg6C,UAAAA,EAAWzxB,oBAAAA,EAAqBx5B,aAAAA,EAAc6mD,cAAAA,MAG/D,MAAMhlD,GAAM3D,EAAAA,EAAAA,IAAuB,OAEnCgtD,EAAAA,GAAAA,IAAerpD,EAAK23B,GAEpB,MAAM,qBAAEt5B,IAAyBE,EAAAA,EAAAA,GAAkBJ,OAAc9H,OAAWA,EAAW,QAEjF5B,GAAOC,EAAAA,EAAAA,KAEP40D,EAAexyD,EAAAA,GACjBM,KAAKkC,OAAO+R,EAAAA,EAAAA,MAAiBzL,MAzBF,GAyBhB,IA3BiB,EA6B1BzH,EAAS,GAAAf,KAAKmyD,KAAKJ,EAASpE,OAAO5xD,OAASm2D,GAElD,OACE,0BACEtpD,IAAKA,EACL/K,IAAKk0D,EAASl3D,GACdA,GAAK,kBAAiBmd,IACtBta,UAAU,cAEV,wBAAGA,UAAU,kBAAkBO,IAAI,QAChCZ,EAAqB,WAAhB00D,EAASl3D,GAAkB,iBAAoB,QAAOmd,MAE9D,0BACEta,WAAW8D,EAAAA,EAAAA,GAAe,uBAAwByF,GAElD1L,MAAQ,WAAUwF,OAClB9C,IAAKZ,EAAK4b,MAAQ,WAAQha,GAEzB8H,GAAgBgrD,EAASpE,OAAO5xC,KAAK3C,IACpC,MAAMs4C,EAAQM,EAAU54C,GAExB,IAAKs4C,EACH,OAIF,MAAMU,EAAiB,OAAQV,EAAQA,EAAQA,EAAM,GAErD,OACE,mBAAC,GAAD,CACE7zD,IAAKu0D,EAAev3D,GACpB62D,MAAOU,EACPz0D,QAASiwD,YCjCjByE,GAA4C,CAChDC,OAAQ,cACRC,OAAQ,aACRC,OAAQ,eACRC,MAAO,YACPC,SAAU,aACVC,OAAQ,WACRC,QAAS,YACTC,QAAS,gBACTC,MAAO,aAUHC,GAAmC,GAEzC,IAAIC,GACAC,GACAC,GAuKJ,UAAe1uD,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IAAuBY,EAAAA,EAAAA,IAAKZ,EAAQ,CAAC,kBADpBD,EArK2B,EAC7CuB,UAAAA,EAAWkwD,cAAAA,EAAenD,aAAAA,MAG1B,MAAMtvC,GAAelW,EAAAA,EAAAA,IAAuB,MAEtCkuD,GAAYluD,EAAAA,EAAAA,IAAuB,OAElCmuD,EAAYC,IAAiB1yD,EAAAA,EAAAA,OAC7BgtD,EAAQ2F,IAAa3yD,EAAAA,EAAAA,OACrB4yD,EAAqBC,IAA0B7yD,EAAAA,EAAAA,IAAS,IAEvD+hC,QAASnC,IAAwBqC,EAAAA,GAAAA,IAAwB,CAC/DC,QAAS1nB,EACT+oC,WAtB0B,MAuBxBuP,IACFA,EAAQ/zB,SAASg0B,IACf,MAAM,GAAE74D,GAAO64D,EAAMvrD,OACrB,IAAKtN,IAAOA,EAAG+W,WAAW,mBACxB,OAGF,MAAMoG,EAAQ9P,OAAOrN,EAAGmnB,QAAQ,kBAAmB,KACnD+wC,GAAsB/6C,GAAS07C,EAAMlzB,kBAGvC,MAAMmzB,EAA0BZ,GAC7Bh3C,KAAI,CAACykB,EAAgBxoB,KAAjB,CAA8BA,MAAAA,EAAOwoB,eAAAA,MACzCrmB,QAAO,EAAGqmB,eAAAA,KAAqBA,IAE7BmzB,EAAwB53D,QAI7By3D,EAAuBG,EAAwB3zD,KAAKkC,MAAMyxD,EAAwB53D,OAAS,IAAIic,WAGjG0S,EAAAA,GAAAA,GAAoByoC,EAAUjtD,SAAUxG,EAAAA,KAGxCkB,EAAAA,EAAAA,KAAU,KACR,IAAKwyD,EACH,OAGF,MAAM13C,EAASy3C,EAAUjtD,QACzB,IAAKwV,EACH,OAGF,MAAMk4C,EA3DkB,GA2DRL,EAA4C73C,EAAO0tB,YAAc,EAAIyqB,IAErFC,EAAAA,GAAAA,GAA2Bp4C,EAAQk4C,KAClC,CAACR,EAAYG,IAEhB,MAAMl2D,GAAOC,EAAAA,EAAAA,KAEPy2D,GAAgB50D,EAAAA,EAAAA,KAAQ,KAC5B,IAAKi0D,EACH,OAAO1lC,GAAAA,EAET,MAAMsmC,EAAkB,IAAIZ,GAS5B,OARI3I,GAAgBA,EAAa1uD,QAC/Bi4D,EAAgBC,QAAQ,CACtBp5D,GAAI,SACJue,KAAM/b,EAAK,kBACXswD,OAAQlD,IAILuJ,IACN,CAACZ,EAAY/1D,EAAMotD,KAGtB7pD,EAAAA,EAAAA,KAAU,KACRyC,YAAW,KACT,MAAM6wD,EAAO,KACXb,EAAcH,GAAUE,YAExBE,EAAUJ,GAAUvF,SAGlBuF,GACFgB,IAuERvrB,iBAQE,OAPKqqB,KACHA,GAAmB,mCACnBC,UAAsBD,IAAkBmB,QAExCjB,IAAYkB,EAAAA,GAAAA,GAAgBnB,KAGvBD,GA7EDqB,GACG96B,KAAK26B,KAnGa,OAsGxB,IAEH,MAAMI,GAAiBl3D,EAAAA,EAAAA,KAAa4a,IAClCw7C,EAAuBx7C,GACvB,MAAMu8C,EAAa/6D,SAAS2c,eAAgB,kBAAiB6B,MAC7D0wC,EAAAA,GAAAA,GAAiBvtC,EAAajV,QAAUquD,EAAY,QAxGnC,GADU,OA0G1B,IAEGC,GAAoBp3D,EAAAA,EAAAA,KAAY,CAACs0D,EAAet4C,KACpDw0C,EAAc8D,EAAOt4C,KACpB,CAACw0C,IAEEr+B,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIilC,EAAAA,IAmB1CC,GAAqBlzD,EAAAA,EAAAA,GAAe,cAAe9D,GAEzD,OAAKiwD,GAAWp+B,EASd,0BAAK7xB,UAAWg3D,GACd,0BAAK9rD,IAAKuqD,EAAWz1D,UAAU,qBAAqBO,IAAKZ,EAAK4b,MAAQ,MAAQ,IAC3E86C,EAAch4C,KA9BrB,SAA8Bg2C,EAA6B/5C,GACzD,MAAMjY,EAAOsyD,GAAkBN,EAASl3D,IAExC,OAAOkF,GACL,mBAACT,EAAA,EAAD,CACE5B,UAAY,sBAAoBsa,IAAUu7C,EAAsB,YAAc,IAC9Eh0D,OAAK,EACLo1D,OAAK,EACLn1D,MAAM,cACN7B,QAAS,IAAM22D,EAAet8C,GAC9BvY,UAAWsyD,EAAS34C,MAEpB,wBAAG1b,UAAWqC,SAoBhB,0BACE6I,IAAKuS,EACLzd,WAAW8D,EAAAA,EAAAA,GAAe,gCAAiC2D,EAAAA,GAAe,eAAiB,kBAE1F4uD,EAAch4C,KAAI,CAACg2C,EAAUpwC,IAC5B,mBAAC,GAAD,CACEowC,SAAUA,EACV/5C,MAAO2J,EACPqwC,UAAWrE,EACXptB,oBAAqBA,EACrBx5B,aAAcwsD,GAAuB5xC,EAAI,GAAK4xC,GAAuB5xC,EAAI,EACzEisC,cAAe4G,QAtBrB,0BAAK92D,UAAWg3D,GACd,mBAACr4C,GAAA,EAAD,WCrKFu4C,GAAiBl1D,EAAAA,GAA0B,EAAI,GAsDrD,IAAe8E,EAAAA,EAAAA,KAnDkB,EAC/B87B,WAAAA,EACAu0B,YAAAA,EACA78C,MAAAA,EACAuoB,oBAAAA,EACAx5B,aAAAA,EACA+tD,gBAAAA,EACAC,gBAAAA,MAGA,MAAMnsD,GAAM3D,EAAAA,EAAAA,IAAuB,OAEnCgtD,EAAAA,GAAAA,IAAerpD,EAAK23B,GAEpB,MAAM,qBAAEt5B,IAAyBE,EAAAA,EAAAA,GAAkBJ,OAAc9H,OAAWA,EAAW,QAEjF+1D,EAAiBt1D,EAAAA,GACnBM,KAAKkC,OAAO+R,EAAAA,EAAAA,MAAiBzL,MAnBF,IAmBuCysD,EAAAA,EAAsBL,KArB1D,EAuB5B7zD,EAASf,KAAKmyD,KAAK7xB,EAAW/F,MAAQy6B,IAAmBC,EAAAA,EAAsBL,IAErF,OACE,0BACEhsD,IAAKA,EACL/K,IAAKyiC,EAAWzlC,GAChBA,GAAK,eAAcmd,IACnBta,UAAU,cAEV,wBAAGA,UAAU,mBAAmB4iC,EAAWtjB,OAC3C,0BACEtf,WAAW8D,EAAAA,EAAAA,GAAe,uBAAwByF,GAElD1L,MAAQ,WAAUwF,QAEjBgG,GAAgBu5B,EAAWU,UAAYV,EAAWU,SAASjlB,KAAKslB,GAC/D,mBAACD,GAAA,EAAD,CACEvjC,IAAKwjC,EAAQxmC,GACbwmC,QAASA,EACTvjC,KAAMm3D,EAAAA,EACN10B,oBAAqBA,EACrB20B,WAAYL,EACZl3D,QAASm3D,EACTlmC,SAAUyS,EACV8zB,cAAiC,aAAlB70B,EAAWzlC,GAAoBk6D,OAAkB91D,WChBtEm2D,GAAqC,GAmO3C,IAAe5wD,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAM,SACJulC,EADI,MAEJH,EAFI,OAGJ8wB,EAHI,SAIJ+C,GACEj5D,EAAO4kC,SAEX,MAAO,CACLs0B,eAAgBhD,EAAOtxB,SACvBu0B,iBAAkBF,EAASr0B,SAC3BU,gBAAiBC,EACjB6zB,YAAah0B,EAAMC,OACnBg0B,WAAYr5D,EAAO4R,SAASC,MAAMo0B,uBAGtC,CAACvlC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBACA,qBACA,uBACA,oBACA,mBACA,mBAvBgBZ,EAjO6C,EAC/DuB,UAAAA,EACAm3D,YAAAA,EACAa,gBAAAA,EACAJ,eAAAA,EACAC,iBAAAA,EACAC,YAAAA,EACA9zB,gBAAAA,EACA+zB,WAAAA,EACAX,gBAAAA,EACAvyB,gBAAAA,EACAozB,mBAAAA,EACAC,qBAAAA,EACApzB,kBAAAA,EACAqzB,iBAAAA,EACArU,cAAAA,MAGA,MAAMrmC,GAAelW,EAAAA,EAAAA,IAAuB,MAEtCkuD,GAAYluD,EAAAA,EAAAA,IAAuB,OAClC6wD,EAAgBC,IAAqBp1D,EAAAA,EAAAA,IAAiB,IAErD+hC,QAASnC,IAAwBqC,EAAAA,GAAAA,IAAwB,CAC/DC,QAAS1nB,EACT+oC,WA7BkC,MA8BhCuP,IACFA,EAAQ/zB,SAASg0B,IACf,MAAM,GAAE74D,GAAO64D,EAAMvrD,OACrB,IAAKtN,IAAOA,EAAG+W,WAAW,gBACxB,OAGF,MAAMoG,EAAQ9P,OAAOrN,EAAGmnB,QAAQ,eAAgB,KAChDozC,GAAwBp9C,GAAS07C,EAAMlzB,kBAGzC,MAAMmzB,EAA0ByB,GAC7Br5C,KAAI,CAACykB,EAAgBxoB,KAAjB,CAA8BA,MAAAA,EAAOwoB,eAAAA,MACzCrmB,QAAO,EAAGqmB,eAAAA,KAAqBA,IAE7BmzB,EAAwB53D,QAI7Bg6D,EAAkBpC,EAAwB3zD,KAAKkC,MAAMyxD,EAAwB53D,OAAS,IAAIic,WAEpF0qB,QAASC,IAAiCC,EAAAA,GAAAA,IAAwB,CAAEC,QAASswB,IAE/E91D,GAAOC,EAAAA,EAAAA,KAEP04D,EAAiBpwD,QAAQ4vD,GAEzBS,GAAU92D,EAAAA,EAAAA,KAAQ,IACjBq2D,EAIE,CACL,CACE36D,GAAI,SACJmiB,MAAO3f,EAAK,kBACZ2jC,SAAUs0B,EACV/6B,MAAO+6B,EAAev5D,QAExB,CACElB,GAAI,WACJmiB,MAAO3f,EAAK,oBACZ2jC,SAAUu0B,EACVh7B,MAAOg7B,EAAiBx5D,WAEvBy5D,EAAYz5C,KAAKlhB,GAAO6mC,EAAgB7mC,KAAKsf,OAAOvU,UAhBhD8nB,GAAAA,GAkBR,CAAC8nC,EAAan4D,EAAMi4D,EAAgBC,EAAkB7zB,IAEnDw0B,GAAkB/2D,EAAAA,EAAAA,KAAQ,IAC9B62D,GAC2E,IAAxEC,EAAQ97C,QAAQg8C,GAAQA,EAAIn1B,UAAYm1B,EAAIn1B,SAASjlC,SAAQA,QAC/D,CAACk6D,EAASD,KAEbp1D,EAAAA,EAAAA,KAAU,KACJi0D,IACFtyB,IACAozB,IACAC,OAED,CAACf,EAAae,EAAsBD,EAAoBpzB,KAE3D3hC,EAAAA,EAAAA,KAAU,KACJ40D,GAAeA,EAAYz5D,QAC7BymC,MAED,CAACgzB,EAAahzB,KAEjB9X,EAAAA,GAAAA,GAAoByoC,EAAUjtD,UAG9BtF,EAAAA,EAAAA,KAAU,KACR,IAAKo1D,EACH,OAGF,MAAMt6C,EAASy3C,EAAUjtD,QACzB,IAAKwV,EACH,OAGF,MAAMk4C,EAhHkB,GAgHRkC,GAAwCp6C,EAAO0tB,YAAc,EAAIyqB,KAEjFC,EAAAA,GAAAA,GAA2Bp4C,EAAQk4C,KAClC,CAACoC,EAAgBF,IAEpB,MAAMlS,GAAmBxmD,EAAAA,EAAAA,KAAa4a,IACpC+9C,EAAkB/9C,GAClB,MAAMo+C,EAAe58D,SAAS2c,eAAgB,eAAc6B,MAC5D0wC,EAAAA,GAAAA,GAAiBvtC,EAAajV,QAAUkwD,EAAc,aAASn3D,EAzHpC,OA0H1B,IAEGo3D,GAAsBj5D,EAAAA,EAAAA,KAAaikC,IACvCyzB,EAAgBzzB,GAChBw0B,EAAiB,CAAEx0B,QAAAA,MAClB,CAACw0B,EAAkBf,IAEhBwB,GAAsBl5D,EAAAA,EAAAA,KAAaikC,IACvCmgB,EAAc,CAAEngB,QAAAA,MACf,CAACmgB,IAEEjyB,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,GAqD1C8mC,GAAgB/0D,EAAAA,EAAAA,GAAe,gBAAiB9D,GAEtD,OAAKs4D,GAAmBzmC,IAAqB2mC,GAAoBR,EAe/D,0BAAKh4D,UAAW64D,GACd,0BACE3tD,IAAKuqD,EACLz1D,UAAU,kDAETu4D,EAAQl6C,KAzEf,SAAqBukB,EAAgCtoB,GACnD,MAAMipB,EAAeX,EAAWU,UAAYV,EAAWU,SAAS,GAC1Dw1B,GAAkBh1D,EAAAA,EAAAA,GACtB,uCACAwW,IAAU89C,GAAkB,aAG9B,MAAsB,WAAlBx1B,EAAWzlC,IAAqC,aAAlBylC,EAAWzlC,IAAqBylC,EAAWS,eAAiBE,EAE1F,mBAAC3hC,EAAA,EAAD,CACEzB,IAAKyiC,EAAWzlC,GAChB6C,UAAW84D,EACX/2D,UAAW6gC,EAAWtjB,MACtBzd,OAAK,EACLo1D,MAAyB,WAAlBr0B,EAAWzlC,IAAqC,aAAlBylC,EAAWzlC,GAChD2E,MAAM,cACN7B,QAAS,IAAMimD,EAAiB5rC,IAEb,WAAlBsoB,EAAWzlC,GACV,wBAAG6C,UAAU,gBACO,aAAlB4iC,EAAWzlC,GACb,wBAAG6C,UAAU,kBACX4iC,EAAWY,WACb,mBAAC,GAAD,CACEZ,WAAYA,EACZC,oBAAqBoC,IAGvB,mBAAC,GAAD,CACErC,WAAYA,EACZC,oBAAqBoC,KAO3B,mBAACvB,GAAA,EAAD,CACEvjC,IAAKyiC,EAAWzlC,GAChBwmC,QAASJ,EACTnjC,KAAMuiC,EAAAA,GACNrjB,MAAOsjB,EAAWtjB,MAClBtf,UAAW84D,EACXj2B,oBAAqBoC,EACrBhlC,QAASimD,EACTh1B,SAAU5W,QA8Bd,0BACEpP,IAAKuS,EACLzd,WAAW8D,EAAAA,EAAAA,GAAe,kCAAmC2D,EAAAA,GAAe,eAAiB,kBAE5F8wD,EAAQl6C,KAAI,CAACukB,EAAY3e,IACxB,mBAAC,GAAD,CACE9jB,IAAKyiC,EAAWzlC,GAChBylC,WAAYA,EACZu0B,YAAajvD,QAAQ6vD,GAAcZ,GACnC78C,MAAO2J,EACP4e,oBAAqBA,EACrBx5B,aAAc+uD,GAAkBn0C,EAAI,GAAKm0C,GAAkBn0C,EAAI,EAC/DmzC,gBAAiBuB,EACjBtB,gBAAiBuB,QAjCvB,0BAAK54D,UAAW64D,GACZb,EAEEQ,EACF,0BAAKx4D,UAAU,mBAAf,+BAEA,mBAAC2e,GAAA,EAAD,MAJA,0BAAK3e,UAAU,mBAAf,sD,iNCxNV,MA8EA,IAAe8G,EAAAA,EAAAA,KA9EiB,EAC9BiyD,IAAAA,EAAKl2B,oBAAAA,EAAqB4jB,WAAAA,EAAYzmD,UAAAA,EAAWC,QAAAA,MAGjD,MAAMiL,GAAM3D,EAAAA,EAAAA,IAAuB,MAE7BD,GAAWC,EAAAA,EAAAA,IAAyB,MAEpC87B,EAAe01B,EAAIjwB,aAAeiwB,EAAIjwB,UAAUC,QAChDL,EAAkB,MAAKqwB,EAAI57D,KAE3Bg6D,GADiBp0B,EAAAA,GAAAA,IAAkB73B,EAAK23B,KACP4jB,EACjC9d,GAAiB70B,EAAAA,EAAAA,GAAU,GAAE40B,YAA0ByuB,EAAapjD,EAAAA,GAAAA,SACpE60B,GAAWC,EAAAA,GAAAA,GAAckwB,EAAIjwB,WAAaiwB,EAAIjwB,UAAUC,QAAS7gC,QAAQygC,IACzEqwB,GAAYllD,EAAAA,EAAAA,GAAS40B,GAAiByuB,EAAapjD,EAAAA,GAAAA,SACnDklD,EAAoB/wD,QAAQivD,GAAe6B,IAC3C,qBAAEzvD,IAAyB45B,EAAAA,GAAAA,GAAsBE,GAAgBsF,GAAkBqwB,EAAW,SAC9F,WAAE9vD,EAAF,kBAAcC,IAAsBC,EAAAA,EAAAA,IAAa,GACjDE,EAAsB6tD,IAAgBjuD,GAE5Cc,EAAAA,EAAAA,GAAgB1C,EAAU,CAAC2xD,IAE3B,MAAMrtC,GAAclsB,EAAAA,EAAAA,KAClB,IAAMO,EAAQ,IACT84D,EACHppD,QAASqpD,KAEX,CAAC/4D,EAAS84D,EAAKC,IAGXH,GAAgB/0D,EAAAA,EAAAA,GACpB,YACAi1D,EAAIjuD,OAASiuD,EAAI11D,QAAU01D,EAAIjuD,MAAQiuD,EAAI11D,OAAS,WAAa,aACjEkG,EACAm/B,EACA1oC,GAGF,OACE,0BACEkL,IAAKA,EACLlL,UAAW64D,EACX54D,QAAS2rB,GAERyX,GACC,6BACEn4B,IAAK09B,EACL5oC,UAAU,eAGZqjC,GAAgBsF,GAChB,0BACEvsC,IAAKusC,EACL74B,IAAI,GACJ9P,UAAU,eAGZi5D,GAAqBtwB,IACrB,+BACEz9B,IAAK5D,EACL6D,UAAQ,EACRE,MAAI,EACJC,OAAK,EACLF,aAAW,EACX8tD,QAAQ,QAEJ/vD,GAEJ,6BAAQ/M,IAAK48D,KAGhB1vD,GACC,mBAAC0G,EAAA,EAAD,CAASlO,MAAO6mC,GAAkBtF,EAAe,QAAU,cCdnE,IAAev8B,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACQ,CACLy6D,UAAWz6D,EAAO06D,KAAKC,MAAMD,SAGjC,CAACh6D,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBANpCZ,EAjDyC,EAC3DuB,UAAAA,EACAm3D,YAAAA,EACAmC,YAAAA,EACAH,UAAAA,EACAI,YAAAA,EACAC,cAAAA,MAGA,MAAM/7C,GAAelW,EAAAA,EAAAA,IAAuB,OAG1Cy9B,QAASnC,IACPqC,EAAAA,GAAAA,IAAwB,CAAEC,QAAS1nB,EAAcg8C,WAfzB,OAiB5Bv2D,EAAAA,EAAAA,KAAU,KACJi0D,GACFqC,MAED,CAACrC,EAAaqC,IAEjB,MAAM3nC,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,GAEhD,OACE,0BACE7mB,IAAKuS,EACLzd,WAAW8D,EAAAA,EAAAA,GAAe,YAAa9D,EAAWyH,EAAAA,GAAe,eAAiB,kBAEhF6xD,EAEEznC,GAAqBsnC,GAAaA,EAAU96D,OAC9C86D,EAAU96C,KAAK06C,GACb,mBAAC,GAAD,CACE54D,IAAK44D,EAAI57D,GACT47D,IAAKA,EACLl2B,oBAAqBA,EACrB4jB,YAAa0Q,EACbl3D,QAASs5D,MAGX1nC,GAAqBsnC,EACvB,0BAAKn5D,UAAU,mBAAf,kBAEA,mBAAC2e,GAAA,EAAD,MAdA,0BAAK3e,UAAU,mBAAf,kDCnDD,IAAK05D,I,SAAAA,GAAAA,EAAAA,EAAAA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,KAAAA,GAAAA,O,CAAAA,KAAAA,GAAAA,KAQL,MAAMC,GAAyBh8D,OAAO4+C,OAAOmd,IACjDj9C,QAAQjW,GAA4C,iBAAVA,IAEvCozD,GAAwB,CAC5B,CAACF,GAAeG,OAAQ,aACxB,CAACH,GAAeI,UAAW,gBAC3B,CAACJ,GAAeK,MAAO,aAkEzB,IAAejzD,EAAAA,EAAAA,KA/DwB,EACrCktB,UAAAA,EAAWS,YAAAA,EAAaulC,eAAAA,EAAgBC,aAAAA,MAExC,MAAMt6D,GAAOC,EAAAA,EAAAA,KAEb,SAASs6D,EAAgB9lC,GACvB,OACE,mBAACxyB,EAAA,EAAD,CACE5B,UAAY,sBAAoBg0B,IAAcI,EAAM,YAAc,IAClEn0B,QAAS,IAAMw0B,EAAYL,GAC3BryB,UAAW43D,GAAuBvlC,GAClCvyB,OAAK,EACLo1D,OAAK,EACLn1D,MAAM,eAEN,wBAAG9B,UAAW45D,GAAsBxlC,MAK1C,MAAM+lC,GAAmBz6D,EAAAA,EAAAA,KAAY,KACnCu6D,EAAajmC,IAAc0lC,GAAeI,SAAW,WAAa,UACjE,CAAC9lC,EAAWimC,IAMf,OACE,0BAAKj6D,UAAU,oBAAoBC,QALrC,SAAyBw/B,GACvBA,EAAMz7B,mBAIuDzD,IAAKZ,EAAK4b,MAAQ,WAAQha,GACpFyyB,IAAc0lC,GAAeG,OAC5B,mBAACj4D,EAAA,EAAD,CACE5B,UAAU,uBACV+B,UAAWiyB,IAAc0lC,GAAeI,SAAW,kBAAoB,cACvEj4D,OAAK,EACLo1D,OAAK,EACLn1D,MAAM,cACN7B,QAASk6D,GAET,wBAAGn6D,UAAU,iBAIhBk6D,EAAgBR,GAAeG,OAC/BK,EAAgBR,GAAeI,UAC/BI,EAAgBR,GAAeK,MAE/B/lC,IAAc0lC,GAAeG,OAC5B,mBAACj4D,EAAA,EAAD,CACE5B,UAAU,uBACVC,QAAS+5D,EACTj4D,UAAU,gBACVF,OAAK,EACLo1D,OAAK,EACLn1D,MAAM,eAEN,wBAAG9B,UAAU,0BCzCvB,IAAIo6D,IAAc,EAElB,MAqLA,IAAetzD,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACQ,CACL27D,kBAAmB37D,EAAO27D,qBAHZ57D,EArL0B,EAC5CkD,OAAAA,EAAQ24D,yBAAAA,EAA0BD,kBAAAA,EAClC79B,OAAAA,EAAQn1B,QAAAA,EACR6oD,cAAAA,EAAekH,gBAAAA,EAAiBmC,YAAAA,EAChCS,eAAAA,EAAgBC,aAAAA,EAAc/M,eAAAA,MAE9B,MAAOl5B,EAAWC,IAAgBhxB,EAAAA,EAAAA,IAAiB,IAC5C8pD,EAAcwN,IAAmBt3D,EAAAA,EAAAA,IAAmB,KAEpDu3D,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAe/4D,EAAQ0F,OAAS9F,EAAWS,EAAAA,KAClF,aAAEqH,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB9H,EAAQ0F,GAAS,GAAO,IAEpF+yD,IAAez4D,IAClBy4D,IAAc,IAGhBl3D,EAAAA,EAAAA,KAAU,KACRs5B,MACC,CAACA,KAEJr0B,EAAAA,EAAAA,KAAgB,KACd,GAAKnG,EAAAA,GASL,OALIL,IACF7F,SAAS+J,KAAK7J,UAAUC,IAAI,iCAC5BH,SAAS+J,KAAK7J,UAAUC,IAAI,wBAGvB,KACD0F,IACFg5D,EAAAA,EAAAA,KAAQ,KACN7+D,SAAS+J,KAAK7J,UAAU8J,OAAO,uBAC/BH,YAAW,KACT7J,SAAS+J,KAAK7J,UAAU8J,OAAO,mCAxDhB,WA6DtB,CAACnE,IAEJ,MAAMi5D,GAAkBrzD,EAAAA,EAAAA,IAAOwlD,GAC/B6N,EAAgBpyD,QAAUukD,GAC1B7pD,EAAAA,EAAAA,KAAU,KACH03D,EAAgBpyD,QAAQnK,SAI7Bu8D,EAAgBpyD,QAAQw5B,SAAStmB,IAC/BwxC,EAAe,CAAE8G,MAAOt4C,OAG1B6+C,EAAgB,OACf,CAAC54D,EAAQqyB,EAAWk5B,IAEvB,MAAM4J,GAAoBp3D,EAAAA,EAAAA,KAAY,CAACs0D,EAAet4C,KACpD6+C,GAAiBtK,GACR,IAAIA,EAAQv0C,KAGrBw0C,EAAc8D,KACb,CAAC9D,IAEE/H,GAAezoD,EAAAA,EAAAA,KAAa4G,IAChCe,IACA4yD,EAAa3zD,KACZ,CAACe,EAAS4yD,IAEPtB,GAAsBj5D,EAAAA,EAAAA,KAAaikC,IACvCyzB,EAAgBzzB,GAAS,KACxB,CAACyzB,IAEEz3D,GAAOC,EAAAA,EAAAA,MAEP,gBAAEo4D,EAAF,YAAmBsB,GAAgBgB,EAEzC,SAASO,EAAc3/C,EAAmB+gC,GACxC,OAAQjoB,GACN,KAAK0lC,GAAeG,MAClB,OACE,mBAAC,GAAD,CACE75D,UAAU,aACVkwD,cAAe4G,IAGrB,KAAK4C,GAAeI,SAClB,OACE,mBAAC,GAAD,CACE95D,UAAU,aACVm3D,cAAaa,GAAkBr2D,IAAWuZ,GAAY+gC,GACtD+b,gBAAiBA,EACjBZ,gBAAiBuB,IAGvB,KAAKe,GAAeK,KAClB,OACE,mBAAC,GAAD,CACE/5D,UAAU,aACVm3D,cAAamC,GAAc33D,IAAWuZ,GAAY+gC,GAClDqd,YAAaA,EACbC,YAAaA,KAYvB,MAAMllC,EACJ,sCACE,0BAAKr0B,UAAU,kBAAkBC,QANrC,SAAyBw/B,GACvBA,EAAMz7B,oBAMDo2D,IACC,mBAAC5+C,EAAA,EAAD,CAAYE,KAAK,QAAQD,UAAWuY,EAAWU,YAAailC,GAAuBt7D,QAChFw8D,IAIN74D,EAAAA,IACC,mBAACJ,EAAA,EAAD,CACEC,OAAK,EACLo1D,OAAK,EACLn1D,MAAM,cACNC,UAAWpC,EAAK,SAChBK,UAAU,sBACVI,KAAK,OACLH,QAASoH,GAET,wBAAGrH,UAAU,gBAGjB,mBAAC,GAAD,CACEg0B,UAAWA,EACXS,YAAaR,EACb+lC,eAAgBA,EAChBC,aAAc9R,KAKpB,GAAInmD,EAAAA,GAAyB,CAC3B,IAAKqH,EACH,OAGF,MAAMrJ,GAAY8D,EAAAA,EAAAA,GAChB,yBACAyF,GACC8wD,GAAqB,sBAGxB,OACE,mBAAChS,GAAA,EAAD,KACE,0BAAKroD,UAAWA,GACbq0B,IAMT,OACE,mBAACkvB,GAAA,EAAD,CACE5hD,OAAQA,EACRQ,UAAU,OACVkhD,UAAU,SACVh8C,QAASA,EACTrH,UAAU,aACV+hD,oBAAqB16C,EACrByzD,aAAerzD,EAAAA,QAAkClG,EAAnBi5D,EAC9BO,aAAetzD,EAAAA,QAAkClG,EAAnBk5D,EAC9BO,mBAAoBvzD,EAAAA,IAEnB4sB,OC1IP,IAAevtB,EAAAA,EAAAA,KA/DkB,EAC/BnF,OAAAA,EAAQ24D,yBAAAA,EAA0BW,aAAAA,EAAcC,aAAAA,EAAc7zD,QAAAA,MAE9D,MAAOmzD,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAe/4D,EAAQ0F,GAE9DijC,GAAmB5qC,EAAAA,EAAAA,KAAY,CAACqE,EAAU6pD,KAC9C,MAAM,MAAErjB,GAAUxmC,EAAE0G,OAEhB8/B,GAASA,EAAMlsC,OAAS,GAC1B48D,EAAa9R,MAAMC,KAAK7e,GAAQqjB,KAEjC,CAACqN,IAEEE,GAAoBz7D,EAAAA,EAAAA,KAAY,KACpCgnC,GACEyiB,MAAMC,KAAK2F,EAAAA,IAAgCrjD,KAAK,MAC/C3H,GAAMumC,EAAiBvmC,GAAG,OAE5B,CAACumC,IAEE8wB,GAAuB17D,EAAAA,EAAAA,KAAY,KACvCgnC,GAAsB,KAAM3iC,GAAMumC,EAAiBvmC,GAAG,OACrD,CAACumC,IAEE3qC,GAAOC,EAAAA,EAAAA,MAEP,eAAEy7D,EAAF,eAAkBC,GAAmBhB,EAE3C,OACE,mBAAC/W,GAAA,EAAD,CACE5hD,OAAQA,EACR45D,WAAS,EACTp5D,UAAU,QACVkhD,UAAU,SACVh8C,QAASA,EACTrH,UAAU,mBACV+hD,oBAAqB16C,EACrByzD,aAAerzD,EAAAA,QAAkClG,EAAnBi5D,EAC9BO,aAAetzD,EAAAA,QAAkClG,EAAnBk5D,EAC9BO,mBAAoBvzD,EAAAA,KAMlB4zD,GACA,mBAACj5D,EAAA,EAAD,CAAUpC,UAAU,iBAAiBsM,UAAQ,GAA7C,uDAED+uD,GACC,sCACE,mBAACj5D,EAAA,EAAD,CAAUC,KAAK,QAAQpC,QAASk7D,GAC7Bx7D,EAAK,gCAER,mBAACyC,EAAA,EAAD,CAAUC,KAAK,WAAWpC,QAASm7D,GAAuBz7D,EAAK,oBAGlE27D,GACC,mBAACl5D,EAAA,EAAD,CAAUC,KAAK,OAAOpC,QAASi7D,GAAev7D,EAAK,aCjC3D,IAAemH,EAAAA,EAAAA,KA1BkB,EAC/B00D,WAAAA,EACA7+C,MAAAA,EACA8+C,WAAAA,EACAC,IAAAA,EACAz7D,QAAAA,KAGE,mBAACqe,GAAA,EAAD,CACEne,IAAKs7D,EAAW1T,QAChB/nD,WAAW8D,EAAAA,EAAAA,GAAe,6CAA8C03D,GAAc,eACtF5+B,WAAS,EACT38B,QAAS,IAAMA,EAAQw7D,GACvB9+C,MAAOA,GAEN6+C,GACC,mBAACt7D,EAAA,EAAD,CAAQE,KAAK,QAAQE,KAAMo7D,IAE7B,0BAAK17D,UAAU,iBACb,2BAAMA,UAAU,SAAhB,IAA0By7D,EAAW1T,SACrC,2BAAM/nD,UAAU,aAAYQ,EAAAA,EAAAA,GAAWi7D,EAAW/yC,kBC4D1D,IAAe5hB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IAAD,CACE2tB,UAAW3tB,EAAO4tB,MAAM1Q,SAE1B,CAACxc,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,oBAJpCZ,EAnEiD,EACnE4tB,UAAAA,EACA1qB,OAAAA,EACA6pB,aAAAA,EACAmwC,YAAAA,EACA17D,QAAAA,EACAoH,QAAAA,EACAugD,eAAAA,MAGA,MAAMnqC,GAAelW,EAAAA,EAAAA,IAAuB,OACtC,aAAE8B,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB9H,OAAQJ,OAAWA,GAAW,GAEzFq6D,GAAoBl8D,EAAAA,EAAAA,KAAY,EAAGm8D,MAAAA,EAAO9T,QAAAA,MAC9C,MAAM2T,EAAMrvC,EAAUwvC,GACtBjU,EAAe,CACbG,QAAU,IAAGA,IAAUv8B,GAAgBkwC,EAAO,IAAGA,EAAItrC,WAAa,KAClEyrC,MAAAA,IAEF57D,MACC,CAACA,EAAS2nD,EAAgBv7B,EAAWb,IAElCswC,EAAuB7Q,GAAsB,CACjD/vC,SAAUvZ,EACVuc,MAAOy9C,EACP9wC,SAAU+wC,EACVv0D,QAAAA,KAGFnE,EAAAA,EAAAA,KAAU,KACJy4D,IAAgBA,EAAYt9D,QAC9BgJ,MAED,CAACs0D,EAAat0D,KAEjBnE,EAAAA,EAAAA,KAAU,KACRynD,GAAsB,uBAAwBmR,EAAsBr+C,KACnE,CAACq+C,IAEJ,MAAMC,GAAehwD,EAAAA,EAAAA,GAAY4vD,GAAeA,EAAYt9D,OAASs9D,OAAcp6D,EAAW8H,GACxF2yD,EAAmBL,IAAgBA,EAAYt9D,OAAS09D,EAAeJ,EAE7E,IAAKtyD,GAAiB2yD,IAAqBA,EAAiB39D,OAC1D,OAGF,MAAM2B,GAAY8D,EAAAA,EAAAA,GAChB,mDACAyF,GAGF,OACE,0BAAKvJ,UAAWA,EAAWkL,IAAKuS,GAC7Bu+C,GAAoBA,EAAiB39C,KAAI,CAAC49C,EAAgB3hD,IACzD,mBAAC,GAAD,CACEna,IAAM,GAAE87D,EAAeJ,SAASI,EAAelU,UAC/C0T,WAAYQ,EACZP,IAAKrvC,EAAU4vC,EAAeJ,OAC9BL,YAAU,EACVv7D,QAAS27D,EACTj/C,MAAOm/C,IAAyBxhD,WClC1C,IAAexT,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,SAClB8C,GACA,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,oBAFpCZ,EApCiC,EACnDkD,OAAAA,EAAQg6D,YAAAA,EAAat0D,QAAAA,EAASugD,eAAAA,MAE9B,MAAO4S,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAe/4D,EAAQ0F,OAAS9F,EAAWS,EAAAA,IAElF4pB,GAAclsB,EAAAA,EAAAA,KAAa+7D,IAC/B7T,EAAe,CACbG,QAAU,IAAG0T,EAAW1T,UACxB8T,MAAOJ,EAAWI,QAEpBx0D,MACC,CAACA,EAASugD,IAEb,OACE,mBAACrE,GAAA,EAAD,CACE5hD,OAAQA,EACRQ,UAAU,OACVkhD,UAAU,SACVh8C,QAASA,EACTrH,UAAU,iBACV+hD,oBAAqB16C,EACrByzD,aAAerzD,EAAAA,QAAkClG,EAAnBi5D,EAC9BO,aAAetzD,EAAAA,QAAkClG,EAAnBk5D,EAC9BO,mBAAoBvzD,EAAAA,IAEnBk0D,EAAYt9C,KAAKo9C,GAChB,mBAAC,GAAD,CACEt7D,IAAKs7D,EAAW1T,QAChB0T,WAAYA,EACZx7D,QAAS2rB,WCwCnB,IAAe9kB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAM,SAAE4kC,GAAa5kC,EAAO4kC,SAAS44B,SAErC,MAAO,CAAE54B,SAAAA,MAEX,CAAClkC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,2BANpCZ,EAzD8C,EAChEkD,OAAAA,EACAy1D,gBAAAA,EACA9zB,SAAAA,EACA64B,sBAAAA,MAGA,MAAM1+C,GAAelW,EAAAA,EAAAA,IAAuB,OACtC,aAAE8B,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB9H,OAAQJ,OAAWA,GAAW,GACzF66D,GAAerwD,EAAAA,EAAAA,GAAYu3B,GAAU,GACrC+4B,EAAoB/4B,GAAY84B,GAGpCp3B,QAASnC,IACPqC,EAAAA,GAAAA,IAAwB,CAAEC,QAAS1nB,EAAc+oC,WAhBzB,OAkB5BtjD,EAAAA,EAAAA,KAAU,IAAOvB,GAASsY,EAAAA,EAAAA,GAAsBkiD,QAAyB56D,GAAY,CAACI,EAAQw6D,IAE9F,MAQMn8D,GAAY8D,EAAAA,EAAAA,GAChB,gDACAyF,IACE8yD,GAAqBA,EAAkBh+D,SAAW,UAGtD,OACE,0BACE6M,IAAKuS,EACLzd,UAAWA,EACX86D,aAAerzD,EAAAA,QAAkClG,EAlB5B,KACvBzF,SAAS+J,KAAK7J,UAAUC,IAAI,cAkB1B8+D,aAAetzD,EAAAA,QAAkClG,EAf5B,KACvBzF,SAAS+J,KAAK7J,UAAU8J,OAAO,eAgB5BuD,GAAgBgzD,EACfA,EAAkBh+C,KAAKslB,GACrB,mBAACD,GAAA,EAAD,CACEvjC,IAAKwjC,EAAQxmC,GACbwmC,QAASA,EACTvjC,KAAMm3D,EAAAA,EACN10B,oBAAqBA,EACrB5iC,QAASm3D,EACTlmC,SAAUyS,MAGZt6B,EACF,mBAACsV,GAAA,EAAD,WACEpd,OC1CV,IAAeuF,EAAAA,EAAAA,KA1BsB,EACnCnF,OAAAA,EAAQ26D,aAAAA,EAAcC,eAAAA,EAAgBl1D,QAAAA,EAAS06C,oBAAAA,MAE/C,MAAOyY,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAe/4D,EAAQ0F,GAE9D1H,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC2jD,GAAA,EAAD,CACE5hD,OAAQA,EACR45D,WAAS,EACTp5D,UAAU,QACVkhD,UAAU,SACVrjD,UAAU,iBACVqH,QAASA,EACT06C,oBAAqBA,EACrB+Y,aAAerzD,EAAAA,QAAkClG,EAAnBi5D,EAC9BO,aAAetzD,EAAAA,QAAkClG,EAAnBk5D,EAC9BO,mBAAoBvzD,EAAAA,IAEnB60D,GAAgB,mBAACl6D,EAAA,EAAD,CAAUC,KAAK,OAAOpC,QAASq8D,GAAe38D,EAAK,qBACnE48D,GAAkB,mBAACn6D,EAAA,EAAD,CAAUC,KAAK,WAAWpC,QAASs8D,GAAiB58D,EAAK,wB,qCCkBlF,MAsEA,IAAemH,EAAAA,EAAAA,KAtEoB,EACjCnF,OAAAA,EACAsuD,OAAAA,EACA5oD,QAAAA,EACA6oD,cAAAA,EACAhD,eAAAA,MAGA,MAAMzvC,GAAelW,EAAAA,EAAAA,IAAuB,OACtC,aAAE8B,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB9H,OAAQJ,OAAWA,GAAW,GACzFi7D,GAAsBC,EAAAA,GAAAA,GAAuBxM,EAAO5xD,OAAS4xD,OAAS1uD,EAhDvD,MAgDqF,GAEpGm7D,GAAoBh9D,EAAAA,EAAAA,KAAas0D,IACrC9D,EAAc8D,EAAMC,QACpB/G,EAAe,CAAE8G,MAAOA,EAAM72D,OAC7B,CAAC+vD,EAAgBgD,IAEdtkC,GAAclsB,EAAAA,EAAAA,KAAY,CAACu0D,EAAgB92D,KAC/C+yD,EAAc+D,GACd/G,EAAe,CAAE8G,MAAO72D,MACvB,CAAC+vD,EAAgBgD,IAEdyM,EAAgB1R,GAAsB,CAC1C/vC,SAAUvZ,EACVwoD,cAAc,EACdjsC,MAAO+xC,EACPplC,SAAU6xC,EACVr1D,QAAAA,KAGFnE,EAAAA,EAAAA,KAAU,MAlEZ,SAAwBoX,EAAemD,GACrC,MAAM5gB,EAAY4gB,EAAajV,QAC/B,IAAK3L,EACH,OAGF,MAAM,eAAE0tD,EAAF,YAAkBD,GAAgBR,GACtCjtD,EACA,eAZoB,GAcpB,GACA,GACA,GAGF,IAAKytD,EAAYjsD,SAAWisD,EAAYhwC,GACtC,OAEF,MAAMuwC,EAAQN,EAAe,GAC7B,IAAKA,EAAentD,SAASkd,IACvBA,IAAUuwC,IAAUC,GAAejuD,EAAWytD,EAAYO,IAAQ,GAAQ,CAC9E,MACMqL,EAAuB,UADZ57C,EAAQiwC,EAAeA,EAAelsD,OAAS,GAAK,QAAU,OAxBxD,GAyBgBic,EAA6B,GAEpE87C,EAAAA,GAAAA,GAA2Bv5D,EAAWq5D,IA2CtC0G,CAAeD,EAAel/C,KAC7B,CAACk/C,IAEJ,MAQM38D,GAAY8D,EAAAA,EAAAA,GAChB,gDACAyF,GAGF,OACE,0BACE2B,IAAKuS,EACLzd,UAAWA,EACX86D,aAAerzD,EAAAA,QAAkClG,EAjB5B,KACvBzF,SAAS+J,KAAK7J,UAAUC,IAAI,cAiB1B8+D,aAAetzD,EAAAA,QAAkClG,EAd5B,KACvBzF,SAAS+J,KAAK7J,UAAU8J,OAAO,eAe5BuD,GAAgBmzD,EACfA,EAAWn+C,KAAI,CAAC21C,EAAO15C,IACrB,mBAAC,GAAD,CACEna,IAAK6zD,EAAM72D,GACX62D,MAAOA,EACPr3C,MAAOggD,IAAkBriD,EACzBra,QAAS2rB,MAGXviB,EACF,mBAACsV,GAAA,EAAD,WACEpd,MC9DV,IAAeuF,EAAAA,EAAAA,KAvCkB,EAC/BwY,MAAAA,EACAoJ,YAAAA,EACAogB,UAAAA,EACA+zB,SAAAA,EACAlgD,MAAAA,EACApT,qBAAAA,EAAuB,GACvBtJ,QAAAA,MAEA,IAAIo0B,EAA8B,GAElC,MAAMyoC,GAAmBhpD,EAAAA,EAAAA,GAASg1B,EAAa,eAAcA,EAAU/hC,WAAQxF,GAW/E,OAVAs7D,EAAWA,GAAYC,GAGrBzoC,EACE,0BAAKj4B,IAAKygE,EAAU78D,UAAWuJ,EAAsBuG,IAAI,GAAGitD,SAAS,QAAQhtD,UAAU,UAEhFuP,IACT+U,GAAU+O,EAAAA,GAAAA,IAAgB9jB,EAAO,IAIjC,mBAAChB,GAAA,EAAD,CACE3B,MAAOA,EACP3c,UAAU,iCACVC,QAASA,GAET,2BAAMD,UAAU,SACM,iBAAZq0B,GAAuB7zB,EAAAA,EAAAA,GAAW6zB,GAAWA,GAEvD,0BAAKr0B,UAAU,iBACZsf,GAAU,0BAAKtf,UAAU,SAASsf,GAClCoJ,GAAgB,0BAAK1oB,UAAU,eAAe0oB,QCoBvD,IAAe5hB,EAAAA,EAAAA,KAvDmB,EAChC6V,MAAAA,EAAOqgD,aAAAA,EAAcC,aAAAA,EAAch9D,QAAAA,MAEnC,IAAIyR,EACAo3B,EACAo0B,EAEA,UAAWD,IACbvrD,EAAQurD,EAAavrD,OAGnB,cAAeurD,IACjBn0B,EAAYm0B,EAAan0B,WAEvB,iBAAkBm0B,GAAgBD,IACpCE,EAAeD,EAAaC,cAG9B,MAAMJ,GAAmBhpD,EAAAA,EAAAA,GAASopD,EAAgB,eAAcA,EAAan2D,WAAQxF,GAC/E8rB,GAAevZ,EAAAA,EAAAA,GAASpC,GAAU,QAAOA,EAAMvU,cAC/C,kBACJ6rC,EADI,sBACe9F,EADf,qBACsC35B,IACxC45B,EAAAA,GAAAA,GAAsB9V,EAAc,QAElCzB,GAAclsB,EAAAA,EAAAA,KAAY,KAC9BO,EAAQg9D,KACP,CAACA,EAAch9D,IAElB,GAAI+8D,EACF,OACE,0BAAKh9D,UAAU,kCAAkCC,QAAS2rB,GACvDod,GACC,0BAAK5sC,IAAMsV,GAASA,EAAMo3B,WAAap3B,EAAMo3B,UAAUC,SAAY+zB,EAAkBhtD,IAAI,KAE1FozB,GACC,0BAAK9mC,IAAKixB,EAAcrtB,UAAY,GAAEuJ,eAAmCuG,IAAI,MAMrF,MAAM,MAAEwP,EAAF,YAASoJ,GAAgBu0C,EAE/B,OACE,mBAAC,GAAD,CACEtgD,MAAOA,EACPkgD,SAAU35B,EAAwB7V,EAAgByb,GAAaA,EAAUC,SAAY+zB,EACrFvzD,qBAAsB25B,EAAwB35B,OAAuBhI,EACrE+d,MAAOA,EACPoJ,YAAaA,EACbzoB,QAAS2rB,OCtCf,IAAe9kB,EAAAA,EAAAA,KApBqB,EAAG6V,MAAAA,EAAOsgD,aAAAA,EAAch9D,QAAAA,MAC1D,MAAM,MACJqf,EADI,IACGvY,EADH,YACQ2hB,EADR,aACqBw0C,GACvBD,EAEErxC,GAAclsB,EAAAA,EAAAA,KAAY,KAC9BO,EAAQg9D,KACP,CAACA,EAAch9D,IAElB,OACE,mBAAC,GAAD,CACE0c,MAAOA,EACPmsB,UAAWo0B,EACX59C,MAAOA,GAASvY,EAChB2hB,YAAaA,EACbzoB,QAAS2rB,OCYf,IAAe9kB,EAAAA,EAAAA,KAvBiB,EAC9Bm2D,aAAAA,EAAcp6B,oBAAAA,EAAqB5iC,QAAAA,MAEnC,MAAM,IAAE84D,GAAQkE,EAEVrxC,GAAclsB,EAAAA,EAAAA,KAAY,KAC9BO,EAAQg9D,KACP,CAACA,EAAch9D,IAElB,GAAK84D,EAIL,OACE,mBAAC,GAAD,CACEA,IAAKA,EACLl2B,oBAAqBA,EACrB7iC,UAAU,sBACVC,QAAS2rB,OCCf,IAAe9kB,EAAAA,EAAAA,KApBqB,EAAGm2D,aAAAA,EAAcp6B,oBAAAA,EAAqB5iC,QAAAA,MACxE,MAAM,QAAE0jC,GAAYs5B,EAEpB,GAAKt5B,EAIL,OACE,mBAACD,GAAA,EAAD,CACEC,QAASA,EACTvjC,KAAM+8D,EAAAA,GACNt6B,oBAAqBA,EACrBvjB,MAAOqkB,EAAQqwB,MACfh0D,UAAU,sBACVC,QAASA,EACTixB,SAAU+rC,OCAVjxC,IAAevoB,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAK,GAwKjD,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,SAClB8C,GACA,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,WAAY,WAAY,yBAHRZ,EAxJmC,EACrDkD,OAAAA,EACAk6D,MAAAA,EACAuB,UAAAA,EACAC,iBAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAl2D,QAAAA,EACAulB,SAAAA,EACA4wC,SAAAA,EACAC,eAAAA,MAGA,MAAMhgD,GAAelW,EAAAA,EAAAA,IAAuB,OACtC,aAAE8B,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB9H,OAAQJ,OAAWA,GAAW,IAE7FyjC,QAASnC,IACPqC,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS1nB,EACTg8C,WApC6B,IAqC7BhT,YAAa9kD,IAGTguB,GAAiBjwB,EAAAA,EAAAA,KAAY,EAAG2a,UAAAA,MAChCA,IAAcuV,EAAAA,GAAAA,WAChB5D,GAAauxC,KAEd,CAACA,IAEEZ,EAAgB1R,GAAsB,CAC1C/vC,SAAUvZ,EACVupD,6BAA8BkS,EAC9BjS,kBAAmBiS,EACnBl/C,MAAOm/C,EACPxyC,SAAU4yC,EACVp2D,QAAAA,KAGFnE,EAAAA,EAAAA,KAAU,KACRynD,GAAsB,uBAAwBgS,EAAel/C,KAC5D,CAACk/C,IAEJ,MAAMe,GAAeh+D,EAAAA,EAAAA,KAAY,KAC/BktB,EAAS,CAAEzvB,GAAI0+D,IACf2B,EAAS,CAAE3B,MAAAA,EAAO30B,MAAOo2B,EAAUK,eAClC,CAAC9B,EAAOjvC,EAAU4wC,EAAUF,IAEzBM,GAAuB7xD,EAAAA,EAAAA,GAC3BsxD,GAAoBA,EAAiBh/D,OACjCg/D,OACA97D,EACJ8H,GAEIw0D,EAA2BR,IAAqBA,EAAiBh/D,OACnEu/D,EACAP,EAEJ,IAAKh0D,IAAiBw0D,IAA8BA,EAAyBx/D,SAAWi/D,EACtF,OAGF,MAAMt9D,GAAY8D,EAAAA,EAAAA,GAChB,oCACA2D,EAAAA,GAAe,eAAiB,gBAChC21D,GAAa,UACb7zD,GAuEF,OACE,mBAAC0U,GAAA,EAAD,CACE/S,IAAKuS,EACLzd,UAAWA,EACXke,MAAO2/C,EACP3rC,aAAa,uBACbpB,YAAU,EACV3S,WAAYwR,EACZmuC,cAAe,KAEdR,GA5ED,mBAACh/C,GAAA,EAAD,CAAU5X,QAAM,EAAC1G,UAAU,wBAAwBC,QAASy9D,GAC1D,2BAAM19D,UAAU,SAASs9D,EAAU16D,OAMhCi7D,EAA0Bx/C,KAAI,CAAC0/C,EAAiBzjD,KACrD,OAAQyjD,EAAgBz3D,MACtB,IAAK,MACH,OACE,mBAAC,GAAD,CACEnG,IAAK49D,EAAgB5gE,GACrB8/D,aAAcc,EACdl7B,oBAAqBA,EACrB5iC,QAASw9D,IAIf,IAAK,QACH,OACE,mBAAC,GAAD,CACEt9D,IAAK49D,EAAgB5gE,GACrB6/D,aAAcI,EACdH,aAAcc,EACd99D,QAASw9D,IAIf,IAAK,UACH,OACE,mBAAC,GAAD,CACEt9D,IAAK49D,EAAgB5gE,GACrB8/D,aAAcc,EACdl7B,oBAAqBA,EACrB5iC,QAASw9D,IAIf,IAAK,QACL,IAAK,OACH,OACE,mBAAC,GAAD,CACEt9D,IAAK49D,EAAgB5gE,GACrBwf,MAAOggD,IAAkBriD,EACzB2iD,aAAcc,EACd99D,QAASw9D,IAGf,IAAK,UACL,IAAK,QACH,OACE,mBAAC,GAAD,CACEt9D,IAAK49D,EAAgB5gE,GACrBwf,MAAOggD,IAAkBriD,EACzB2iD,aAAcc,EACd99D,QAASw9D,IAIf,QACE,gB,eCvHV,MA+GA,IAAe32D,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAC1Bq/D,EAAe39D,IAAQyQ,EAAAA,EAAAA,IAAmBpS,EAAQ2B,EAAKlD,IAC7D,IAAKkD,IAAS29D,EACZ,MAAO,GAGT,MAAM,MAAEnuC,EAAF,QAAS04B,IAAYC,EAAAA,EAAAA,IAAwB9pD,IAAW,IACxD,WAAEyyC,EAAF,SAAchgC,GAAao3C,GAAW,GAE5C,MAAO,CACLloD,KAAAA,EACA29D,aAAAA,EACAnuC,MAAAA,EACAshB,WAAAA,EACAhgC,SAAAA,MAGJ,CAACzS,EAAQW,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAA2B,kBAnB5DZ,EA/G2C,EAC7DE,OAAAA,EACAsR,SAAAA,EACA5I,QAAAA,EACA6T,SAAAA,EACA7a,KAAAA,EACA29D,aAAAA,EACAnuC,MAAAA,EACAshB,WAAAA,EACAhgC,SAAAA,EACAw3C,wBAAAA,EACAnpD,aAAAA,MAEA,MAAMG,GAAOC,EAAAA,EAAAA,KAEPq+D,GAAex8D,EAAAA,EAAAA,KAAQ,KAC3B,KAAKouB,GAAU1e,GAAaA,EAAS9S,QAAW2/D,GAC9C,OAAOhuC,GAAAA,EAGT,MAAMu4B,EAAUp3C,EAASkN,KAAKlhB,IAC5B,MAAMY,EAAUigE,EAAa7gE,GAC7B,IAAKY,EACH,OAGF,MAAMmgE,EAAangE,EAAQyS,UAAWxR,EAAAA,EAAAA,KAAWm/D,EAAAA,EAAAA,MAAapgE,EAAQyS,eAAYjP,EAElF,IAAI68D,EACJ,GAAI/9D,IAAQinB,EAAAA,EAAAA,IAAcjnB,GACxB+9D,EAAa/9D,OACR,GAAItC,EAAQsgE,YAAa,CAC9B,MAAM,cAAEC,EAAF,WAAiBtkD,GAAejc,EAAQsgE,YAC9CD,EAAaE,GAAiBtkD,GAAa/a,EAAAA,EAAAA,KAAWk/D,EAAAA,EAAAA,MAAankD,QAAczY,OAEjF68D,EAAargE,EAAQyS,UAAWvR,EAAAA,EAAAA,KAAWk/D,EAAAA,EAAAA,MAAapgE,EAAQyS,eAAYjP,EAG9E,MAAO,CACLxD,QAAAA,EACAmgE,WAAAA,EACAE,WAAAA,EACAn+D,QAAS,IAAMT,EAAa,CAAEb,OAAAA,EAAQsR,SAAAA,EAAUrR,UAAWzB,QAE5Dsf,OAAOvU,SAEV,OAAOq2D,EAAAA,EAAAA,IAAQhW,GAAS,EAAGxqD,QAAAA,KAAcA,EAAQ2C,MAAM,UACtD,CAAC/B,EAAQsR,EAAUzQ,EAAc2R,EAAU9Q,EAAM29D,EAAcnuC,KA2BlExU,EAAAA,EAAAA,IAAeH,EAAU7T,GAGzB,MAAMoW,GAAelW,EAAAA,EAAAA,IAAuB,MACtCkT,GAAgBiD,EAAAA,GAAAA,GAA0BD,GAAc,GAAOnD,IACnE,MAAMkkD,EAAcP,GAAgBA,GAAwB,IAAX3jD,EAAe,EAAIA,GAChEkkD,GACFA,EAAYv+D,YAEb,oBAAoB,GAEvB,OACE,mBAACge,GAAA,EAAD,CACEje,UAAU,4BACVke,MAAO+/C,EACPQ,iBAAkB,EAClBtgD,WAAYwqC,EACZ73B,YAAU,EACVjT,UAAWpD,EACXvP,IAAKuS,GAEL,wBAAGzd,UAAU,cAAcO,IAAI,QAC3BsvB,EAEkB,IAAfshB,GAAqB8sB,EAAa5/D,OAEpB,IAAf8yC,EACF,kBAEC,GAAG8sB,EAAa5/D,SAAW8yC,GAAc8sB,EAAa5/D,yBAJvDsB,EAAK,yBAFLA,EAAK,gCASRs+D,EAAa5/C,KAzDS,EACzBtgB,QAAAA,EAASmgE,WAAAA,EAAYE,WAAAA,EAAYn+D,QAAAA,MAEjC,MAAMqf,EAAQ8+C,GAAahhD,EAAAA,EAAAA,GAAazd,EAAMy+D,IAAcjuC,EAAAA,EAAAA,IAAgB+tC,GACtEt7D,GAAOmrB,EAAAA,EAAAA,IAAsBpuB,EAAM5B,GAEzC,OACE,mBAACugB,GAAA,EAAD,CACEte,UAAU,gDACVC,QAASA,GAET,mBAACC,EAAA,EAAD,CAAQG,KAAM+9D,EAAY99D,KAAM49D,IAChC,0BAAKl+D,UAAU,QACb,0BAAKA,UAAU,SACb,yBAAIO,IAAI,QAAQ+e,IAAS9e,EAAAA,EAAAA,GAAW8e,IACpC,mBAACo/C,GAAA,EAAD,CAAiB3gE,QAASA,KAE5B,0BAAKiC,UAAU,WAAWO,IAAI,SAC3BC,EAAAA,EAAAA,GAAWoC,EAAM,CAAC,QAAS,aAAc,CAAEorB,UAAW6B,e,eC1FnE,MAqFA,IAAe/oB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUynD,aAAAA,MACF,CACLsS,KAAKvS,EAAAA,EAAAA,IAAiBxnD,EAAQynD,GAC9B4R,YAAY4G,EAAAA,EAAAA,IAAyBjgE,OAGzC,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,eAAgB,sBAPpDZ,EAnFgD,EAClE0nD,aAAAA,EAActjB,oBAAAA,EAAqB41B,IAAAA,EAAKV,WAAAA,EACxC1R,aAAAA,EAAcC,iBAAAA,EAAkBsY,gBAAAA,EAAiBC,cAAAA,MAEjD,MAAMl/D,GAAOC,EAAAA,EAAAA,KACPk/D,EAAUrG,GAAOvwD,QAAQuwD,EAAIpyB,eAC7B04B,EAAoB72D,QAAQuwD,GAAOA,EAAIn1B,WAEtC8B,EAAaC,EAAWC,IAAc3iB,EAAAA,GAAAA,MAE7Cq8C,EAAAA,GAAAA,IAAY,KACVH,EAAcz5B,KACb,CAACA,EAAay5B,IAEjB,MAAMxC,GAAoB56D,EAAAA,EAAAA,KAAQ,KAChC,IAAKg3D,EACH,MAAO,GAGT,MAAMwG,GAAmBxG,EAAIyG,QAAU,IAAI7gD,KAAI,EAAGlhB,GAAAA,KAASA,IACrDgiE,EAAgB1G,EAAIn1B,SAAWm1B,EAAIn1B,SAAS7mB,QAAO,EAAGtf,GAAAA,MAAU8hE,EAAgB7hE,SAASD,KAAO,GAEtG,MAAO,IAAIs7D,EAAIyG,QAAU,MAAOC,GAAezrC,MAAM,EAxB7B,KAyBvB,CAAC+kC,KAEJv1D,EAAAA,EAAAA,KAAU,MAEH67D,GAAqB1C,EAAkBh+D,OA7BpB,GA8BtBgoD,EAAa,CAAEF,aAAAA,MAEhB,CAAC4Y,EAAmB1C,EAAkBh+D,OAAQgoD,EAAcF,IAE/D,MAAMiZ,GAAiB1/D,EAAAA,EAAAA,KAAY,KACjC4mD,EAAiB,CAAEH,aAAAA,MAClB,CAACG,EAAkBH,IAEtB,IAAKsS,EACH,OAGF,MAAM4G,EAAoBhD,EAAkBh+D,OAAS,EAErD,OACE,0BAAK8B,IAAKs4D,EAAIt7D,GAAI6C,UAAU,cAAcO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAClE,0BAAKvB,UAAU,sBACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,QAAQO,IAAI,QAAQk4D,EAAIn5C,OACtC,wBAAGtf,UAAU,QAAQO,IAAI,QAAQZ,EAAK,WAAY84D,EAAI57B,MAAO,OAE/D,mBAACj7B,EAAA,EAAD,CACE5B,UAAW8+D,EAAU,gBAAav9D,EAClCO,MAAM,UACN1B,KAAK,OACLq8B,MAAI,EACJC,OAAK,EACLz8B,QAASm/D,GAERz/D,EAAKm/D,EAAU,qBAAuB,sBAG3C,0BAAK9+D,UAAU,qBACXq/D,GAAqB,mBAACrvD,EAAA,EAAD,MACtBqvD,GAAqBhD,EAAkBh+C,KAAKslB,GAC3C,mBAACD,GAAA,EAAD,CACEC,QAASA,EACTvjC,KAAMk/D,EAAAA,GACNz8B,oBAAqBA,EACrB20B,WAAYO,GAAc3yB,GAAew5B,EACzC3+D,QAASolC,OAIdg6B,GACC,mBAAC,KAAD,CACE19D,OAAQyjC,EACRoB,YAAa61B,EAAkB,GAC/Bh1D,QAASi+B,SC/EbtZ,IAAevoB,EAAAA,EAAAA,KAAUwoB,GAAOA,KAAM,KAAO,GA0EnD,IAAenlB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAMuS,GAAgBsuD,EAAAA,EAAAA,IAA2B7gE,IAC3C,MAAEmxB,EAAF,UAASgtB,GAAc5rC,GAAiB,IACxC,SAAEuuD,GAAa9gE,EAAO4kC,SAE5B,MAAO,CACLzT,MAAAA,EACA4vC,YAAaD,EAASz7B,OACtB8Y,UAAAA,MAGJ,CAACz9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAZpCZ,EAxE6C,EAC/D4I,QAAAA,EACA6T,SAAAA,EACA2U,MAAAA,EACA4vC,YAAAA,EACA5iB,UAAAA,EACA6iB,qBAAAA,MAGA,MAAMjiD,GAAelW,EAAAA,EAAAA,IAAuB,MAEtC5H,GAAOC,EAAAA,EAAAA,MAENwlC,EAAau6B,IAAkB18D,EAAAA,EAAAA,KAAS,IAG7C+hC,QAASnC,IACPqC,EAAAA,GAAAA,IAAwB,CAAEC,QAAS1nB,EAAc+oC,WArBzB,MAqE5B,OA5CAtjD,EAAAA,EAAAA,KAAU,KACR8oB,IAAa,KACX0zC,WAIJrkD,EAAAA,EAAAA,IAAeH,EAAU7T,GAuCvB,0BAAK6D,IAAKuS,EAAczd,UAAU,8BAA8BO,IAAKZ,EAAK4b,MAAQ,WAAQha,GArC5F,WACE,QAAcA,IAAVsuB,EAIJ,OAAKA,GAAS4vC,EACLA,EAAYphD,KAAKlhB,GACtB,mBAAC,GAAD,CACEgD,IAAKhD,EACLgpD,aAAchpD,EACd0lC,oBAAqBA,EACrB+7B,gBAAiBx5B,EACjBy5B,cAAec,MAKjB9iB,EACGA,EAAUx+C,OAIRw+C,EAAUx+B,KAAKlhB,GACpB,mBAAC,GAAD,CACEgD,IAAKhD,EACLgpD,aAAchpD,EACd0lC,oBAAqBA,EACrB+7B,gBAAiBx5B,EACjBy5B,cAAec,MATV,wBAAG3/D,UAAU,cAAcO,IAAI,QAA/B,kBAcJ,mBAACoe,GAAA,EAAD,MAKJk8C,QCsBP,IAAe/zD,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAMuS,GAAgB2uD,EAAAA,EAAAA,IAAuBlhE,IACvC,MAAEmxB,EAAF,QAAS04B,GAAYt3C,GAAiB,IACtC,OAAEtS,IAAWsnB,EAAAA,EAAAA,IAAyBvnB,IAAW,GACjD2B,EAAO1B,GAASM,EAAAA,EAAAA,IAAWP,EAAQC,QAAU4C,EAGnD,MAAO,CACLsuB,MAAAA,EACA04B,QAAAA,EACAloD,KAAAA,EACAw/D,cANoBx/D,GAAOy/D,EAAAA,EAAAA,IAAoBphE,EAAQ2B,QAAQkB,MASnE,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,iBAAkB,cAAe,uBAfrEZ,EAhFyC,EAC3D4I,QAAAA,EACA6T,SAAAA,EACA2U,MAAAA,EACA04B,QAAAA,EACAloD,KAAAA,EACAw/D,cAAAA,EACAE,eAAAA,EACAxZ,YAAAA,EACAyZ,kBAAAA,MAGA,MAAMviD,GAAelW,EAAAA,EAAAA,IAAuB,OAG1Cy9B,QAASnC,IACPqC,EAAAA,GAAAA,IAAwB,CAAEC,QAAS1nB,EAAcg8C,WAlBzB,OAoBtB,YAAEH,IAAgB2G,EAAAA,EAAAA,IAA4B5/D,EAAMw/D,GAEpDK,GAAiBxgE,EAAAA,EAAAA,KAAaq5D,IAC9BO,GACF/S,EAAY,CAAEwS,IAAAA,IAGZtxD,EAAAA,IACFu4D,EAAkB,CAAEnwC,WAAOtuB,MAE5B,CAAC+3D,EAAa/S,EAAayZ,IAExBrgE,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAU7T,GA6BzB,MAAM84D,EAAaj4D,aAAkB3G,IAAVsuB,GAAuB04B,GAAWA,EAAQlqD,QAErE,OACE,0BAAK2B,UAAU,YAAYO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACnD,mBAAC0c,GAAA,EAAD,CACE/S,IAAKuS,EACLzd,WAAW8D,EAAAA,EAAAA,GAAe,8BAA+Bq8D,GAAc,QACvEjiD,MAAOqqC,EACPr2B,aAAa,aACbusC,iBAzEkB,GA0ElB3tC,YAAU,EACV3S,WAAY4hD,GAtClB,WACE,QAAcx+D,IAAVsuB,EAIJ,OAAK04B,EAMAA,EAAQlqD,OAMNkqD,EAAQlqC,KAAK06C,GAClB,mBAAC,GAAD,CACE54D,IAAK44D,EAAI57D,GACT47D,IAAKA,EACLl2B,oBAAqBA,EACrB5iC,QAASigE,MATT,wBAAGlgE,UAAU,cAAcO,IAAI,QAAQZ,EAAK,gBAN5C,mBAACgf,GAAA,EAAD,MAiCCk8C,SCcT,IAAe/zD,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAU0hE,OAAAA,MACT,MAAM,OAAEC,EAAF,QAAUC,GAAY5hE,EAAO6hE,YAEnC,MAAO,CACLF,OAAQA,GAAUA,EAAOD,EAAO19B,QAChC89B,OAASF,GAAWA,EAAQF,EAAO19B,SAAY,OAGnD,CAAChkC,EAAQW,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,wBAAyB,WAAY,sBATtEZ,EA5FiD,EACnE4B,KAAAA,EACAtC,QAAAA,EACAqiE,OAAAA,EACAK,WAAAA,EACAC,YAAAA,EACAL,OAAAA,EACAG,OAAAA,EACAG,sBAAAA,EACA/zC,SAAAA,EACAg0C,iBAAAA,MAEA,MAAMC,GAAkB90D,EAAAA,EAAAA,GAAoB00D,EAAWK,cAChDrvC,EAAWsvC,IAAgB99D,EAAAA,EAAAA,KAAkB,GAC9C+9D,EAAkB94D,QAAQm4D,IAC1B,OAAE39B,EAAF,KAAU9/B,GAASw9D,EACnBzgE,GAAOC,EAAAA,EAAAA,MAEbsD,EAAAA,EAAAA,KAAU,KAEH89D,GAAmBH,IAAoBJ,EAAWK,aACrDH,EAAsB,CACpBtgE,KAAAA,EAAMzB,UAAWb,EAAQZ,GAAIulC,OAAAA,EAAQ89B,OAAAA,EAAQS,MAzB/B,EAyBqDC,mBAAmB,MAIzF,CAACT,EAAWK,YAAaE,IAE5B,MAAMG,GAAsBzhE,EAAAA,EAAAA,KAAY,KACtCqhE,GAAa,GACbJ,EAAsB,CACpBtgE,KAAAA,EAAMzB,UAAWb,EAAQZ,GAAIulC,OAAAA,EAAQ89B,OAAAA,EAAQS,MAjC3B,OAmCnB,CAAC5gE,EAAMsgE,EAAuB5iE,EAAQZ,GAAIqjE,EAAQ99B,KAErDx/B,EAAAA,EAAAA,KAAU,KACR69D,GAAa,KACZ,CAACV,IAEJ,MAAMe,GAAoB1hE,EAAAA,EAAAA,KAAavC,IACrCyvB,EAAS,CAAEzvB,GAAAA,IACXyjE,MACC,CAACA,EAAkBh0C,IAetB,OACE,0BAAK5sB,UAAU,qBACb,0BAAKA,UAAU,eACZqgE,EACGA,EAAOhiD,KAAKlhB,GACZ,mBAACmhB,GAAA,EAAD,CACEne,IAAKhD,EACL6C,UAAU,sBACVC,QAAS,IAAMmhE,EAAkBjkE,IAEjC,mBAACohB,GAAA,EAAD,CACEuN,WAAW,OACXrN,OAAQthB,EACRy5B,eAAa,EACbyqC,kBAAgB,OAIpB,mBAAC1iD,GAAA,EAAD,MACH0hD,GAhCP,WACE,MAAMiB,EAAkBb,EAAWK,YAAcT,EAAQhiE,OAEzD,OAAOoiE,EAAWK,YAlDA,GAkD+BQ,EAAkB,GACjE,mBAAC,GAAD,CACEzkC,MAAOykC,EACPxkC,SAAS,QACTrL,UAAWA,EACXxxB,QAASkhE,IAwBEI,IAEb,0BAAKvhE,UAAU,cAAcO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACrD,2BAAMvB,UAAU,eAAeO,IAAI,QAAQqC,GAC3C,2BAAM5C,UAAU,iBAAiBO,IAAKZ,EAAK4b,MAAQ,YAASha,IAQ7CiF,EAPEi6D,EAAWK,aAOEU,EAPWd,GAQhC,GAAMl6D,EAAQg7D,EAAS,KAAK98D,UAAY,GATjD,OAQR,IAAuB8B,EAAeg7D,MC9DtC,IAAe16D,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MACE6hE,aAAa,OAAE5hE,EAAF,UAAUC,GADnB,aAEJsuB,GACExuB,EAEJ,OAAKC,GAAWC,EAOT,CACLyB,MAJWpB,EAAAA,EAAAA,IAAWP,EAAQC,GAK9BZ,SAJcmB,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,GAKhDsuB,aAAAA,GATO,KAROzuB,EAzC2B,EAC7C4I,QAAAA,EACA6T,SAAAA,EACA7a,KAAAA,EACAtC,QAAAA,EACAmvB,aAAAA,MAEA,MAAMvtB,GAAOC,EAAAA,EAAAA,KAGb,IAFAyb,EAAAA,EAAAA,IAAeH,EAAU7T,IAEpBtJ,IAAYsC,EACf,OAAO,mBAACse,GAAA,EAAD,MAGT,MAAM,QAAE6zC,EAAF,QAAWjK,IAAYkZ,EAAAA,EAAAA,IAAe1jE,GAC5C,IAAKwqD,EAAQA,QACX,OAGF,MAAMmZ,GAAkBC,EAAAA,EAAAA,IAAqBpZ,EAAQA,QAAS,UAE9D,OACE,0BAAKvoD,UAAU,cAAcO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACrD,yBAAIvB,UAAU,gBAAgBO,IAAI,QAAQiyD,EAAQ5B,UAClD,0BAAK5wD,UAAU,mCACZktB,GAAgBslC,EAAQC,QAAQp0C,KAAK+hD,GACpC,mBAAC,GAAD,CACEjgE,IAAM,GAAEpC,EAAQZ,MAAMijE,EAAO19B,SAC7BriC,KAAMA,EACNtC,QAASA,EACTqiE,OAAQA,EACRK,WAAYiB,EAAgBtB,EAAO19B,QACnCg+B,YAAanY,EAAQmY,iBAGvBxzC,GAAgB,mBAACvO,GAAA,EAAD,YCfpBwZ,GAA2B,4BAoKjC,IAAerxB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAU+f,OAAAA,MACT,MAAMne,GAAOtB,EAAAA,EAAAA,IAAWN,EAAQ+f,GAC1Bpe,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQ+f,IAC1B,SAAE/b,GAAahE,EAAOkjE,WAG5B,MAAO,CACLthE,KAAAA,EAAMD,KAAAA,EAAMqC,SAAAA,EAAU0oB,SAHRC,EAAAA,EAAAA,IAAkBhrB,GAAMirB,EAAAA,EAAAA,IAAqB5sB,IAAS6sB,EAAAA,EAAAA,IAAuB7sB,QAM/F,CAACA,EAAQW,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAChD,gBAAiB,aAAc,kBAAmB,WAAY,mBAZ9CZ,EAlK0C,EAC5DggB,OAAAA,EACAne,KAAAA,EACAD,KAAAA,EACAqC,SAAAA,EACA0oB,QAAAA,EACAy2C,cAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAp1C,SAAAA,EACAvlB,QAAAA,EACA6T,SAAAA,MAEA,MAAO+mD,EAAoBC,EAAkBC,IAAqBx/C,EAAAA,GAAAA,MAC3DuW,EAAwBC,IAA6Bl2B,EAAAA,EAAAA,KAAS,IAC9D4b,EAAOua,IAAYn2B,EAAAA,EAAAA,MACpBtD,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAU7T,GAEzB,MAAMkxB,EAAmBj4B,GAAQA,EAAKg4B,WAAmB,GACnDG,EAAkBn4B,GAAQA,EAAKk4B,UAAkB,IAEhDF,EAAWgB,IAAgBr2B,EAAAA,EAAAA,IAASs1B,IACpCC,EAAUe,IAAet2B,EAAAA,EAAAA,IAASw1B,IAClC2pC,EAAwBC,IAA6Bp/D,EAAAA,EAAAA,KAAUmoB,IAEtEloB,EAAAA,EAAAA,KAAU,KACRm/D,GAA2Bj3C,KAC1B,CAACA,KAEJloB,EAAAA,EAAAA,KAAU,KACRi2B,GAA0B,GAC1BgpC,MACC,CAACA,EAAmB1jD,KAEvBvb,EAAAA,EAAAA,KAAU,KACRo2B,EAAaf,GACbgB,EAAYd,KACX,CAACF,EAAkBE,EAAiBn4B,KAEvC4C,EAAAA,EAAAA,KAAU,KACJR,IAAa4/D,EAAAA,GAAAA,WACfnpC,GAA0B,GAC1BC,OAAS73B,GACT4gE,OAED,CAACA,EAAmBz/D,IAEvB,MAAMq3B,GAAwBr6B,EAAAA,EAAAA,KAAaqE,IACzCu1B,EAAav1B,EAAE0G,OAAOjE,OACtB2yB,GAA0B,KACzB,IAEGa,GAAuBt6B,EAAAA,EAAAA,KAAaqE,IACxCw1B,EAAYx1B,EAAE0G,OAAOjE,OACrB2yB,GAA0B,KACzB,IAEGopC,GAA2B7iE,EAAAA,EAAAA,KAAaqE,IAC5Cs+D,EAA0Bt+D,EAAE0G,OAAOq2B,SACnC3H,GAA0B,KACzB,IAEGe,GAAoBx6B,EAAAA,EAAAA,KAAY,KACpC,MAAMy6B,EAAmB7B,EAAUR,OAC7BsC,EAAkB5B,EAASV,OAE5BqC,EAAiB97B,QACpB+6B,EAASjB,IAGX0pC,EAAc,CACZpjD,OAAAA,EACA2M,SAAUg3C,EACV9pC,UAAW6B,EACX3B,SAAU4B,MAEX,CAAC9B,EAAWE,EAAUqpC,EAAepjD,EAAQ2jD,IAE1CI,GAAsB9iE,EAAAA,EAAAA,KAAY,KACtCqiE,EAAc,CACZpjE,OAAQ0B,EAAKlD,GACb6pB,oBAAoB,IAEtB86C,EAAW,CAAErjD,OAAAA,IACb0jD,IACAH,IACAp1C,EAAS,CAAEzvB,QAAIoE,MACd,CAAClB,EAAKlD,GAAIglE,EAAmBH,EAAiBD,EAAeD,EAAYl1C,EAAUnO,IAEtF,IAAKne,EACH,OAGF,MAAMmxB,EAAY/uB,IAAa4/D,EAAAA,GAAAA,WAE/B,OACE,0BAAKtiE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACue,GAAA,EAAD,CACEE,OAAQne,EAAKnD,GACb2uB,WAAW,QACXtN,OAAO,gBACPikD,cAAY,IAEd,mBAAC7kD,GAAA,EAAD,CACEzgB,GAAG,kBACH8rB,MAAOtpB,EAAK,iCACZ4M,SAAUwtB,EACVvzB,MAAO8xB,EACPzZ,MAAOA,IAAUsZ,GAA2BtZ,OAAQtd,IAEtD,mBAACqc,GAAA,EAAD,CACEzgB,GAAG,iBACH8rB,MAAOtpB,EAAK,gCACZ4M,SAAUytB,EACVxzB,MAAOgyB,IAET,0BAAKx4B,UAAU,gCACb,mBAAC6gC,GAAA,EAAD,CACEC,QAASshC,EACTn5C,MAAOtpB,EAAK,iBACZ8lC,SAAU9lC,EAAKyiE,EACX,gCACA,kCACJ71D,SAAUg2D,MAIhB,0BAAKviE,UAAU,WACb,mBAACse,GAAA,EAAD,CAAUjc,KAAK,SAASqE,QAAM,EAACkkB,aAAW,EAAC3qB,QAASiiE,GACjDviE,EAAK,oBAIZ,mBAAC66B,GAAA,EAAD,CACE5uB,QAASstB,EACTj5B,QAASi6B,EACT5tB,SAAUmlB,EACV1vB,UAAWpC,EAAK,SAEf8xB,EACC,mBAACzhB,EAAA,EAAD,CAASlO,MAAM,UAEf,wBAAG9B,UAAU,gBAGjB,mBAACwgB,GAAA,EAAD,CACE7e,OAAQsgE,EACR56D,QAAS86D,EACTv/D,KAAMjD,EAAK,2BACX8gB,aAAc9gB,EAAK,iBACnB+gB,eAAgB8hD,EAChBjsC,sBAAoB,SCzJtBmsC,GAAoB,6BAiR1B,IAAe57D,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,SAAE+D,GAAahE,EAAOkjE,WACtBe,EAAmBz6D,QAAQ7H,EAAKq4B,UAAYr4B,EAAKq4B,SAASkqC,cAC1DC,GAAer8C,EAAAA,EAAAA,IAAiBnmB,GAEtC,MAAO,CACLA,KAAAA,EACAqC,SAAAA,EACAmgE,aAAAA,EACAF,iBAAAA,EACAG,cAAeD,EAAexiE,EAAK0iE,WAAYC,EAAAA,EAAAA,IAAiB3iE,EAAM,cACtE4iE,YAAaJ,EAAexiE,EAAK0iE,WAAYC,EAAAA,EAAAA,IAAiB3iE,EAAM,gBAGxE,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,yBAA0B,aAAc,kBACxC,eAAgB,gBAAiB,aAAc,cAlB/BZ,EA3Q2C,EAC7DE,OAAAA,EACA0B,KAAAA,EACAqC,SAAAA,EACAmgE,aAAAA,EACAF,iBAAAA,EACAG,cAAAA,EACAG,YAAAA,EACAxtC,eAAAA,EACAytC,uBAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAC,aAAAA,EACAC,cAAAA,EACAtB,gBAAAA,EACAp1C,SAAAA,EACAvlB,QAAAA,EACA6T,SAAAA,MAEA,MAAO+mD,EAAoBC,EAAkBC,IAAqBx/C,EAAAA,GAAAA,KAC5D4gD,EAAeljE,EAAKif,MACpBkkD,EAAenjE,EAAKq4B,UAAYr4B,EAAKq4B,SAASolB,OAAe,IAE5D5kB,EAAwBC,IAA6Bl2B,EAAAA,EAAAA,KAAS,IAC9Dqc,EAAOu+B,IAAY56C,EAAAA,EAAAA,IAASsgE,IAC5BzlB,EAAOC,IAAY96C,EAAAA,EAAAA,IAASugE,IAC5B9xD,EAAO2nB,IAAYp2B,EAAAA,EAAAA,OACnB4b,EAAOua,IAAYn2B,EAAAA,EAAAA,MACpBwgE,GAAY7vD,EAAAA,EAAAA,IAAkBvT,GAC9Bo5B,GAAuB3lB,EAAAA,EAAAA,GAAS2vD,GAAW,EAAO1vD,EAAAA,GAAAA,SAClDpU,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAU7T,IAEzBnE,EAAAA,EAAAA,KAAU,KACJR,IAAa4/D,EAAAA,GAAAA,WACfnpC,GAA0B,GAC1BC,OAAS73B,MAEV,CAACmB,IAEJ,MAAMghE,GAAsBhkE,EAAAA,EAAAA,KAAY,KACtC+1B,EAAekuC,EAAAA,GAAAA,mBACd,CAACluC,IAEEmuC,GAAwBlkE,EAAAA,EAAAA,KAAY,KACxC+1B,EAAekuC,EAAAA,GAAAA,cACd,CAACluC,IAEEouC,GAAyBnkE,EAAAA,EAAAA,KAAY,KACzC+1B,EAAekuC,EAAAA,GAAAA,oBACd,CAACluC,IAEEquC,GAA4BpkE,EAAAA,EAAAA,KAAY,KAC5C+1B,EAAekuC,EAAAA,GAAAA,sBACd,CAACluC,IAEEsuC,GAAiBrkE,EAAAA,EAAAA,KAAaovD,IAClCz1B,EAASy1B,GACT31B,GAA0B,KACzB,IAEGilB,GAAoB1+C,EAAAA,EAAAA,KAAaqE,IACrC85C,EAAS95C,EAAE0G,OAAOjE,OAClB2yB,GAA0B,KACzB,IAEG6qC,GAAoBtkE,EAAAA,EAAAA,KAAaqE,IACrCg6C,EAASh6C,EAAE0G,OAAOjE,OAClB2yB,GAA0B,KACzB,IAEG8qC,GAAoBvkE,EAAAA,EAAAA,KAAY,KACpC,MAAMwkE,EAAe5kD,EAAMwY,OACrBqsC,EAAermB,EAAMhmB,OAEtBosC,EAAa7lE,OAKlB8kE,EAAW,CACTxkE,OAAAA,EACA2gB,MAAO4kD,EACPpmB,MAAOqmB,EACPzyD,MAAAA,IARA0nB,EAASspC,MAUV,CAAC5kB,EAAOn/C,EAAQ+S,EAAO4N,EAAO6jD,IAE3BiB,GAAqB1kE,EAAAA,EAAAA,KAAY,KACrC+1B,EAAekuC,EAAAA,GAAAA,gBACd,CAACluC,IAEE4uC,GAAyB3kE,EAAAA,EAAAA,KAAY,KACzC,IAAKW,EAAKq4B,SACR,OAGF,MAAM,mBAAE4rC,GAAuBjkE,EAAKq4B,SAEpCwqC,EAAuB,CAAEvkE,OAAQ0B,EAAKlD,GAAIonE,WAAYD,MACrD,CAACjkE,EAAM6iE,IAEJsB,IAA0B/iE,EAAAA,EAAAA,KAAQ,KACtC,IAAKpB,EAAKokE,oBACR,OAAO,EAGT,IAAItzB,EAAa,CACf,eACA,YACA,aACA,YACA,aACA,cACA,eACA10B,QACCtc,IAASE,EAAKokE,oBAAqBtkE,KACpC9B,OAEF,MAAM,aAAEqmE,EAAF,SAAgBC,GAAatkE,EAAKokE,oBAOxC,OAJKC,GAAiBC,IACpBxzB,GAAc,GAGTA,IACN,CAAC9wC,IAEEukE,GAAevkE,EAAKq4B,UAAYr4B,EAAKq4B,SAASmsC,cAAgBxkE,EAAKq4B,SAASmsC,aAAaxmE,QAAW,EAEpGymE,IAAoBplE,EAAAA,EAAAA,KAAY,KAChCmjE,EACFO,EAAW,CAAEzkE,OAAQ0B,EAAKlD,KAChBkD,EAAK0iE,UAGfO,EAAc,CAAE3kE,OAAQ0B,EAAKlD,KAF7BkmE,EAAa,CAAE1kE,OAAQ0B,EAAKlD,KAI9BglE,IACAH,IACAp1C,EAAS,CAAEzvB,QAAIoE,MACd,CACDshE,EAAcxiE,EAAK0iE,UAAW1iE,EAAKlD,GACnCglE,EAAmBH,EAAiBqB,EAAcC,EAAeF,EAAYx2C,IAG/E,GAAIvsB,EAAK0mD,aACP,OAGF,MAAMt1B,GAAY/uB,IAAa4/D,EAAAA,GAAAA,WAE/B,OACE,0BAAKtiE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACs6B,GAAA,EAAD,CACEb,qBAAsBA,EACtBltB,SAAUw3D,EACVz3D,UAAWw2D,IAEb,mBAACllD,GAAA,EAAD,CACEzgB,GAAG,cACH8rB,MAAOtpB,EAAK,aACZ4M,SAAU6xC,EACV53C,MAAO8Y,EACPT,MAAOA,IAAU6jD,GAAoB7jD,OAAQtd,EAC7C+K,UAAWw2D,IAEb,mBAACllD,GAAA,EAAD,CACEzgB,GAAG,cACH6C,UAAU,OACVipB,MAAOtpB,EAAK,0BACZ4M,SAAUy3D,EACVx9D,MAAOs3C,EACPxxC,UAAWw2D,IAEZziE,EAAK0iE,WACJ,mBAACzkD,GAAA,EAAD,CAAUjc,KAAK,OAAOu6B,WAAS,EAAC38B,QAASyjE,GACvC,2BAAM1jE,UAAU,SAASL,EAAK,cAC9B,2BAAMK,UAAU,YAAYK,EAAK+vB,SAAWzwB,EAAK,cAAgBA,EAAK,iBAGzEgjE,GACC,mBAACrkD,GAAA,EAAD,CACEjc,KAAK,UACLu6B,WAAS,EACT38B,QAAS2jE,GAET,2BAAM5jE,UAAU,SAASL,EAAK,kBAC9B,2BAAMK,UAAU,YAAYL,EAAK,sBAGrC,mBAAC2e,GAAA,EAAD,CACEjc,KAAK,cACLu6B,WAAS,EACT38B,QAAS4jE,EACTv3D,UAAW22D,GAEX,2BAAMjjE,UAAU,SAASL,EAAK,uBAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5BikE,GADH,IA5MoB,IAgNtB,mBAAClmD,GAAA,EAAD,CACEjc,KAAK,QACLu6B,WAAS,EACT38B,QAAS6jE,GAET,2BAAM9jE,UAAU,SAASL,EAAK,0BAC9B,2BAAMK,UAAU,aAAY+kE,EAAAA,GAAAA,IAAcH,OAG9C,0BAAK5kE,UAAU,WACb,mBAACse,GAAA,EAAD,CAAUjc,KAAK,QAAQu6B,WAAS,EAAC38B,QAASmkE,GACxC,2BAAMpkE,UAAU,SAASL,EAAK,iBAC9B,2BAAMK,UAAU,aAAY+kE,EAAAA,GAAAA,IAAc1kE,EAAKs0C,gBAGhDt0C,EAAKq4B,UACJ,0BAAK14B,UAAU,gCACb,mBAAC6gC,GAAA,EAAD,CACEC,SAAUzgC,EAAKq4B,SAAS4rC,mBACxBr7C,MAAOtpB,EAAK,eACZ4M,SAAU83D,EACV/3D,UAAW22D,MAKnB,0BAAKjjE,UAAU,WACb,mBAACse,GAAA,EAAD,CAAUjc,KAAK,SAASqE,QAAM,EAACkkB,aAAW,EAAC3qB,QAASiiE,GACjDviE,EAAK,iBAIZ,mBAAC66B,GAAA,EAAD,CACE5uB,QAASstB,EACTj5B,QAASgkE,EACT33D,SAAUmlB,GACV1vB,UAAWpC,EAAK,SAEf8xB,GACC,mBAACzhB,EAAA,EAAD,CAASlO,MAAM,UAEf,wBAAG9B,UAAU,gBAGjB,mBAACwgB,GAAA,EAAD,CACE7e,OAAQsgE,EACR56D,QAAS86D,EACTjsD,WAAW1V,EAAAA,EAAAA,GACTqiE,IAAiBxiE,EAAK0iE,UAClBpjE,EAAK,2BACLA,EAAK,oCAAqCU,EAAKif,OACnD,CAAC,KAAM,oBAETmB,aAAcoiD,IAAiBxiE,EAAK0iE,UAAYpjE,EAAK,cAAgBA,EAAK,qBAC1E+gB,eAAgBokD,GAChBvuC,sBAAoB,SCjB5B,IAAezvB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAGF,CAAE0B,MAFIpB,EAAAA,EAAAA,IAAWP,EAAQC,GAEjBqd,cAAetd,EAAOsd,kBAEvC,CAAC5c,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mCANpCZ,EAjPsD,EACxEg3B,eAAAA,EACAuvC,mBAAAA,EACA3kE,KAAAA,EACA2b,cAAAA,EACAipD,8BAAAA,EACA59D,QAAAA,EACA6T,SAAAA,MAEA,MAAOgqD,EAAaC,IAAkBliE,EAAAA,EAAAA,IAA8B,KAC7DmiE,EAAuBC,IAA4BpiE,EAAAA,EAAAA,KAAS,IAC5DwuB,EAAWsvC,IAAgB99D,EAAAA,EAAAA,KAAS,GACrCtD,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAU7T,GAEzB,MAAMi+D,GAA0B5lE,EAAAA,EAAAA,KAAY,KAC1C+1B,EAAekuC,EAAAA,GAAAA,qBACd,CAACluC,IAEE8vC,GAA0B7lE,EAAAA,EAAAA,KAAY,KAC1C+1B,EAAekuC,EAAAA,GAAAA,8BACd,CAACluC,IAEE+vC,GAA6B9lE,EAAAA,EAAAA,KAAa6sD,IAC9CyY,EAAmBzY,EAAO9tC,OAAQ8tC,EAAOkZ,mBAAqBzpD,GAC9DyZ,EAAekuC,EAAAA,GAAAA,wBACd,CAAC3nD,EAAegpD,EAAoBvvC,KAEvCvyB,EAAAA,EAAAA,KAAU,KACRiiE,EAAgB9kE,GAAQA,EAAKokE,qBAAwB,IACrDY,GAAyB,GACzB1/D,YAAW,KACTo7D,GAAa,KA1D0B,OA4DxC,CAAC1gE,IAEJ,MAAMqlE,GAAyBhmE,EAAAA,EAAAA,KAAaqE,IAC1C,MAAM,KAAE2X,GAAS3X,EAAE0G,OAEnB,SAASk7D,EAA0Bn/D,GACjC,OAAOA,QAAQjF,EAGjB4jE,GAAgBl9B,IAAD,IACVA,EACH,CAACvsB,GAAOiqD,EAA0B19B,EAAEvsB,OACvB,iBAATA,GAA2B,CAC7BipD,SAAUgB,EAA0B19B,EAAEvsB,SAG1C2pD,GAAyB,KACxB,IAEGO,GAAwBlmE,EAAAA,EAAAA,KAAY,KACnCW,IAIL0gE,GAAa,GACbkE,EAA8B,CAAEtmE,OAAQ0B,EAAKlD,GAAI0oE,aAAcX,OAC9D,CAAC7kE,EAAM6kE,EAAaD,IAEjBa,GAAoBrkE,EAAAA,EAAAA,KAAQ,IAC3BpB,GAASA,EAAKq4B,UAAar4B,EAAKq4B,SAASqtC,cAIvC1lE,EAAKq4B,SAASqtC,cAAc1nE,OAH1B,GAIR,CAACgC,IAEE2lE,GAAmBvkE,EAAAA,EAAAA,KAAQ,IAC1BpB,GAASA,EAAKq4B,UAAar4B,EAAKq4B,SAASutC,QAIvC5lE,EAAKq4B,SAASutC,QAAQxpD,QAAO,EAAGopD,aAAAA,OAAqBA,IAHnD,IAIR,CAACxlE,IAEE6lE,GAAsBxmE,EAAAA,EAAAA,KAAa6sD,IACvC,MAAM,aAAEsZ,GAAiBtZ,EACzB,IAAKsZ,IAAiBxlE,EACpB,OAGF,MAAM,oBAAEokE,GAAwBpkE,EAEhC,OAAO1C,OAAOi2B,KAAKiyC,GAAcpxB,QAAO,CAACC,EAAQv0C,KAC/C,IACG0lE,EAAa1lE,IACVskE,GAAuBA,EAAoBtkE,IACpC,eAARA,GAAgC,iBAARA,GAAkC,cAARA,EAErD,OAAOu0C,EAGT,MAAMyxB,EAvHZ,SAAqChmE,GACnC,OAAQA,GACN,IAAK,eACH,MAAO,yBACT,IAAK,YACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,aACH,MAAO,+BACT,IAAK,YACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,cACH,MAAO,8BACT,IAAK,cACH,MAAO,8BACT,QACE,QAoGgBimE,CAA4BjmE,GAE5C,IAAKgmE,EACH,OAAOzxB,EAGT,MAAM2xB,EAAmB1mE,EAAKwmE,GAE9B,MAAQ,GAAEzxB,IAAUA,EAAOr2C,OAA6B,KAAIgoE,IAAxBA,MACnC,MACF,CAAChmE,EAAMV,IAEV,OACE,0BAAKK,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,yBAAIA,UAAU,kBAAkBO,IAAI,QAAQZ,EAAK,6BAEjD,0BAAKK,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,eACLolB,SAAUokC,EAAYoB,aACtBr9C,MAAOtpB,EAAK,wBACZ4mE,UAAQ,EACRh6D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,YACLolB,SAAUokC,EAAYsB,UACtBv9C,MAAOtpB,EAAK,6BACZ4mE,UAAQ,EACRh6D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,eACLolB,SAAUokC,EAAYR,eAAiBQ,EAAYP,SACnD17C,MAAOtpB,EAAK,gCACZ4mE,UAAQ,EACRh6D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,YACLolB,SAAUokC,EAAYuB,UACtBx9C,MAAOtpB,EAAK,6BACZ4mE,UAAQ,EACRh6D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,aACLolB,SAAUokC,EAAYwB,WACtBz9C,MAAOtpB,EAAK,8BACZ4mE,UAAQ,EACRh6D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,cACLolB,SAAUokC,EAAYyB,YACtB19C,MAAOtpB,EAAK,+BACZ4mE,UAAQ,EACRh6D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,cACLolB,SAAUokC,EAAY0B,YACtB39C,MAAOtpB,EAAK,+BACZ4mE,UAAQ,EACRh6D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,aACLolB,SAAUokC,EAAY2B,WACtB59C,MAAOtpB,EAAK,8BACZ4mE,UAAQ,EACRh6D,SAAUm5D,MAKhB,0BAAK1lE,UAAU,WACb,mBAACse,GAAA,EAAD,CACEjc,KAAK,cACLu6B,WAAS,EACTD,QAAM,EACN18B,QAASqlE,GAET,2BAAMtlE,UAAU,SAASL,EAAK,wBAC9B,2BAAMK,UAAU,YAAY8lE,KAIhC,0BAAK9lE,UAAU,WACb,yBAAIA,UAAU,kBAAkBO,IAAI,QAAQZ,EAAK,sBAEjD,mBAAC2e,GAAA,EAAD,CACEjc,KAAK,WACLpC,QAASslE,GAER5lE,EAAK,wBAGPqmE,EAAiB3nD,KAAKkuC,GACrB,mBAACjuC,GAAA,EAAD,CACEne,IAAKosD,EAAO9tC,OACZze,UAAU,wCACVC,QAAS,IAAMulE,EAA2BjZ,IAE1C,mBAAChuC,GAAA,EAAD,CACEE,OAAQ8tC,EAAO9tC,OACfD,OAAQ0nD,EAAoB3Z,UAOtC,mBAAC/xB,GAAA,EAAD,CACE5uB,QAASw5D,EACTnlE,QAAS2lE,EACT7jE,UAAWpC,EAAK,QAChB2M,SAAUmlB,GAETA,EACC,mBAACzhB,EAAA,EAAD,CAASlO,MAAM,UAEf,wBAAG9B,UAAU,qBC9LvB,IAAe8G,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxBid,KAAMyQ,GAAc3tB,EAAO4tB,MAEnC,MAAO,CAAEjsB,KAAAA,EAAMgsB,UAAAA,MAEjB,CAACjtB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kCAPpCZ,EA1EuD,EACzE4B,KAAAA,EACAgsB,UAAAA,EACAy6C,6BAAAA,EACAz/D,QAAAA,EACA6T,SAAAA,MAEA,MAAMvb,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAU7T,GAEzB,MAAM0/D,GAAiBtlE,EAAAA,EAAAA,KAAQ,IACxBpB,GAASA,EAAKq4B,UAAar4B,EAAKq4B,SAASqtC,cAIvC1lE,EAAKq4B,SAASqtC,cAHZ,IAIR,CAAC1lE,IAEE2mE,GAAetnE,EAAAA,EAAAA,KAAa6sD,IAChC,IAAKA,EAAO0a,eACV,OAGF,MAAMC,EAAe76C,EAAUkgC,EAAO0a,gBACtC,OAAKC,EAIEvnE,EAAK,iBAAiBwwB,EAAAA,EAAAA,IAAgB+2C,SAJ7C,IAKC,CAACvnE,EAAM0sB,IAEJ86C,GAAoBznE,EAAAA,EAAAA,KAAa6sD,IACrC,GAAKlsD,EAIL,MAAO,CAAC,CACNif,MAAO3f,EAAK,WACZ0C,KAAM,SACNuoB,aAAa,EACburB,QAAS,IAAM2wB,EAA6B,CAC1CnoE,OAAQ0B,EAAKlD,GACbshB,OAAQ8tC,EAAO9tC,OACfonD,aAAc,SAGjB,CAAClmE,EAAMU,EAAMymE,IAEhB,OACE,0BAAK9mE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACjD,wBAAGvB,UAAU,cAAcL,EAAK,oBAE/BonE,EAAe1oD,KAAKkuC,GACnB,mBAACjuC,GAAA,EAAD,CACEne,IAAKosD,EAAO9tC,OACZze,UAAU,sBACV0G,QAAM,EACN+kB,eAAgB07C,EAAkB5a,IAElC,mBAAChuC,GAAA,EAAD,CACEE,OAAQ8tC,EAAO9tC,OACfD,OAAQwoD,EAAaza,eChD/B6a,GAAsB,+BAiN5B,IAAetgE,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,SAAE+D,GAAahE,EAAOkjE,WAG5B,MAAO,CACLvhE,KAAAA,EACAqC,SAAAA,EACA2kE,kBALwBn/D,QAAQ7H,GAAQA,EAAKgnE,mBAM7CvE,eAAeE,EAAAA,EAAAA,IAAiB3iE,EAAM,kBAG1C,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,mBAAoB,aAAc,kBAAmB,eAAgB,gBAAiB,cAdtEZ,EA/M6C,EAC/DE,OAAAA,EACA0B,KAAAA,EACAqC,SAAAA,EACA2kE,kBAAAA,EACAvE,cAAAA,EACArtC,eAAAA,EACA0tC,WAAAA,EACAmE,iBAAAA,EACAtF,gBAAAA,EACAqB,aAAAA,EACAC,cAAAA,EACA12C,SAAAA,EACAvlB,QAAAA,EACA6T,SAAAA,MAEA,MAAMqoD,EAAeljE,GAAQA,EAAKif,OAAe,GAC3CkkD,EAAenjE,GAAQA,EAAKq4B,UAAYr4B,EAAKq4B,SAASolB,OAAe,GACrEypB,EAAgBlnE,GAAQA,EAAKq4B,UAAYr4B,EAAKq4B,SAASkqC,cAEtDX,EAAoBC,EAAkBC,IAAqBx/C,EAAAA,GAAAA,MAC3DuW,EAAwBC,IAA6Bl2B,EAAAA,EAAAA,KAAS,IAC9Dqc,EAAOu+B,IAAY56C,EAAAA,EAAAA,IAASsgE,IAC5BzlB,EAAOC,IAAY96C,EAAAA,EAAAA,IAASugE,IAC5B9xD,EAAO2nB,IAAYp2B,EAAAA,EAAAA,OACnB4b,EAAOua,IAAYn2B,EAAAA,EAAAA,MACpBwgE,EAAYpjE,IAAQuT,EAAAA,EAAAA,IAAkBvT,GACtCo5B,GAAuB3lB,EAAAA,EAAAA,GAAS2vD,GAAW,EAAO1vD,EAAAA,GAAAA,SAClDpU,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAU7T,IAEzBnE,EAAAA,EAAAA,KAAU,KACJR,IAAa4/D,EAAAA,GAAAA,WACfnpC,GAA0B,GAC1BC,OAAS73B,MAEV,CAACmB,IAEJ,MAAMkiE,EAAevkE,GAAQA,EAAKq4B,UAAYr4B,EAAKq4B,SAASmsC,cAAgBxkE,EAAKq4B,SAASmsC,aAAaxmE,QAAW,EAE5GqlE,GAAsBhkE,EAAAA,EAAAA,KAAY,KACtC+1B,EAAekuC,EAAAA,GAAAA,mBACd,CAACluC,IAEEmuC,GAAwBlkE,EAAAA,EAAAA,KAAY,KACxC+1B,EAAekuC,EAAAA,GAAAA,cACd,CAACluC,IAEEquC,GAA4BpkE,EAAAA,EAAAA,KAAY,KAC5C+1B,EAAekuC,EAAAA,GAAAA,sBACd,CAACluC,IAEEsuC,GAAiBrkE,EAAAA,EAAAA,KAAaovD,IAClCz1B,EAASy1B,GACT31B,GAA0B,KACzB,IAEGilB,GAAoB1+C,EAAAA,EAAAA,KAAaqE,IACrC85C,EAAS95C,EAAE0G,OAAOjE,OAClB2yB,GAA0B,KACzB,IAEG6qC,GAAoBtkE,EAAAA,EAAAA,KAAaqE,IACrCg6C,EAASh6C,EAAE0G,OAAOjE,OAClB2yB,GAA0B,KACzB,IAEGquC,GAAsB9nE,EAAAA,EAAAA,KAAY,KACtC,MAAMwkE,EAAe5kD,EAAMwY,OACrBqsC,EAAermB,EAAMhmB,OAEtBosC,EAAa7lE,OAKlB8kE,EAAW,CACTxkE,OAAAA,EACA2gB,MAAO4kD,EACPpmB,MAAOqmB,EACPzyD,MAAAA,IARA0nB,EAASguC,MAUV,CAACtpB,EAAOn/C,EAAQ+S,EAAO4N,EAAO6jD,IAE3BsE,GAAyB/nE,EAAAA,EAAAA,KAAY,KACzC4nE,EAAiB,CAAE3oE,OAAAA,EAAQ4lE,WAAY8C,MACtC,CAAC1oE,EAAQ0oE,EAAmBC,IAEzBI,GAAyBhoE,EAAAA,EAAAA,KAAY,KACzC+1B,EAAekuC,EAAAA,GAAAA,sBACd,CAACluC,IAEEkyC,GAAsBjoE,EAAAA,EAAAA,KAAY,KAClCW,EAAK0iE,UACPO,EAAc,CAAE3kE,OAAQ0B,EAAKlD,KAE7BkmE,EAAa,CAAE1kE,OAAQ0B,EAAKlD,KAG9BglE,IACAH,IACAp1C,EAAS,CAAEzvB,QAAIoE,MACd,CAAClB,EAAK0iE,UAAW1iE,EAAKlD,GAAIglE,EAAmBH,EAAiBqB,EAAcC,EAAe12C,IAE9F,GAAIvsB,EAAK0mD,aACP,OAGF,MAAMt1B,EAAY/uB,IAAa4/D,EAAAA,GAAAA,WAE/B,OACE,0BAAKtiE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACs6B,GAAA,EAAD,CACEb,qBAAsBA,EACtBltB,SAAUw3D,EACVz3D,UAAWw2D,IAEb,mBAACllD,GAAA,EAAD,CACEzgB,GAAG,gBACH8rB,MAAOtpB,EAAK,oBACZ4M,SAAU6xC,EACV53C,MAAO8Y,EACPT,MAAOA,IAAUuoD,GAAsBvoD,OAAQtd,EAC/C+K,UAAWw2D,IAEb,mBAACllD,GAAA,EAAD,CACEzgB,GAAG,gBACH6C,UAAU,OACVipB,MAAOtpB,EAAK,0BACZ4M,SAAUy3D,EACVx9D,MAAOs3C,EACPxxC,UAAWw2D,IAEZziE,EAAK0iE,WACJ,mBAACzkD,GAAA,EAAD,CAAUjc,KAAK,OAAOu6B,WAAS,EAAC38B,QAASyjE,GACvC,2BAAM1jE,UAAU,SAASL,EAAK,gBAC9B,2BAAMK,UAAU,YAAYK,EAAK+vB,SAAWzwB,EAAK,cAAgBA,EAAK,iBAG1E,mBAAC2e,GAAA,EAAD,CACEjc,KAAK,UACLu6B,WAAS,EACT38B,QAAS2jE,EACTt3D,UAAWw2D,GAEX,2BAAM9iE,UAAU,SAASL,EAAK,eAC9B,2BAAMK,UAAU,YAA4BL,EAAhB4nE,EAAqB,mBAA2B,SAE9E,mBAACjpD,GAAA,EAAD,CACEjc,KAAK,QACLu6B,WAAS,EACT38B,QAAS6jE,GAET,2BAAM9jE,UAAU,SAASL,EAAK,0BAC9B,2BAAMK,UAAU,YAAY4kE,IAE9B,0BAAK5kE,UAAU,gCACb,mBAAC6gC,GAAA,EAAD,CACEC,QAASumC,EACTp+C,MAAOtpB,EAAK,uBACZ4M,SAAUk7D,MAIhB,0BAAKznE,UAAU,WACb,mBAACse,GAAA,EAAD,CACEjc,KAAK,QACLu6B,WAAS,EACT38B,QAASynE,GAET,2BAAM1nE,UAAU,QAAQO,IAAI,QAAQZ,EAAK,uBACzC,2BAAMK,UAAU,WAAWO,IAAI,QAAQZ,EAAK,cAAeU,EAAKs0C,aAAe,QAGnF,0BAAK30C,UAAU,WACb,mBAACse,GAAA,EAAD,CAAUjc,KAAK,SAASqE,QAAM,EAACkkB,aAAW,EAAC3qB,QAASiiE,GACjD7hE,EAAK0iE,UAAYpjE,EAAK,iBAAmBA,EAAK,mBAIrD,mBAAC66B,GAAA,EAAD,CACE5uB,QAASstB,EACTj5B,QAASunE,EACTl7D,SAAUmlB,EACV1vB,UAAWpC,EAAK,SAEf8xB,EACC,mBAACzhB,EAAA,EAAD,CAASlO,MAAM,UAEf,wBAAG9B,UAAU,gBAGjB,mBAACwgB,GAAA,EAAD,CACE7e,OAAQsgE,EACR56D,QAAS86D,EACTv/D,KAAMvC,EAAK0iE,UAAYpjE,EAAK,sBAAwBA,EAAK,qBACzD8gB,aAAcpgB,EAAK0iE,UAAYpjE,EAAK,iBAAmBA,EAAK,gBAC5D+gB,eAAgBinD,EAChBpxC,sBAAoB,S,aC7M5B,MA4HA,IAAezvB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,oBAAE04B,IAAwBuwC,EAAAA,EAAAA,IAAiBlpE,EAAQC,GAEzD,MAAO,CACL0B,KAAAA,EACAmf,WAAW8H,EAAAA,EAAAA,IAAcjnB,GACzBqC,SAAUhE,EAAOkjE,WAAWl/D,SAC5B20B,oBAAAA,MAGJ,CAACj4B,EAAWC,KAAYC,EAAAA,EAAAA,IAAKD,EAAS,CACpC,kBAAmB,mBAAoB,uBAbvBZ,EA5HqD,EACvE4B,KAAAA,EACAgH,QAAAA,EACA6T,SAAAA,EACAsE,UAAAA,EACA9c,SAAAA,EACA20B,oBAAAA,EACAwwC,gBAAAA,EACAC,iBAAAA,EACAC,kBAAAA,MAEA,MAAMpV,EAAWzqD,QAAQ7H,EAAK+vB,UACxB43C,EAAc3nE,EAAKq4B,UAAYr4B,EAAKq4B,SAASuvC,YAE5CC,EAAaC,IAAkBllE,EAAAA,EAAAA,IAAsB0vD,EAAW,SAAW,YAC3EviC,EAAUmH,IAAet0B,EAAAA,EAAAA,OACzBmlE,EAA2BC,EAAyBC,IAA4B3lD,EAAAA,GAAAA,KAEjF4lD,EAAYrgE,QACC,WAAhBggE,GAA4B93C,GAAYiH,GACrB,YAAhB6wC,GAA6BvV,IAGnCt3C,EAAAA,EAAAA,IAAeH,EAAU7T,IAEzBnE,EAAAA,EAAAA,KAAU,KACJglE,IAAgBF,GAClBD,MAED,CAACG,EAAaF,EAAaD,IAE9B,MAAMS,GAAqB9oE,EAAAA,EAAAA,KAAa8G,IACtC2hE,EAAe3hE,KACd,IAEGiiE,GAAa/oE,EAAAA,EAAAA,KAAY,KAC7BooE,EAAiB,CAAE13C,SAA0B,WAAhB83C,EAA2B93C,EAAW,OAClE,CAAC83C,EAAaJ,EAAkB13C,IAE7Bs4C,GAA0BhpE,EAAAA,EAAAA,KAAY,KAC1C4oE,IACAP,MACC,CAACO,EAA0BP,IAExBpoE,GAAOC,EAAAA,EAAAA,KACP+oE,EAAcnpD,EAAY,UAAY,OACtCopD,EAAcppD,EAAY,UAAY,QAEtC2J,EAAU,CACd,CAAE3iB,MAAO,UAAWyiB,MAAOtpB,EAAM,GAAEgpE,YAAuBljC,SAAU9lC,EAAM,GAAEgpE,iBAC5E,CAAEniE,MAAO,SAAUyiB,MAAOtpB,EAAM,GAAEgpE,WAAsBljC,SAAU9lC,EAAM,GAAEgpE,iBAGtEl3C,EAAY/uB,IAAa4/D,EAAAA,GAAAA,WAE/B,OACE,0BAAKtiE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACjD,yBAAIvB,UAAU,mBAAmBL,EAAM,GAAEipE,UACzC,mBAAC1/C,GAAA,EAAD,CACEE,SAAU8+C,EACVxsD,KAAK,eACLyN,QAASA,EACT5c,SAAUi8D,KAGG,YAAhBN,EACC,0BAAKloE,UAAU,UAAUO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAChDymE,EACC,sCACE,mBAACa,GAAA,EAAD,CAAU9hE,IAAKihE,EAAahoE,UAAU,aAAa4C,KAAMolE,IACzD,wBAAGhoE,UAAU,eAAeO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACnD5B,EAAM,GAAEgpE,qBAGX,mBAACrqD,GAAA,EAAD,CAAUjc,KAAK,SAASqE,QAAM,EAACkkB,aAAW,EAAC3qB,QAASooE,GACjD1oE,EAAK,eAER,mBAAC6gB,GAAA,EAAD,CACE7e,OAAQymE,EACR/gE,QAASihE,EACT1lE,KAAMjD,EAAK,eACX8gB,aAAc9gB,EAAK,gBACnB+gB,eAAgBgoD,EAChBnyC,sBAAoB,KAIxB,mBAAC5X,GAAA,EAAD,OAIJ,0BAAK3e,UAAU,qBACb,mBAACu6B,GAAD,CACEnD,QAAM,EACND,gBAAiB92B,EAAK+vB,SACtBqB,UAAWA,EACX4F,oBAAqBA,EACrBC,cAAeuwC,EACft7D,SAAUgrB,IAEZ,wBAAGv3B,UAAU,eAAeO,IAAI,QAC7BZ,EAAM,GAAEipE,sCAKjB,mBAACpuC,GAAA,EAAD,CACE5uB,QAAS28D,EACTj8D,SAAUmlB,EACV1vB,UAAWpC,EAAK,QAChBM,QAASwoE,GAERh3C,EACC,mBAACzhB,EAAA,EAAD,CAASlO,MAAM,UAEf,wBAAG9B,UAAU,qBCkGvB,IAAe8G,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,iBAAEmqE,EAAkBltD,KAAMy6B,GAAe33C,EAAOid,MAKtD,MAAO,CACLtb,KAAAA,EACAg2C,WAAAA,EACAyyB,iBAAAA,EACAC,WARiB1oE,GAAQA,EAAKq4B,UAAYr4B,EAAKq4B,SAASkqC,cACtD3jE,EAAAA,EAAAA,IAAWP,EAAQ2B,EAAKq4B,SAASkqC,mBACjCrhE,EAOFie,UAAWnf,IAAQinB,EAAAA,EAAAA,IAAcjnB,OAGrC,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,0BAA2B,sBAAuB,2BAjBlCZ,EAxNgD,EAClE4B,KAAAA,EACAgH,QAAAA,EACA6T,SAAAA,EACAvc,OAAAA,EACA03C,WAAAA,EACA0yB,WAAAA,EACAD,iBAAAA,EACAtpD,UAAAA,EACAiW,eAAAA,EACAuzC,wBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,MAEA,MAAOC,EAAeC,IAAoBnmE,EAAAA,EAAAA,OACnCs4B,EAAeC,IAAoBv4B,EAAAA,EAAAA,OACnCw4B,EAAmBC,IAAwBz4B,EAAAA,EAAAA,KAAS,GACrD04B,GAAsBj8B,EAAAA,EAAAA,KAAY,IAAMg8B,GAAqB,IAAO,KACnE2tC,EAAgCC,EAA8BC,IAAiC5mD,EAAAA,GAAAA,MAC/F6mD,EAA8BC,EAA4BC,IAA+B/mD,EAAAA,GAAAA,KAC1FhjB,GAAOC,EAAAA,EAAAA,KACPgjE,EAAemG,GAAcA,EAAW5rE,IAE9Cke,EAAAA,EAAAA,IAAeH,EAAU7T,IAEzBnE,EAAAA,EAAAA,KAAU,KACR8lE,MACC,CAACA,KAEJ9lE,EAAAA,EAAAA,KAAU,KACHq4B,IACHK,EAAAA,GAAAA,GAAiB,oBAAoBC,KAAKL,KAE3C,CAACD,IAEJ,MAAMouC,GAA4BjqE,EAAAA,EAAAA,KAAY,KAC5C6pE,IACAL,EAAsB,CAAEU,UAAWpqD,EAAY7gB,EAASikE,IACnDpjD,GACHiW,EAAekuC,EAAAA,GAAAA,WAEhB,CAAC4F,EAA+BL,EAAuB1pD,EAAW7gB,EAAQikE,EAAcntC,IAErFo0C,GAA0BnqE,EAAAA,EAAAA,KAAY,KAC1CgqE,IACAT,EAAoB,CAAEW,UAAWjrE,EAAQA,OAAQwqE,MAChD,CAACO,EAA6BT,EAAqBtqE,EAAQwqE,IAkJ9D,OACE,0BAAKnpE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,0BAAKA,UAAU,gBACZu7B,GACC,mBAACc,GAAA,EAAD,CACEl/B,GAAG,wBACHiD,KAAM0pE,EAAAA,GACNvuC,cAAeA,EACfxxB,KAAM0xB,EACNc,QAAM,EACNC,OAAQb,KAIbotC,GA3FL,8BACE,mBAACzqD,GAAA,EAAD,CACEte,UAAU,sBACVu/B,UAAQ,GAER,mBAAC7gB,GAAA,EAAD,CAAe/f,OAAQoqE,EAAY5rE,MAErC,mBAACmhB,GAAA,EAAD,CACEjc,KAAK,SACLqE,QAAM,EACNkkB,aAAW,EACX3qB,QAASqpE,GAER3pE,EAAK6f,EAAY,wBAA0B,4BAE9C,mBAACgB,GAAA,EAAD,CACE7e,OAAQ0nE,EACRhiE,QAASkiE,EACTvrD,OAhFJ,0BAAKhe,UAAU,gBACb,mBAACE,EAAA,EAAD,CACEE,KAAK,OACLC,KAAM0oE,IAER,0BAAK/oE,UAAU,eACZL,EAAK6f,EAAY,wBAA0B,6BA2E5CtJ,WAAW1V,EAAAA,EAAAA,GACTb,EAAK6f,EAAY,+BAAiC,6BAA8BupD,EAAYzpD,OAC5F,CAAC,KAAM,oBAETmB,aAAc9gB,EAAK6f,EAAY,wBAA0B,2BACzDkB,eAAgBipD,EAChBpzC,sBAAoB,MAmElBwyC,GA3DN,8BACE,wBAAG/oE,UAAU,eAAeO,IAAI,QAAQZ,EAAK,0BAE7C,0BAAKoqE,eAAa,GAChB,mBAACzrD,GAAA,EAAD,CACEne,IAAI,eACJkC,KAAK,QACLqE,QAAM,EACNsjE,cAAe,EACfhqE,UAAU,mBAETL,EAAK,0BAEPmpE,EACCA,EAAiBzqD,KAAI,CAAClhB,EAAI8mB,IACxB,mBAAC3F,GAAA,EAAD,CACEne,IAAKhD,EACL6sE,cAAe/lD,EAAI,EACnBjkB,UAAU,kCACVC,QAAS,KAxHrBmpE,EAwH+CjsE,GAvH/CssE,MAyHY,mBAAC/qD,GAAA,EAAD,CAAe/f,OAAQxB,OAI3B,mBAAC4zB,GAAA,EAAD,CAAc5wB,IAAI,gBAAgB6pE,cAAe,EAAGpnE,KAAK,gCAG7D,wBAAG5C,UAAU,yBAAyBO,IAAI,QAAQZ,EAAK,2BACvD,mBAAC6gB,GAAA,EAAD,CACE7e,OAAQ6nE,EACRniE,QAASqiE,EACT1rD,OApHR,WACE,MAAMisD,EAAc5zB,EAAW8yB,GAE/B,GAAKc,EAIL,OACE,0BAAKjqE,UAAU,gBACb,mBAACE,EAAA,EAAD,CACEE,KAAK,OACLC,KAAM4pE,IAER,0BAAKjqE,UAAU,eACZL,EAAK,uCAsGEuqE,GACRh0D,UAjGR,WACE,MAAM+zD,EAAc5zB,EAAW8yB,GAE/B,GAAKc,EAIL,OAAIA,EAAYE,gBACP3pE,EAAAA,EAAAA,GACJ,yBAAwBypE,EAAY3qD,sCAAsCjf,EAAMif,WACjF,CAAC,KAAM,qBAQJ9e,EAAAA,EAAAA,GAEJ,yBAAwBypE,EAAY3qD,sCAAsCjf,EAAMif,kFACjF,CAAC,KAAM,oBA4EQ8qD,GACX3pD,aAAc9gB,EAAK,uBACnB+gB,eAAgBmpD,EAChBQ,mBAAiB,YCgC3B,IAAevjE,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,EAAQ2rE,wBAAAA,MACjB,MAAMjqE,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAGhC,MAAO,CAAE0B,KAAAA,EAAMkqE,sBAFelqE,EAAK0iE,WAAauH,OAIlD,CAAClrE,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kCAPpCZ,EA/N0D,EAC5E4B,KAAAA,EACAmqE,qBAAAA,EACA/0C,eAAAA,EACAqxC,6BAAAA,EACAyD,oBAAAA,EACAljE,QAAAA,EACA6T,SAAAA,MAEA,MAAOgqD,EAAaC,IAAkBliE,EAAAA,EAAAA,IAA8B,KAC7DmiE,EAAuBC,IAA4BpiE,EAAAA,EAAAA,KAAS,IAC5DwuB,EAAWsvC,IAAgB99D,EAAAA,EAAAA,KAAS,IACpCwnE,EAA6BC,EAA2BC,IAA8BhoD,EAAAA,GAAAA,KACvFhjB,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAU7T,GAEzB,MAAMujE,GAAqBnpE,EAAAA,EAAAA,KAAQ,KACjC,GAAKpB,GAASA,EAAKq4B,UAAar4B,EAAKq4B,SAASutC,QAI9C,OAAO5lE,EAAKq4B,SAASutC,QAAQvlC,MAAK,EAAGjiB,OAAAA,KAAaA,IAAW+rD,MAC5D,CAACnqE,EAAMmqE,KAEVtnE,EAAAA,EAAAA,KAAU,KACJ7C,GAAQA,EAAKq4B,UAAY8xC,IAAyBI,GACpDn1C,EAAekuC,EAAAA,GAAAA,oBAEhB,CAACtjE,EAAMo1B,EAAgBm1C,EAAoBJ,KAE9CtnE,EAAAA,EAAAA,KAAU,KACRiiE,EAAgByF,GAAsBA,EAAmB/E,cAAkBxlE,GAAQA,EAAKokE,qBAAwB,IAChHY,GAAyB,GACzBtE,GAAa,KACZ,CAAC1gE,EAAMuqE,IAEV,MAAMlF,GAAyBhmE,EAAAA,EAAAA,KAAaqE,IAC1C,MAAM,KAAE2X,GAAS3X,EAAE0G,OAEnB,SAASk7D,EAA0Bn/D,GACjC,OAAOA,QAAQjF,EAGjB4jE,GAAgBl9B,IAAD,IACVA,EACH,CAACvsB,GAAOiqD,EAA0B19B,EAAEvsB,OACvB,iBAATA,GAA2B,CAC7BipD,SAAUgB,EAA0B19B,EAAEvsB,SAG1C2pD,GAAyB,KACxB,IAEGO,GAAwBlmE,EAAAA,EAAAA,KAAY,KACnCW,GAASmqE,IAIdzJ,GAAa,GACb+F,EAA6B,CAC3BnoE,OAAQ0B,EAAKlD,GACbshB,OAAQ+rD,EACR3E,aAAcX,OAEf,CAAC7kE,EAAMmqE,EAAsBtF,EAAa4B,IAEvC+D,GAAqBnrE,EAAAA,EAAAA,KAAY,KAChCW,GAASmqE,GAId1D,EAA6B,CAC3BnoE,OAAQ0B,EAAKlD,GACbshB,OAAQ+rD,EACR3E,aAAc,CACZiF,cAAc,OAGjB,CAACzqE,EAAMmqE,EAAsB1D,IAE1BiE,GAAuBrrE,EAAAA,EAAAA,KAAaS,KACpCoqE,MAIClqE,IAASA,EAAKokE,sBAIZpkE,EAAKokE,oBAAoBtkE,IAC/B,CAACE,EAAMkqE,IAEV,GAAKK,EAIL,OACE,0BAAK5qE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACse,GAAA,EAAD,CAAUihB,UAAQ,EAACv/B,UAAU,uBAC3B,mBAACue,GAAA,EAAD,CAAiBE,OAAQmsD,EAAmBnsD,UAG9C,yBAAIze,UAAU,uBAAuBO,IAAI,QAAQZ,EAAK,0BAEtD,0BAAKK,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,eACLolB,SAAUokC,EAAYoB,aACtBr9C,MAAOtpB,EAAK,wBACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,gBAC/Bx+D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,YACLolB,SAAUokC,EAAYsB,UACtBv9C,MAAOtpB,EAAK,6BACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,aAC/Bx+D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,eACLolB,SAAUokC,EAAYR,eAAiBQ,EAAYP,SACnD17C,MAAOtpB,EAAK,gCACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,gBAC/Bx+D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,YACLolB,SAAUokC,EAAYuB,UACtBx9C,MAAOtpB,EAAK,6BACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,aAC/Bx+D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,aACLolB,SAAUokC,EAAYwB,WACtBz9C,MAAOtpB,EAAK,8BACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,cAC/Bx+D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,cACLolB,SAAUokC,EAAYyB,YACtB19C,MAAOtpB,EAAK,+BACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,eAC/Bx+D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,cACLolB,SAAUokC,EAAY0B,YACtB39C,MAAOtpB,EAAK,+BACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,eAC/Bx+D,SAAUm5D,KAGd,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,aACLolB,SAAUokC,EAAY2B,WACtB59C,MAAOtpB,EAAK,8BACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,cAC/Bx+D,SAAUm5D,OAKd6E,GACA,0BAAKvqE,UAAU,WACb,mBAACse,GAAA,EAAD,CAAUjc,KAAK,cAAcqE,QAAM,EAACkkB,aAAW,EAAC3qB,QAASyqE,GACtD/qE,EAAK,4BAMd,mBAAC66B,GAAA,EAAD,CACE5uB,QAASw5D,EACTnlE,QAAS2lE,EACT7jE,UAAWpC,EAAK,QAChB2M,SAAUmlB,GAETA,EACC,mBAACzhB,EAAA,EAAD,CAASlO,MAAM,UAEf,wBAAG9B,UAAU,gBAIjB,mBAACwgB,GAAA,EAAD,CACE7e,OAAQ8oE,EACRpjE,QAASsjE,EACT/nE,KAAK,oEACL6d,aAAa,SACbC,eAAgBmqD,EAChBt0C,sBAAoB,SCnI5B,IAAezvB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxBid,KAAMyQ,GAAc3tB,EAAO4tB,MAEnC,MAAO,CACLjsB,KAAAA,EACA2b,cAAetd,EAAOsd,cACtBwD,WAAW8H,EAAAA,EAAAA,IAAcjnB,GACzBgsB,UAAAA,KATc5tB,EA7FwC,EAC1D4B,KAAAA,EACAmf,UAAAA,EACAxD,cAAAA,EACAqQ,UAAAA,EACAoJ,eAAAA,EACAuvC,mBAAAA,EACA39D,QAAAA,EACA6T,SAAAA,MAEA,MAAMvb,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAU7T,GAMzB,MAAMw9D,GAAepjE,EAAAA,EAAAA,KAAQ,IACtBpB,EAAKq4B,UAAar4B,EAAKq4B,SAASmsC,aAI9BxkE,EAAKq4B,SAASmsC,aAAat0C,MAAK,CAACC,EAAGC,IACrCD,EAAEw6C,SACI,EACCv6C,EAAEu6C,QACJ,EAGF,IAVA,IAYR,CAAC3qE,IAEE4qE,GAAyBvrE,EAAAA,EAAAA,KAAa6sD,IAC1CyY,EAAmBzY,EAAO9tC,OAAQ8tC,EAAOkZ,mBAAqBzpD,GAC9DyZ,EAAekuC,EAAAA,GAAAA,mBACd,CAAC3nD,EAAegpD,EAAoBvvC,IAEjCy1C,GAAkBxrE,EAAAA,EAAAA,KAAa6sD,IACnC,GAAIA,EAAOye,QACT,OAAOrrE,EAAK,kBAGd,MAAMwrE,EAAiB5e,EAAOkZ,iBAAmBp5C,EAAUkgC,EAAOkZ,uBAAoBlkE,EAEtF,OAAI4pE,EACKxrE,EAAK,uBAAuBwwB,EAAAA,EAAAA,IAAgBg7C,IAG9CxrE,EAAK,kBACX,CAACA,EAAM0sB,IAEV,OACE,0BAAKrsB,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACse,GAAA,EAAD,CACEjc,KAAK,SACLu6B,WAAS,EACT38B,QA9CV,WACEw1B,EAAekuC,EAAAA,GAAAA,sBA+CP,2BAAM3jE,UAAU,SAASL,EAAK,aAC9B,2BAAMK,UAAU,YAAYL,EAAK6f,EAAY,4BAA8B,yBAI/E,0BAAKxf,UAAU,UAAUO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACjD,wBAAGvB,UAAU,aAAaO,IAAI,QAC3Bif,EACG,8DACA,6DAGLqlD,EAAaxmD,KAAKkuC,GACjB,mBAACjuC,GAAA,EAAD,CACEne,IAAKosD,EAAO9tC,OACZze,UAAU,sBACVC,QAAS,IAAMgrE,EAAuB1e,IAEtC,mBAAChuC,GAAA,EAAD,CACEE,OAAQ8tC,EAAO9tC,OACfD,OAAQ0sD,EAAgB3e,GACxB31B,eAAa,cCoC7B,IAAe9vB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAGF,CAAE0B,MAFIpB,EAAAA,EAAAA,IAAWP,EAAQC,MAFhBF,EA9HwC,EAAG4B,KAAAA,EAAMgH,QAAAA,EAAS6T,SAAAA,MAC5E,MAAMvb,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAU7T,GAEzB,MAAMw9D,GAAepjE,EAAAA,EAAAA,KAAQ,IACtBpB,GAASA,EAAKq4B,UAAar4B,EAAKq4B,SAASmsC,aAIvCxkE,EAAKq4B,SAASmsC,aAAat0C,MAAK,CAACC,EAAGC,IACrCD,EAAEw6C,SACI,EACCv6C,EAAEu6C,QACJ,EAGF,IAVA,IAYR,CAAC3qE,IAEE6qE,GAAkBxrE,EAAAA,EAAAA,KAAa6sD,GAC/BA,EAAOye,QACFrrE,EAAK,kBAGPA,EAAK,iBACX,CAACA,IAEJ,OACE,0BAAKK,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,0BAA0BO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACjE,yBAAIvB,UAAU,kBAAkBO,IAAI,QAApC,WAEA,0BAAKP,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,aACLolB,SAAS,EACT7X,MAAOtpB,EAAK,qBACZ4M,cAAUhL,KAGd,0BAAKvB,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,aACLolB,SAAS,EACT7X,MAAOtpB,EAAK,2BACZ4M,cAAUhL,KAGd,0BAAKvB,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,aACLolB,SAAS,EACT7X,MAAOtpB,EAAK,4BACZ4M,cAAUhL,KAGd,0BAAKvB,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,aACLolB,SAAS,EACT7X,MAAOtpB,EAAK,6BACZ4M,cAAUhL,KAGd,0BAAKvB,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,aACLolB,SAAS,EACT7X,MAAOtpB,EAAK,iCACZ4M,cAAUhL,KAGd,0BAAKvB,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,aACLolB,SAAS,EACT7X,MAAOtpB,EAAK,gCACZ4M,cAAUhL,KAGd,0BAAKvB,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,aACLolB,SAAS,EACT7X,MAAOtpB,EAAK,gCACZ4M,cAAUhL,MAKhB,0BAAKvB,UAAU,0BAA0BO,IAAKZ,EAAK4b,MAAQ,WAAQha,GACjE,yBAAIvB,UAAU,kBAAkBO,IAAI,QAAQZ,EAAK,6BAEjD,0BAAKK,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,aACLolB,SAAS,EACT7X,MAAOtpB,EAAK,qBACZ4M,cAAUhL,KAIbsjE,EAAaxmD,KAAKkuC,GACjB,mBAACjuC,GAAA,EAAD,CACEne,IAAKosD,EAAO9tC,OACZze,UAAU,uCACVC,aAASsB,EACTmF,QAAM,GAEN,mBAACm6B,GAAA,EAAD,CAAU5X,MAAM,GAAG6X,SAAS,IAC5B,mBAACviB,GAAA,EAAD,CACEE,OAAQ8tC,EAAO9tC,OACfD,OAAQ0sD,EAAgB3e,GACxB31B,eAAa,cCmM7B,IAAe9vB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,EAAQ2rE,wBAAAA,MACjB,MAAMjqE,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxBid,KAAMyQ,GAAc3tB,EAAO4tB,OAC7B,cAAEtQ,GAAkBtd,EAI1B,MAAO,CACL2B,KAAAA,EACAgsB,UAAAA,EACArQ,cAAAA,EACAwD,WAPgB8H,EAAAA,EAAAA,IAAcjnB,GAQ9BkqE,sBAP4BlqE,EAAK0iE,WAAauH,OAUlD,CAAClrE,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,qBAhBpCZ,EAlSsD,EACxE+rE,qBAAAA,EACA/0C,eAAAA,EACAp1B,KAAAA,EACAgsB,UAAAA,EACArQ,cAAAA,EACAwD,UAAAA,EACA+qD,oBAAAA,EACAa,gBAAAA,EACA/jE,QAAAA,EACA6T,SAAAA,MAEA,MAAOgqD,EAAaC,IAAkBliE,EAAAA,EAAAA,IAA6B,KAC5Dy8B,EAAW2rC,IAAgBpoE,EAAAA,EAAAA,KAAS,IACpCwuB,EAAWsvC,IAAgB99D,EAAAA,EAAAA,KAAS,IACpCqoE,EAAiCC,EAA+BC,IAAkC7oD,EAAAA,GAAAA,MAClG8oD,EAAaC,IAAkBzoE,EAAAA,EAAAA,IAAS,IACzCtD,GAAOC,EAAAA,EAAAA,MAEbyb,EAAAA,EAAAA,IAAeH,EAAU7T,GAEzB,MAAMujE,GAAqBnpE,EAAAA,EAAAA,KAAQ,KACjC,GAAKpB,EAAKq4B,UAAar4B,EAAKq4B,SAASmsC,aAIrC,OAAOxkE,EAAKq4B,SAASmsC,aAAankC,MAAK,EAAGjiB,OAAAA,KAAaA,IAAW+rD,MACjE,CAACnqE,EAAMmqE,KAEVtnE,EAAAA,EAAAA,KAAU,KACJ7C,GAAQA,EAAKq4B,UAAY8xC,IAAyBI,GACpDn1C,EAAekuC,EAAAA,GAAAA,sBAEhB,CAACtjE,EAAMo1B,EAAgBm1C,EAAoBJ,KAE9CtnE,EAAAA,EAAAA,KAAU,KACRiiE,EAAgByF,GAAsBA,EAAmBe,aAAgB,IACzED,GAAiBd,GAAsBA,EAAmBa,aAAgB,IAAIt4B,OAAO,EAvCzD,KAwC5Bk4B,GAAa,GACbtK,GAAa,KACZ,CAAC6J,IAEJ,MAAMlF,GAAyBhmE,EAAAA,EAAAA,KAAaqE,IAC1C,MAAM,KAAE2X,GAAS3X,EAAE0G,OAMnB06D,GAAgBl9B,IAAD,UACVA,EACH,CAACvsB,IANgClV,EAMCyhC,EAAEvsB,IAL7BlV,QAAQjF,IADjB,IAAmCiF,KAQnC6kE,GAAa,KACZ,IAEGzF,GAAwBlmE,EAAAA,EAAAA,KAAY,KACnC8qE,IAILzJ,GAAa,GACbqK,EAAgB,CACdzsE,OAAQ0B,EAAKlD,GACbshB,OAAQ+rD,EACRmB,YAAazG,EACbuG,YAAAA,OAED,CAACprE,EAAMmqE,EAAsBtF,EAAauG,EAAaL,IAEpDQ,GAAqBlsE,EAAAA,EAAAA,KAAY,KAChC8qE,IAILY,EAAgB,CACdzsE,OAAQ0B,EAAKlD,GACbshB,OAAQ+rD,EACRmB,YAAa,KAEfH,OACC,CAACnrE,EAAKlD,GAAIquE,EAAgChB,EAAsBY,IAE7DL,GAAuBrrE,EAAAA,EAAAA,KAAaS,MACpCqmB,EAAAA,EAAAA,IAAiBnmB,KAIjBkqE,GAAwBlqE,EAAKsrE,aAIzBtrE,EAAKsrE,YAAaxrE,KACzB,CAACE,EAAMkqE,IAEJsB,GAAepqE,EAAAA,EAAAA,KAAQ,KAC3B,IAAKmpE,EACH,OAGF,GAAIA,EAAmBI,QACrB,OAAOrrE,EAAK,kBAGd,MAAMwrE,EAAiBP,EAAmBnF,iBACtCp5C,EAAUu+C,EAAmBnF,uBAC7BlkE,EAEJ,OAAI4pE,EACKxrE,EAAK,uBAAuBwwB,EAAAA,EAAAA,IAAgBg7C,IAG9CxrE,EAAK,kBACX,CAACirE,EAAoBv+C,EAAW1sB,IAE7BmsE,GAA0BpsE,EAAAA,EAAAA,KAAaqE,IAC3C,MAAM,MAAEyC,GAAUzC,EAAE0G,OACpBihE,EAAellE,GACf6kE,GAAa,KACZ,IAEH,GAAKT,EAIL,OACE,0BAAK5qE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACse,GAAA,EAAD,CAAUihB,UAAQ,EAACv/B,UAAU,uBAC3B,mBAACue,GAAA,EAAD,CACEE,OAAQmsD,EAAmBnsD,OAC3BD,OAAQqtD,EACRj1C,eAAa,KAIjB,yBAAI52B,UAAU,uBAAuBO,IAAI,QAAQZ,EAAK,uBAEtD,0BAAKK,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,aACLolB,UAAWokC,EAAY2B,WACvB59C,MAAOtpB,EAAK6f,EAAY,6BAA+B,4BACvD+mD,UAAQ,EACRj6D,SAAUy+D,EAAqB,cAC/Bx+D,SAAUm5D,KAGblmD,GACC,0BAAKxf,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,eACLolB,UAAWokC,EAAY6G,aACvB9iD,MAAOtpB,EAAK,yBACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,gBAC/Bx+D,SAAUm5D,KAIflmD,GACC,0BAAKxf,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,eACLolB,UAAWokC,EAAY8G,aACvB/iD,MAAOtpB,EAAK,yBACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,gBAC/Bx+D,SAAUm5D,KAIhB,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,iBACLolB,UAAWokC,EAAYt+C,eACvBqC,MAAOtpB,EAAK6f,EAAY,0BAA4B,gCACpD+mD,UAAQ,EACRj6D,SAAUy+D,EAAqB,kBAC/Bx+D,SAAUm5D,MAGZlmD,GACA,0BAAKxf,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,WACLolB,UAAWokC,EAAY+G,SACvBhjD,MAAOtpB,EAAK,qBACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,YAC/Bx+D,SAAUm5D,KAIhB,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,cACLolB,UAAWokC,EAAYyB,YACvB19C,MAAOtpB,EAAK,qBACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,eAC/Bx+D,SAAUm5D,MAGZlmD,GACA,0BAAKxf,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,cACLolB,UAAWokC,EAAY0B,YACvB39C,MAAOtpB,EAAK,wBACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,eAC/Bx+D,SAAUm5D,KAIhB,0BAAK1lE,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,YACLolB,UAAWokC,EAAYgH,UACvBjjD,MAAOtpB,EAAK,sBACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,aAC/Bx+D,SAAUm5D,MAGZlmD,GACA,0BAAKxf,UAAU,yBACb,mBAAC6gC,GAAA,EAAD,CACEnlB,KAAK,YACLolB,UAAWokC,EAAYiH,UACvBljD,MAAOtpB,EAAK,4BACZ4mE,UAAQ,EACRj6D,SAAUy+D,EAAqB,aAC/Bx+D,SAAUm5D,KAKf6E,GACC,wBAAGvqE,UAAU,oBAAoBO,IAAI,QAClCZ,EAAK,kCAIR6f,GACA,mBAAC5B,GAAA,EAAD,CACEzgB,GAAG,cACH8rB,MAAOtpB,EAAK,iBACZ4M,SAAUu/D,EACVtlE,MAAOilE,EACPn/D,SAAUi+D,EACV6B,UA/PkB,KAmQrBpwD,IAAkBwuD,IAAyBD,GAC1C,mBAACjsD,GAAA,EAAD,CAAUjc,KAAK,SAASqE,QAAM,EAACkkB,aAAW,EAAC3qB,QAASsrE,GACjD5rE,EAAK,2BAMd,mBAAC66B,GAAA,EAAD,CACE5uB,QAAS8zB,EACTz/B,QAAS2lE,EACT7jE,UAAWpC,EAAK,QAChB2M,SAAUmlB,GAETA,EACC,mBAACzhB,EAAA,EAAD,CAASlO,MAAM,UAEf,wBAAG9B,UAAU,gBAIjB,mBAACwgB,GAAA,EAAD,CACE7e,OAAQ2pE,EACRjkE,QAASmkE,EACT5oE,KAAK,+CACL6d,aAAa,UACbC,eAAgBkrD,EAChBr1C,sBAAoB,SCvP5B,IAAezvB,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxBid,KAAMyQ,GAAc3tB,EAAO4tB,MAInC,MAAO,CACL25C,QAJc5lE,GAAQA,EAAKq4B,UAAYr4B,EAAKq4B,SAASutC,QAKrD55C,UAAAA,EACA7M,UALgBnf,IAAQinB,EAAAA,EAAAA,IAAcjnB,GAMtCu8C,iBAAkBl+C,EAAOk+C,qBAG7B,CAACx9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAfgBZ,EAnDkD,EACpEwnE,QAAAA,EACA55C,UAAAA,EACA7M,UAAAA,EACA6sD,aAAAA,EACAhlE,QAAAA,EACA6T,SAAAA,EACA0hC,iBAAAA,MAEA,MAAMc,GAAYj8C,EAAAA,EAAAA,KAAQ,KACxB,GAAKwkE,GAAY55C,EAIjB,OAAOywB,EAAAA,EAAAA,IAAYmpB,EAAQ5nD,KAAI,EAAGI,OAAAA,KAAaA,IAAS4N,OAAW9qB,EAAWq7C,KAC7E,CAACqpB,EAASrpB,EAAkBvwB,IAEzB+0C,GAAoB1hE,EAAAA,EAAAA,KAAavC,IACrCkvE,EAAa,CAAElvE,GAAAA,MACd,CAACkvE,IAIJ,OAFAhxD,EAAAA,EAAAA,IAAeH,EAAU7T,GAGvB,0BAAKrH,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAU+pE,eAAa,GACnCrsB,EACCA,EAAUr/B,KAAI,CAAClhB,EAAI8mB,IACjB,mBAAC3F,GAAA,EAAD,CACEne,IAAKhD,EACL6sE,cAAe/lD,EACfjkB,UAAU,kCACVC,QAAS,IAAMmhE,EAAkBjkE,IAEjC,mBAACohB,GAAA,EAAD,CAAiBE,OAAQthB,EAAIy5B,eAAa,OAI9C,mBAAC7F,GAAA,EAAD,CACEi5C,cAAe,EACf7pE,IAAI,gBACJyC,KAAM4c,EAAY,uBAAyB,4BCczD,IAAe1Y,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxBid,KAAMyQ,GAAc3tB,EAAO4tB,MAInC,MAAO,CACL25C,QAJc5lE,GAAQA,EAAKq4B,UAAYr4B,EAAKq4B,SAASutC,QAKrD55C,UAAAA,EACA7M,UALgBnf,IAAQinB,EAAAA,EAAAA,IAAcjnB,GAMtCu8C,iBAAkBl+C,EAAOk+C,oBAXXn+C,EAxDgD,EAClE4tB,UAAAA,EACA45C,QAAAA,EACAzmD,UAAAA,EACAiW,eAAAA,EACAuvC,mBAAAA,EACA39D,QAAAA,EACA6T,SAAAA,EACA0hC,iBAAAA,OAEAvhC,EAAAA,EAAAA,IAAeH,EAAU7T,GAEzB,MAAMq2C,GAAYj8C,EAAAA,EAAAA,KAAQ,KACxB,GAAKwkE,GAAY55C,EAIjB,OAAOywB,EAAAA,EAAAA,IACLmpB,EAAQxpD,QAAQ8vC,IAAYA,EAAOye,UAAS3sD,KAAI,EAAGI,OAAAA,KAAaA,IAChE4N,OAAW9qB,EAAWq7C,KAEvB,CAACqpB,EAASrpB,EAAkBvwB,IAEzBm5C,GAA6B9lE,EAAAA,EAAAA,KAAa4sE,IAC9CtH,EAAmBsH,GACnB72C,EAAekuC,EAAAA,GAAAA,wBACd,CAACqB,EAAoBvvC,IAExB,OACE,0BAAKz1B,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAU+pE,eAAa,GACnCrsB,EACCA,EAAUr/B,KAAI,CAAClhB,EAAI8mB,IACjB,mBAAC3F,GAAA,EAAD,CACEne,IAAKhD,EACL6sE,cAAe/lD,EACfjkB,UAAU,kCACVC,QAAS,IAAMulE,EAA2BroE,IAE1C,mBAACohB,GAAA,EAAD,CAAiBE,OAAQthB,EAAIy5B,eAAa,OAI9C,mBAAC7F,GAAA,EAAD,CACEi5C,cAAe,EACf7pE,IAAI,gBACJyC,KAAM4c,EAAY,uBAAyB,4BC4IzD,IAAe1Y,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IAGQ,CACL6tE,gBAHqBC,EAAAA,EAAAA,IAA4B9tE,MAFnCD,EAtL0B,EAC5CE,OAAAA,EACAy2B,cAAAA,EACAo1C,qBAAAA,EACAF,wBAAAA,EACA70C,eAAAA,EACAuvC,mBAAAA,EACA39D,QAAAA,EACA6T,SAAAA,EACAqxD,eAAAA,MAEA,OAAQn3C,GACN,KAAKuuC,EAAAA,GAAAA,QACH,OAAQ4I,GACN,IAAK,OACH,OACE,mBAAC,GAAD,CACEpsE,IAAKxB,EACL8f,OAAQ9f,EACR0I,QAASA,EACT6T,SAAUA,IAGhB,IAAK,QACH,OACE,mBAAC,GAAD,CACE/a,IAAKxB,EACLA,OAAQA,EACR82B,eAAgBA,EAChBpuB,QAASA,EACT6T,SAAUA,GAAY,CACpByoD,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,oBACAvmE,SAASg4B,KAGjB,IAAK,UACH,OACE,mBAAC,GAAD,CACEj1B,IAAKxB,EACLA,OAAQA,EACR82B,eAAgBA,EAChBpuB,QAASA,EACT6T,SAAUA,GAAY,CACpByoD,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,oBACAvmE,SAASg4B,KAKnB,MAGF,KAAKuuC,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACEhlE,OAAQA,EACRuc,SAAUA,EACV7T,QAASA,IAIf,KAAKs8D,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAD,CACEhlE,OAAQA,EACR82B,eAAgBA,EAChBva,SAAUA,EACV7T,QAASA,IAIf,KAAKs8D,EAAAA,GAAAA,iBACH,OACE,mBAAC,GAAD,CACEhlE,OAAQA,EACR82B,eAAgBA,EAChBuvC,mBAAoBA,EACpB9pD,SAAUA,GAAY,CACpByoD,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,sBACAvmE,SAASg4B,GACX/tB,QAASA,IAIf,KAAKs8D,EAAAA,GAAAA,kBACH,OACE,mBAAC,GAAD,CACEhlE,OAAQA,EACRuc,SAAUA,EACV7T,QAASA,IAIf,KAAKs8D,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEhlE,OAAQA,EACRqmE,mBAAoBA,EACpBvvC,eAAgBA,EAChBva,SAAUA,GAAY,CACpByoD,EAAAA,GAAAA,sBACAvmE,SAASg4B,GACX/tB,QAASA,IAIf,KAAKs8D,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACEhlE,OAAQA,EACR6rE,qBAAsBA,EACtBF,wBAAyBA,EACzB70C,eAAgBA,EAChBva,SAAUA,EACV7T,QAASA,IAIf,KAAKs8D,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACEhlE,OAAQA,EACR82B,eAAgBA,EAChBuvC,mBAAoBA,EACpB9pD,SAAUA,GAAY,CACpByoD,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,oBACAvmE,SAASg4B,GACX/tB,QAASA,IAIf,KAAKs8D,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACEhlE,OAAQA,EACRuc,SAAUA,EACV7T,QAASA,IAIf,KAAKs8D,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACEhlE,OAAQA,EACR6rE,qBAAsBA,EACtBF,wBAAyBA,EACzB70C,eAAgBA,EAChBva,SAAUA,EACV7T,QAASA,IAIf,KAAKs8D,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEhlE,OAAQA,EACRuc,SAAUA,EACV7T,QAASA,S,eClNnB,MAAMolE,GAAO,8BACPC,GAAc,uBACdC,GAAc,uBAEb,IAAKC,I,SAAAA,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,WAAAA,GAAAA,a,CAAAA,KAAAA,GAAAA,KAMZ,MAAMC,GAAgC,CACpC,CAACD,GAASE,SAAU,GACpB,CAACF,GAASG,MAAO,OACjB,CAACH,GAASI,YAAa,cAGlB,SAASC,GAAeC,GAE7B,OADAA,EAAaA,EAAW5oD,QAAQ,MAAO,IACnCmoD,GAAK90C,KAAKu1C,GACLN,GAASG,KAEdL,GAAY/0C,KAAKu1C,IAAeP,GAAYh1C,KAAKu1C,GAC5CN,GAASI,WAEXJ,GAASE,QCSlB,MAAMn4C,GAA2B,CAC/Bw4C,YAAa,GACbC,YAAa,GACbC,KAAM,GACNp4C,MAAO,GACPq4C,YAAa,GACbC,SAAU,GACVr9C,SAAU,GACV6E,MAAO,GACPy4C,MAAO,GACPC,SAAU,GACVP,WAAY,GACZQ,WAAY,GACZC,OAAQ,GACRC,IAAK,GACLC,eAAgB,GAChBC,WAAY,GACZC,UAAU,EACVC,iBAAiB,EACjBC,WAAY,IAGRC,GAAgD,CAACj5C,EAAOC,KAC5D,OAAQA,EAAO5uB,MACb,IAAK,iBACH,MAAO,IACF2uB,EACHk4C,YAAaj4C,EAAOC,QACpB84C,WAAY,IACPh5C,EAAMg5C,WACTd,iBAAa5rE,IAGnB,IAAK,iBACH,MAAO,IACF0zB,EACHm4C,YAAal4C,EAAOC,QACpB84C,WAAY,IACPh5C,EAAMg5C,WACTb,iBAAa7rE,IAGnB,IAAK,aACH,MAAO,IACF0zB,EACHo4C,KAAMn4C,EAAOC,QACb84C,WAAY,IACPh5C,EAAMg5C,WACTZ,UAAM9rE,IAGZ,IAAK,cACH,MAAO,IACF0zB,EACHA,MAAOC,EAAOC,QACd84C,WAAY,IACPh5C,EAAMg5C,WACTh5C,WAAO1zB,IAGb,IAAK,gBACH,MAAO,IACF0zB,EACHq4C,YAAap4C,EAAOC,QACpB04C,eAAgBM,GAAkBj5C,EAAOC,SACzC84C,WAAY,IACPh5C,EAAMg5C,WACTX,iBAAa/rE,IAGnB,IAAK,iBACH,MAAO,IACF0zB,EACHs4C,SAAUr4C,EAAOC,QACjB84C,WAAY,IACPh5C,EAAMg5C,WACTV,cAAUhsE,IAGhB,IAAK,iBACH,MAAO,IACF0zB,EACH/E,SAAUgF,EAAOC,QACjB84C,WAAY,IACPh5C,EAAMg5C,WACT/9C,cAAU3uB,IAGhB,IAAK,cACH,MAAO,IACF0zB,EACHF,MAAOG,EAAOC,QACd84C,WAAY,IACPh5C,EAAMg5C,WACTl5C,WAAOxzB,IAGb,IAAK,cACH,MAAO,IACF0zB,EACHu4C,MAAOt4C,EAAOC,QACd84C,WAAY,IACPh5C,EAAMg5C,WACTT,WAAOjsE,IAGb,IAAK,iBACH,MAAO,IAAK0zB,EAAOw4C,SAAUv4C,EAAOC,SACtC,IAAK,mBACH,MAAO,IACFF,EACHi4C,WAAYh4C,EAAOC,QACnB84C,WAAY,IACPh5C,EAAMg5C,WACTf,gBAAY3rE,IAGlB,IAAK,mBACH,MAAO,IACF0zB,EACHy4C,WAAYx4C,EAAOC,QACnB84C,WAAY,IACPh5C,EAAMg5C,WACTP,gBAAYnsE,IAGlB,IAAK,mBACH,MAAO,IACF0zB,EACH04C,OAAQz4C,EAAOC,QACf84C,WAAY,IACPh5C,EAAMg5C,WACTN,YAAQpsE,IAGd,IAAK,gBACH,MAAO,IACF0zB,EACH24C,IAAK14C,EAAOC,QACZ84C,WAAY,IACPh5C,EAAMg5C,WACTL,SAAKrsE,IAGX,IAAK,uBACH,MAAO,IACF0zB,EACH44C,eAAgB34C,EAAOC,QACvB84C,WAAY,IACPh5C,EAAMg5C,WACTJ,oBAAgBtsE,IAGtB,IAAK,mBACH,MAAO,IACF0zB,EACH64C,WAAY54C,EAAOC,QACnB84C,WAAY,IACPh5C,EAAMg5C,WACTH,gBAAYvsE,IAGlB,IAAK,iBACH,MAAO,IAAK0zB,EAAO84C,SAAU74C,EAAOC,SACtC,IAAK,wBACH,MAAO,IAAKF,EAAO+4C,gBAAiB94C,EAAOC,SAC7C,IAAK,iBACH,OAAID,EAAOC,QAAQm4C,YACV,IACFr4C,KACAC,EAAOC,QACV04C,eAAgBM,GAAkBj5C,EAAOC,QAAQm4C,cAG9C,IAAKr4C,KAAUC,EAAOC,SAC/B,IAAK,gBACH,MAAO,IACFF,EACHg5C,WAAY,IACPh5C,EAAMg5C,cACN/4C,EAAOC,UAGhB,QACE,OAAOF,IAIb,SAASk5C,GAAkBC,GACzB,MAAMn5B,EAAUo5B,GAAAA,GAAAA,MAAiB,EAAGlxE,GAAAA,KAASA,IAAOixE,IACpD,OAAOn5B,EAAUA,EAAQv5B,KAAO,GCvNnB,SAAS4yD,GACtBpjE,EAAkCqjE,EAHX,MAKvBrrE,EAAAA,EAAAA,KAAU,KACJuE,EAAAA,IAIJ9B,YAAW,MACTg1D,EAAAA,EAAAA,KAAQ,KACFzvD,EAAI1C,SACN0C,EAAI1C,QAAQmU,aAGf4xD,KACF,CAACrjE,EAAKqjE,ICNX,MAyCA,IAAeznE,EAAAA,EAAAA,KAzCesqB,IAC5B,MAAM,GACJj0B,EADI,MAEJqJ,EAFI,MAGJyiB,EAHI,SAIJulD,EAJI,MAKJ3vD,EALI,IAMJ3T,EANI,YAOJ4S,EAPI,SAQJvR,EARI,SASJM,GACEukB,EACEq9C,EAAY5vD,GAASoK,EACrB4vC,GAAgB/0D,EAAAA,EAAAA,GACpB,cACA0C,GAAS,UACTqY,GAAS,QACT4vD,GAAa,aACbD,GAAY,aACZ,eAGF,OACE,0BAAKxuE,UAAW64D,GACd,6BACE74D,UAAU,eACV7C,GAAIA,EACJqJ,MAAOA,GAAS,GAChB+F,SAAUA,EACVuR,YAAaA,GAAemL,EAC5B/d,IAAKA,GAEJ2B,GAEF4hE,GAAatxE,GACZ,4BAAOuxE,QAASvxE,GAAKsxE,OCsJ7B,IAAe3nE,EAAAA,EAAAA,KAlLoB,EACjCmuB,MAAAA,EACA05C,UAAAA,EACAC,UAAAA,EACAC,SAAAA,EACAC,YAAAA,EACA1xC,SAAAA,MAGA,MAAMpxB,GAAWzE,EAAAA,EAAAA,IAAyB,MAEpCwnE,GAAWxnE,EAAAA,EAAAA,IAAyB,MAEpCynE,GAAmBznE,EAAAA,EAAAA,IAA0B,OAEnDrE,EAAAA,EAAAA,KAAU,KACJ8rE,EAAiBxmE,SAChBwmE,EAAiBxmE,QAAQhC,QAAUyuB,EAAMq4C,cAC5C0B,EAAiBxmE,QAAQhC,MAAQyuB,EAAMq4C,eAExC,CAACr4C,EAAMq4C,cAEV,MAAM3tE,GAAOC,EAAAA,EAAAA,KAEb0uE,GAAuBtiE,GAEvB,MAAMijE,GAAuBvvE,EAAAA,EAAAA,KAAaqE,IACxCq5B,EAAS,CAAE92B,KAAM,iBAAkB6uB,QAASpxB,EAAE0G,OAAOjE,UACpD,CAAC42B,IAEE8xC,GAAuBxvE,EAAAA,EAAAA,KAAaqE,IACxCq5B,EAAS,CAAE92B,KAAM,iBAAkB6uB,QAASpxB,EAAE0G,OAAOjE,UACpD,CAAC42B,IAEE+xC,GAAmBzvE,EAAAA,EAAAA,KAAaqE,IACpCq5B,EAAS,CAAE92B,KAAM,aAAc6uB,QAASpxB,EAAE0G,OAAOjE,UAChD,CAAC42B,IAEEgyC,GAAoB1vE,EAAAA,EAAAA,KAAaqE,IACrCq5B,EAAS,CAAE92B,KAAM,cAAe6uB,QAASpxB,EAAE0G,OAAOjE,UACjD,CAAC42B,IAEEiyC,GAAsB3vE,EAAAA,EAAAA,KAAaqE,IACvCq5B,EAAS,CAAE92B,KAAM,gBAAiB6uB,QAASpxB,EAAE0G,OAAOjE,UACnD,CAAC42B,IAEEkyC,GAAuB5vE,EAAAA,EAAAA,KAAaqE,IACxCq5B,EAAS,CAAE92B,KAAM,iBAAkB6uB,QAASpxB,EAAE0G,OAAOjE,UACpD,CAAC42B,IAEEmyC,GAAuB7vE,EAAAA,EAAAA,KAAaqE,IACxCq5B,EAAS,CAAE92B,KAAM,iBAAkB6uB,QAASpxB,EAAE0G,OAAOjE,UACpD,CAAC42B,IAEEoyC,GAAoB9vE,EAAAA,EAAAA,KAAaqE,IACrCq5B,EAAS,CAAE92B,KAAM,cAAe6uB,QAASpxB,EAAE0G,OAAOjE,UACjD,CAAC42B,IAEEqyC,GAAoB/vE,EAAAA,EAAAA,KAAaqE,IACrC,IAAI,MAAEyC,GAAUzC,EAAE0G,OAClBjE,EAAS,IAAGA,EAAM8d,QAAQ,MAAO,MAC7ByqD,EAASvmE,UACXumE,EAASvmE,QAAQhC,MAAQA,GAE3B42B,EAAS,CAAE92B,KAAM,cAAe6uB,QAAS3uB,MACxC,CAAC42B,IAEEsyC,GAAuBhwE,EAAAA,EAAAA,KAAaqE,IACxCq5B,EAAS,CAAE92B,KAAM,iBAAkB6uB,QAASpxB,EAAE0G,OAAOjE,UACpD,CAAC42B,KAEE,WAAE6wC,GAAeh5C,EACvB,OACE,0BAAKj1B,UAAU,gBACb,+BACG8uE,EACC,8BACE,6BAAKnvE,EAAK,2BACV,mBAACie,GAAA,EAAD,CACE1S,IAAKc,EACLid,MAAM,oBACN1c,SAAU0iE,EACVzoE,MAAOyuB,EAAMk4C,YACbhoD,UAAU,OACVtG,MAAOovD,EAAWd,cAEpB,mBAACvvD,GAAA,EAAD,CACEqL,MAAM,oBACN1c,SAAU2iE,EACV1oE,MAAOyuB,EAAMm4C,YACbjoD,UAAU,OACVtG,MAAOovD,EAAWb,cAEpB,mBAACxvD,GAAA,EAAD,CACEqL,MAAM,OACN1c,SAAU4iE,EACV3oE,MAAOyuB,EAAMo4C,KACbloD,UAAU,OACVtG,MAAOovD,EAAWZ,OAEpB,mBAACzvD,GAAA,EAAD,CACEqL,MAAM,QACN1c,SAAU6iE,EACV5oE,MAAOyuB,EAAMA,MACb9P,UAAU,OACVtG,MAAOovD,EAAWh5C,QAEpB,mBAAC,GAAD,CACEhM,MAAM,UACNnL,YAAY,UACZvR,SAAU8iE,EACV7oE,MAAOyuB,EAAMq4C,YACbkB,SAAUtmE,SAAQ,GAClB/K,GAAG,mBACH0hB,MAAOovD,EAAWX,YAClBpiE,IAAK8jE,GAEJX,GAAAA,GAAAA,KAAgB,EAAG3yD,KAAAA,EAAMve,GAAAA,KACxB,6BACEqJ,MAAOrJ,EACP6C,UAAU,eAET0b,MAKP,mBAACkC,GAAA,EAAD,CACEqL,MAAM,YACN1c,SAAU+iE,EACV9oE,MAAOyuB,EAAMs4C,SACbpoD,UAAU,OACVtG,MAAOovD,EAAWV,iBAGpBhsE,EACFstE,GAAYF,GAAaC,EACzB,6BAAKjvE,EAAK,iCACR4B,EACFstE,GACA,mBAACjxD,GAAA,EAAD,CACEqL,MAAM,YACN1c,SAAUgjE,EACV/oE,MAAOyuB,EAAM/E,SACb/K,UAAU,OACVtG,MAAOovD,EAAW/9C,WAGpBy+C,GACA,mBAAC/wD,GAAA,EAAD,CACEqL,MAAM,QACN1c,SAAUijE,EACVhpE,MAAOyuB,EAAMF,MACb5P,UAAU,QACVtG,MAAOovD,EAAWl5C,QAGpB65C,GACA,mBAAChxD,GAAA,EAAD,CACEqL,MAAM,eACN1c,SAAUkjE,EACVjpE,MAAOyuB,EAAMu4C,MACbroD,UAAU,MACVtG,MAAOovD,EAAWT,MAClBtiE,IAAK6jE,IAGT,mBAACluC,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,uBACZ8lC,SAAU9lC,EAAK,2BACfmhC,QAAS54B,QAAQ+sB,EAAM84C,UACvBxhE,SAAUmjE,SCtIpB,IAAe5oE,EAAAA,EAAAA,KAxCgB,EAC7BmuB,MAAAA,EACA06C,gBAAAA,EACAC,SAAAA,EACAxyC,SAAAA,MAEA,MAAMz9B,GAAOC,EAAAA,EAAAA,MAEbsD,EAAAA,EAAAA,KAAU,KACHysE,IAAmB16C,EAAMw4C,UAG9BrwC,EAAS,CAAE92B,KAAM,iBAAkB6uB,QAASw6C,EAAgB,GAAGxyE,OAC9D,CAACwyE,EAAiB16C,EAAMw4C,SAAUrwC,IAErC,MAAMyyC,GAAuBnwE,EAAAA,EAAAA,KAAa8G,IACxC42B,EAAS,CAAE92B,KAAM,iBAAkB6uB,QAAS3uB,MAC3C,CAAC42B,IAEEjU,GAAU1nB,EAAAA,EAAAA,KAAQ,IAAOkuE,EAAgBtxD,KAAI,EAAGlhB,GAAIqJ,EAAO8Y,MAAO2J,EAAO6mD,OAAAA,MAA5B,CACjD7mD,MAAAA,EACAwc,UAAUsqC,EAAAA,GAAAA,GAAeD,EAAQF,EAAUjwE,EAAK4lB,MAChD/e,MAAAA,OACI,CAACmpE,EAAiBC,EAAUjwE,EAAK4lB,OAEvC,OACE,0BAAKvlB,UAAU,YACb,+BACE,sDACA,mBAACkpB,GAAA,EAAD,CACExN,KAAK,mBACLyN,QAASA,EACT5c,SAAUsjE,EACVzmD,SAAU6L,EAAMw4C,gBC6B1B,SAASuC,GACPn9B,EAAgCvzB,EAAe9Y,EAAeopE,EAAmBK,GAAO,GAExF,OACE,0BAAKjwE,UAAY,oBAAkBiwE,EAAO,uBAAyB,KACjE,0BAAKjwE,UAAU,SACXsf,GAEJ,0BAAKtf,UAAU,UACZ+vE,EAAAA,GAAAA,GAAevpE,EAAOopE,EAAU/8B,KAMzC,SAASq9B,GAAmB7tE,EAAcid,EAAeyc,GACvD,OACE,0BAAK/7B,UAAU,sBACb,wBAAGA,UAAWqC,GAAd,KACA,0BAAKrC,UAAU,QACb,0BAAKA,UAAU,SACXsf,GAEJ,wBAAGtf,UAAU,QACT+7B,KAOZ,UAAej1B,EAAAA,EAAAA,KAnFgB,EAC7BqpE,eAAAA,EACAC,OAAAA,EACAC,eAAAA,EACAC,aAAAA,EACAV,SAAAA,EACAW,WAAAA,MAEA,MAAM5wE,GAAOC,EAAAA,EAAAA,MAEP,SAAE4wE,EAAF,MAAYlxD,EAAZ,KAAmB1c,GAASutE,GAAkB,IAC9C,cACJM,EADI,gBAEJC,EAFI,gBAGJC,EAHI,KAIJj1D,EAJI,MAKJ8xD,EALI,eAMJoD,GACGN,GAAgB,GAErB,OACE,0BAAKtwE,UAAU,YACb,0BAAKA,UAAU,yBACZwwE,GAAY,0BAAKp0E,IAAKo0E,EAAU1gE,IAAI,KACrC,0BAAK9P,UAAU,QACb,6BAAKsf,GACL,4BAAI1c,KAGR,0BAAK5C,UAAU,cACXowE,GAAUA,EAAO/xD,KAAKutC,GACtBokB,GAAkBrwE,EAAK4lB,KAAMqmC,EAAK3iC,MAAO2iC,EAAKkkB,OAAQF,KAEtDS,GAAkBA,EAAehyD,KAAKutC,GACtCokB,GAAkBrwE,EAAK4lB,KAAMqmC,EAAK3iC,MAAO2iC,EAAKkkB,OAAQF,UAEvCruE,IAAfgvE,GACAP,GAAkBrwE,EAAK4lB,KAAM5lB,EAAK,wBAAyB4wE,EAAYX,GAAU,IAGrF,0BAAK5vE,UAAU,gBACZywE,GAAiBP,GAAmB,YAAaO,EAAe,kBAChEC,GAAmBR,GAAmB,kBAAmBQ,EAAiB,oBAC1EC,GAAmBT,GAAmB,gBAAiBS,EAAiB,oBACxEj1D,GAAQw0D,GAAmB,YAAax0D,EAAM,QAC9C8xD,GAAS0C,GAAmB,aAAc1C,EAAO,gBACjDoD,GAAkBV,GAAmB,aAAcU,EAAgB,wBC9B5E,IAAe9pE,EAAAA,EAAAA,KA/BoB,EAAGN,MAAAA,EAAOqY,MAAAA,EAAOtS,SAAAA,MAElD,MAAMskE,GAAiBtpE,EAAAA,EAAAA,IAAyB,MAE1CkT,GAAgB/a,EAAAA,EAAAA,KAAaqE,IACjC,GAAc,cAAVA,EAAE5D,KAA0D,MAAnCqG,EAAMsqE,OAAOtqE,EAAMnI,OAAS,GAAY,CACnE,MAAMu6C,EAAWpyC,EAAMktB,MAAM,EAAGltB,EAAMnI,OAAS,GAC3CwyE,EAAeroE,UACjBqoE,EAAeroE,QAAQhC,MAAQoyC,MAGlC,CAACpyC,IAEE+7B,GAAe7iC,EAAAA,EAAAA,KAAaqE,IAChCwI,EC9BG,SAA0B88C,GAE/B,MAAM0nB,GADN1nB,EAAQA,EAAM/kC,QAAQ,SAAU,IAAIoP,MAAM,EAAG,IACzBtF,MAAM,WAO1B,OANI2iD,GAASA,EAAM,IAAMvmE,OAAOumE,EAAM,IAAM,KAC1CA,EAAM,GAAK,MAETA,GAASA,EAAM,IAA0B,IAApBA,EAAM,GAAG1yE,SAAiB0yE,EAAM,KACvDA,EAAM,GAAK,IAENA,EAAQA,EAAMrlE,KAAK,KAAO,GDqBtBslE,CAAiBjtE,EAAE0G,OAAOjE,UAClC,CAAC+F,IAEJ,OACE,mBAACqR,GAAA,EAAD,CACEqL,MAAM,cACN/d,IAAK2lE,EACLtkE,SAAUg2B,EACV1kB,UAAWpD,EACXjU,MAAOA,EACPqY,MAAOA,EACPsG,UAAU,UACVinD,UAlCmB,O,0BESzB,MAkDA,IAAetlE,EAAAA,EAAAA,KA1CkB,EAAGN,MAAAA,EAAOqY,MAAAA,EAAOtS,SAAAA,MAEhD,MAAM0kE,GAAgB1pE,EAAAA,EAAAA,IAAyB,MAE/C+mE,GAAuB2C,GAEvB,MAAOC,EAAUC,IAAeluE,EAAAA,EAAAA,IAAiB2pE,GAASE,UAC1D5pE,EAAAA,EAAAA,KAAU,KACR,MAAMkuE,EAAcnE,GAAezmE,GACnC2qE,EAAYC,KAEX,IAEH,MAAM7uC,GAAe7iC,EAAAA,EAAAA,KAAaqE,IAChC,MAAM60C,ED3BH,SAA0ByQ,GAE/B,MAAM0nB,GADN1nB,EAAQA,EAAM/kC,QAAQ,SAAU,KACZ8J,MAAM,WAC1B,OAAO2iD,EAAQA,EAAMrlE,KAAK,KAAO,GCwBd2lE,CAAiBttE,EAAE0G,OAAOjE,OACrC4qE,EAAcnE,GAAelpE,EAAE0G,OAAOjE,OAC5C2qE,EAAYC,GACZ7kE,EAASqsC,GACLq4B,EAAczoE,UAChByoE,EAAczoE,QAAQhC,MAAQoyC,KAE/B,CAACrsC,EAAU0kE,IAERK,EAqBR,SAAqBJ,GACnB,OAAQA,GACN,KAAKtE,GAASI,WACZ,OAAO,0BAAK5wE,IAAKm1E,GAAoBzhE,IAAI,KAC3C,KAAK88D,GAASG,KACZ,OAAO,0BAAK3wE,IAAKo1E,GAAc1hE,IAAI,KACrC,QACE,QA5Ba2hE,CAAYP,GAE7B,OACE,0BAAKlxE,UAAU,aACb,2BAAMA,UAAU,cAAcsxE,GAC9B,mBAAC1zD,GAAA,EAAD,CACE1S,IAAK+lE,EACLhoD,MAAM,cACN1c,SAAUg2B,EACV/7B,MAAOA,EACP2e,UAAU,UACVnlB,UAAWkxE,EAAW,iBAAmB,GACzCryD,MAAOA,EACPutD,UA5CuB,SC0I/B,IAAetlE,EAAAA,EAAAA,KAlImB,EAChCmuB,MAAAA,EACAy8C,mBAAAA,EACAC,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACAz0C,SAAAA,MAGA,MAAM4xC,GAAmBznE,EAAAA,EAAAA,IAA0B,OAEnDrE,EAAAA,EAAAA,KAAU,KACJ8rE,EAAiBxmE,SAChBwmE,EAAiBxmE,QAAQhC,QAAUyuB,EAAM44C,iBAC5CmB,EAAiBxmE,QAAQhC,MAAQyuB,EAAM44C,kBAExC,CAAC54C,EAAM44C,iBAEV,MAAMiE,GAAyBpyE,EAAAA,EAAAA,KAAa8G,IAC1C42B,EAAS,CAAE92B,KAAM,mBAAoB6uB,QAAS3uB,MAC7C,CAAC42B,IAEE20C,GAAyBryE,EAAAA,EAAAA,KAAaqE,IAC1Cq5B,EAAS,CAAE92B,KAAM,mBAAoB6uB,QAASpxB,EAAE0G,OAAOjE,MAAMwrE,kBAC5D,CAAC50C,IAEE60C,GAAqBvyE,EAAAA,EAAAA,KAAa8G,IACtC42B,EAAS,CAAE92B,KAAM,mBAAoB6uB,QAAS3uB,MAC7C,CAAC42B,IAEE80C,GAAkBxyE,EAAAA,EAAAA,KAAaqE,IACnCq5B,EAAS,CAAE92B,KAAM,gBAAiB6uB,QAASpxB,EAAE0G,OAAOjE,UACnD,CAAC42B,IAEEiyC,GAAsB3vE,EAAAA,EAAAA,KAAaqE,IACvCq5B,EAAS,CAAE92B,KAAM,uBAAwB6uB,QAASpxB,EAAE0G,OAAOjE,UAC1D,CAAC42B,IAEE+0C,GAA8BzyE,EAAAA,EAAAA,KAAaqE,IAC/Cq5B,EAAS,CAAE92B,KAAM,mBAAoB6uB,QAASpxB,EAAE0G,OAAOjE,UACtD,CAAC42B,IAEEg1C,GAA8B1yE,EAAAA,EAAAA,KAAaqE,IAC/Cq5B,EAAS,CAAE92B,KAAM,wBAAyB6uB,QAASpxB,EAAE0G,OAAOjE,UAC3D,CAAC42B,IAEEz9B,GAAOC,EAAAA,EAAAA,MAEP,WAAEquE,EAAa,IAAOh5C,EAE5B,OACE,0BAAKj1B,UAAU,eACb,+BACE,6BAAKL,EAAK,qBACV,mBAAC,GAAD,CACE4M,SAAUulE,EACVtrE,MAAOyuB,EAAMi4C,WACbruD,MAAOovD,EAAWf,aAElByE,GACA,mBAAC/zD,GAAA,EAAD,CACEqL,MAAM,eACN1c,SAAUwlE,EACVvrE,MAAOyuB,EAAMy4C,WACbvoD,UAAU,OACVtG,MAAOovD,EAAWP,aAGtB,8BAAS1tE,UAAU,iBACjB,mBAAC,GAAD,CACEwG,MAAOyuB,EAAM04C,OACbphE,SAAU0lE,EACVpzD,MAAOovD,EAAWN,SAEpB,mBAAC/vD,GAAA,EAAD,CACEqL,MAAM,WACN1c,SAAU2lE,EACV1rE,MAAOyuB,EAAM24C,IACbzoD,UAAU,UACVinD,UAAW,EACXvtD,MAAOovD,EAAWL,OAGpBgE,GAAeC,EACf,6BAAKlyE,EAAK,+BACR4B,EACFqwE,GACA,mBAAC,GAAD,CACE3oD,MAAM,UACNnL,YAAY,UACZvR,SAAU8iE,EACV7oE,MAAOyuB,EAAM44C,eACbW,SAAUtmE,SAAQ,GAClB/K,GAAG,kBACH0hB,MAAOovD,EAAWJ,eAClB3iE,IAAK8jE,GAGHX,GAAAA,GAAAA,KAAgB,EAAG3yD,KAAAA,KACjB,6BACElV,MAAOkV,EACP1b,UAAU,eAET0b,MAMTm2D,GACA,mBAACj0D,GAAA,EAAD,CACEqL,MAAM,YACN1c,SAAU4lE,EACV3rE,MAAOyuB,EAAM64C,WACb3oD,UAAU,OACVtG,MAAOovD,EAAWH,aAGpB4D,GACA,mBAAC7wC,GAAA,EAAD,CACE5X,MAAOtpB,EAAK,qCACZmhC,QAAS7L,EAAM+4C,gBACfzhE,SAAU6lE,SCyMtB,IAAetrE,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAM,KACJ2H,EADI,gBAEJspE,EAFI,UAGJ0C,EAHI,mBAIJX,EAJI,QAKJY,EALI,eAMJnC,EANI,eAOJoC,EAPI,aAQJC,EARI,gBASJC,EATI,MAUJ5zD,GACEngB,EAAOg0E,QAELC,EAAkBzqE,QAAQoqE,KAAaC,GAlVxB,WAkV0CA,KACzD,mBAAEZ,EAAF,YAAsBC,EAAtB,QAAmCC,GAAaW,GAAgB,IAChE,cACJI,EADI,eAEJC,EAFI,eAGJC,EAHI,yBAIJC,EAJI,SAKJC,EALI,gBAMJC,EANI,gBAOJC,EAPI,SAQJtD,EARI,OASJQ,GACGkC,GAAW,GAEhB,MAAO,CACLjsE,KAAAA,EACAspE,gBAAAA,EACA0C,UAAAA,EACAX,mBAAAA,EACAa,eAAAA,EACAE,gBAAAA,EACAG,cAAAA,EACAG,yBAAAA,EACAF,eAAAA,EACAC,eAAAA,EACAE,SAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAtD,SAAAA,EACAQ,OAAAA,EACAuC,gBAAAA,EACAxC,eAAAA,EACAwB,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACAhzD,MAAAA,MAGJ,CAACzf,EAAWC,KACHC,EAAAA,EAAAA,IAAKD,EAAS,CACnB,wBACA,kBACA,iBACA,sBACA,uBA3DcZ,EArS0D,EAC5EkD,OAAAA,EACA0F,QAAAA,EACAhB,KAAAA,EACAspE,gBAAAA,EACA0C,UAAAA,EACAX,mBAAAA,EACAkB,cAAAA,EACAG,yBAAAA,EACAF,eAAAA,EACAC,eAAAA,EACAG,gBAAAA,EACAC,gBAAAA,EACAtD,SAAAA,EACA6C,gBAAAA,EACAE,gBAAAA,EACAxC,eAAAA,EACAoC,eAAAA,EACAnC,OAAAA,EACAuB,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACAhzD,MAAAA,EACAs0D,sBAAAA,EACAC,gBAAAA,EACAC,eAAAA,EACAC,oBAAAA,EACAC,kBAAAA,MAEA,MAAOC,EAAcC,IV+Id53B,EAAAA,GAAAA,GAAWqyB,GAASv5C,KU9IpBlD,EAAWsvC,IAAgB99D,EAAAA,EAAAA,KAAS,GACrCtD,GAAOC,EAAAA,EAAAA,MAEbsD,EAAAA,EAAAA,KAAU,MACJmD,GAAQwY,IACVkiD,GAAa,KAEd,CAAC16D,EAAMwY,KAEV3b,EAAAA,EAAAA,KAAU,KACJ2b,GAASA,EAAM60D,OACjBD,EAAgB,CACdntE,KAAM,gBACN6uB,QAAS,CACP,CAACtW,EAAM60D,OAAQ70D,EAAM9gB,aAI1B,CAAC8gB,EAAO40D,KAEXvwE,EAAAA,EAAAA,KAAU,KACR,GAAImvE,EAAW,CACb,MACE32D,KAAMwU,EADF,MACYs9C,EADZ,MACmBz4C,EADnB,gBAC0B47C,GAC5B0B,EACJoB,EAAgB,CACdntE,KAAM,iBACN6uB,QAAS,CACPjF,SAAAA,EACAs9C,MAAOA,GAA6B,MAApBA,EAAMsD,OAAO,GACxB,IAAGtD,IACJA,EACJz4C,MAAAA,KACI47C,GAAmB,SAI5B,CAAC0B,EAAWoB,IAEf,MAAME,GAAwBj0E,EAAAA,EAAAA,KAAY,KACxC6zE,MACC,CAACA,IAEEhD,GAAa9uE,EAAAA,EAAAA,KAAQ,IACrB4E,IAASutE,EAAAA,GAAAA,SACJ,EAmSb,SAAuBxD,EAAkB,GAAIT,EAA+CkE,GAC1F,MAAMxD,EAAiBV,EACnBmE,GAAkBnE,EAAiBkE,GACnC,GACJ,IAAIrS,EAAQ,EAKZ,OAHAA,EADoB4O,EAAO2D,OAAO1D,GAAkB,IAChC57B,QAAO,CAACu/B,EAAKC,IACxBD,EAAMC,EAAInE,QAChBtO,GACIA,EAzSE0S,CAAc9D,EAAQT,EAAiB6D,EAAa/F,WAC1D,CAACpnE,EAAMmtE,EAAa/F,SAAU2C,EAAQT,IAEnCW,GAAe7uE,EAAAA,EAAAA,KAAQ,KAC3B,GAAI4E,IAASutE,EAAAA,GAAAA,SAGb,OAqSJ,SAAyB3+C,EAAkB06C,EAA+Ce,GACxF,MACMD,EAAiB,GXxZlB,SAA4BvD,GACjC,MAAMgE,EAAWjE,GAAeC,GAChC,OAAOL,GAAMqE,IAAuB,GWqZfiD,CAAmBl/C,EAAMi4C,gBACJj4C,EAAMi4C,WAAWx5C,OAAO,KAC5Di9C,EAAkB17C,EAAMk4C,YACzB,GAAEl4C,EAAMk4C,gBAAgBl4C,EAAMo4C,SAASp4C,EAAMq4C,mBAC9C/rE,GACE,MAAEisE,EAAOt9C,SAAUxU,GAASuZ,EAC5B4+C,EAAiBlE,EAAkByE,GAAmBzE,EAAiB16C,EAAMw4C,eAAYlsE,EAE/F,MAAO,CACLkvE,cAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAj1D,KAAAA,EACA8xD,MAAAA,EACAoD,eAPqBiD,EAAiBA,EAAev0D,WAAQ/d,GA7StD8yE,CAAgBb,EAAc7D,EAAiB4C,GAAkB,MACvE,CAAClsE,EAAMmtE,EAAc7D,EAAiB4C,IA2EnC+B,GAAkB50E,EAAAA,EAAAA,KAAY,KAClC,MAAM,SAAEquE,GAAayF,EACfe,EA0OV,SAAwBf,GACtB,MAAM,YACJrG,EADI,YAEJC,EAFI,KAGJC,EAHI,MAIJp4C,EAJI,YAKJq4C,EALI,SAMJC,EACAr9C,SAAUxU,EAPN,MAQJ8xD,EARI,MASJz4C,GACEy+C,EAWJ,MAAO,CACL93D,KAAAA,EACA8xD,MAAAA,EACAz4C,MAAAA,EACA47C,gBAbsB,CACtBxD,YAAAA,EACAC,YAAAA,EACAC,KAAAA,EACAp4C,MAAAA,EACAq4C,YAAAA,EACAC,SAAAA,IA7PoBiH,CAAehB,GACnCL,EAAsB,CAAEoB,YAAAA,EAAaxG,SAAAA,MACpC,CAACoF,EAAuBK,IAErBiB,GAAkB/0E,EAAAA,EAAAA,KAAY,KAClC,MAAMg1E,EAmQV,SAAwBlB,GACtB,MAAM,WACJtG,EADI,WACQQ,EADR,OACoBC,EADpB,IAC4BC,EAD5B,eACiCC,EADjC,WACiDC,GACnD0F,GACGmB,EAAaC,GAAcjH,EAAOr9C,MAAM,KAW/C,MAAO,CACLyL,KAXW,CACXmxC,WAAAA,EACAQ,WAAAA,EACAiH,YAAAA,EACAC,WAAAA,EACAhH,IAAAA,EACA34B,QAAS44B,EACTgH,IAAK/G,IA/QegH,CAAetB,GACnCF,EAAoB,CAClBoB,YAAAA,MAED,CAACpB,EAAqBE,IAEnBuB,GAAWr1E,EAAAA,EAAAA,KAAY,KAC3B0zE,EAAgB,CACd4B,iBAAkBxB,EAAa/F,SAC/BO,gBAAiBwF,EAAaxF,oBAE/B,CAACoF,EAAiBI,IAEfyB,GAAUv1E,EAAAA,EAAAA,KAAaw1E,IAC3B7B,EAAe,CAAEhtE,KAAM6uE,MACtB,CAAC7B,IAEEzsB,GAAoBlnD,EAAAA,EAAAA,KAAY,KAEpC,OADAqhE,GAAa,GACL16D,GACN,KAAKutE,EAAAA,GAAAA,aACH,OAAOU,IACT,KAAKV,EAAAA,GAAAA,SACH,OAAOqB,EAAQrB,EAAAA,GAAAA,aACjB,KAAKA,EAAAA,GAAAA,YACH,OAAOa,IACT,KAAKb,EAAAA,GAAAA,SACH,OAAOmB,IACT,QACE,MAAO,UAEV,CAAC1uE,EAAMiuE,EAAiBW,EAASR,EAAiBM,IAE/Cp3D,GAAclc,EAAAA,EAAAA,KAAQ,KAC1B,OAAQ4E,GACN,KAAKutE,EAAAA,GAAAA,aACH,OAAOj0E,EAAK,uBACd,KAAKi0E,EAAAA,GAAAA,SACH,OAAOj0E,EAAK,yBACd,KAAKi0E,EAAAA,GAAAA,YACH,OAAOj0E,EAAK,mBACd,KAAKi0E,EAAAA,GAAAA,SACH,OAAOj0E,EAAK,mBACd,QACE,MAAO,MAEV,CAAC0G,EAAM1G,IAEJw1E,GAAa1zE,EAAAA,EAAAA,KAAQ,KACzB,OAAQ4E,GACN,KAAKutE,EAAAA,GAAAA,SACH,OAAOj0E,EAAK,qBAAqBowE,EAAAA,GAAAA,GAAeQ,EAAYX,EAAUjwE,EAAK4lB,OAC7E,QACE,OAAO5lB,EAAK,WAEf,CAAC0G,EAAM1G,EAAMiwE,EAAUW,IAE1B,OAAIoC,EAEA,mBAAC50D,GAAA,EAAD,CACE/d,UAAU,QACV2B,OAAQA,EACR0F,QAASA,GAET,qGAC6E,8BAD7E,iDAIA,mBAACzF,EAAA,EAAD,CACE+d,QAAM,EACN1f,QAASoH,GAER1H,EAAK,QAOZ,mBAACoe,GAAA,EAAD,CACE/d,UAAU,eACV2B,OAAQA,EACR0F,QAASA,GAET,0BAAKrH,UAAU,SAASO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAChD,mBAACK,EAAA,EAAD,CACE5B,UAAU,eACV8B,MAAM,cACND,OAAK,EACLzB,KAAK,UACLH,QAASoH,EACTtF,UAAU,SAEV,wBAAG/B,UAAU,gBAEf,6BAAK2d,SAEGpc,IAAT8E,EACC,mBAACmV,EAAA,EAAD,CAAYE,KAAK,QAAQD,UAAWpV,IACjC,IACC,0BAAKrG,UAAU,yBA9JzB,SAA4Bo1E,GAC1B,OAAQA,GACN,KAAKxB,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACE3+C,MAAOu+C,EACPp2C,SAAUq2C,EACV3E,YAAa5mE,QAAQ6qE,GACrBpE,UAAWzmE,QAAQ4qE,GAAkBI,GACrCtE,UAAW1mE,QAAQ2qE,GAAkBI,GACrCpE,SAAU3mE,QAAQ0qE,KAGxB,KAAKgB,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACE3+C,MAAOu+C,EACPp2C,SAAUq2C,EACV9D,gBAAiBA,GAAmB,GACpCC,SAAUA,IAGhB,KAAKgE,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CACE3+C,MAAOu+C,EACPp2C,SAAUq2C,EACV/B,mBAAoBxpE,SAASuqE,GAAmBf,GAChDC,mBAAoBA,EACpBC,YAAaA,EACbC,QAASA,IAGf,KAAK+B,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACExD,OAAQA,EACRC,eAAgBmD,EAAa/F,UAAYkC,EACrCmE,GAAkBnE,EAAiB6D,EAAa/F,eAChDlsE,EACJgvE,WAAYA,EACZJ,eAAgBA,EAChBG,aAAcA,EACdV,SAAUA,IAGhB,QACE,QAgHOyF,CAAmBhvE,MAK1B,0BAAKrG,UAAU,iBACb,mBAACgQ,EAAA,EAAD,CAASlO,MAAM,UAGnB,0BAAK9B,UAAU,UACb,mBAAC4B,EAAA,EAAD,CACE0E,KAAK,SACLrG,QAAS2mD,EACTt6C,SAAUmlB,EACVA,UAAWA,GAEV0jD,IAGJt2D,IAAUA,EAAM60D,OAxMrB,WACE,GAAK70D,EAGL,OACE,mBAACd,GAAA,EAAD,CACE/d,UAAU,QACV2B,OAAQuG,QAAQ2W,GAChBxX,QAASssE,GAET,6BAAK90D,EAAM6J,aAAe,SAC1B,4BAAI7J,EAAM6J,aAAe,SACzB,mBAAC9mB,EAAA,EAAD,CACE+d,QAAM,EACN1f,QAASszE,GAER5zE,EAAK,QAwLgB21E,QAqEhC,SAASlB,GAAmBzE,EAAmC4F,GAC7D,OAAO5F,EAAgBjvC,MAAK,EAAGvjC,GAAAA,KAASA,IAAOo4E,IAGjD,SAASzB,GAAkBnE,EAAmCkE,GAC5D,MAAMnxC,EAAS0xC,GAAmBzE,EAAiBkE,GACnD,OAAOnxC,EAASA,EAAO0tC,YAAS7uE,EC5XlC,MA0DA,IAAeuF,EAAAA,EAAAA,KAAKrI,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAE82E,GAAY92E,EAAOg0E,SACrB,SACJ9C,EADI,OAEJQ,EAFI,KAGJqF,EAHI,YAIJC,EAJI,iBAKJC,EALI,eAMJtF,EANI,eAOJO,EAPI,SAQJJ,EARI,KASJ5tE,EATI,MAUJ0c,GACGk2D,GAAW,GAEhB,MAAO,CACL5F,SAAAA,EACAQ,OAAAA,EACAqF,KAAAA,EACAC,YAAAA,EACAC,iBAAAA,EACAtF,eAAAA,EACAO,eAAAA,EACAJ,SAAAA,EACA5tE,KAAAA,EACA0c,MAAAA,KA1Bc7gB,EA1D4B,EAC9CkD,OAAAA,EACA0F,QAAAA,EACA+oE,OAAAA,EACAC,eAAAA,EACAqF,YAAAA,EACA9F,SAAAA,EACA6F,KAAAA,EACAjF,SAAAA,EACA5tE,KAAAA,EACA0c,MAAAA,EACAq2D,iBAAAA,EACA/E,eAAAA,MAEA,MAAMjxE,GAAOC,EAAAA,EAAAA,KACP0wE,GAAe7uE,EAAAA,EAAAA,KAAQ,IA0E/B,SAAyBgvE,EACvBgF,EAKA7E,GACA,IAAK6E,EACH,MAAO,CAAEhF,cAAAA,GAEX,MAAM,gBAAEE,GAAoB8E,EACtBG,EAAcjF,GAAmBA,EAAgBxD,YAClD,GAAEwD,EAAgBxD,gBAAgBwD,EAAgBtD,SAASsD,EAAgBrD,mBAC5E/rE,GACE,MAAEisE,EAAF,KAAS9xD,GAAS+5D,EACxB,MAAO,CACLhF,cAAAA,EACAC,gBAAiB,SACjBC,gBAAiBiF,EACjBl6D,KAAAA,EACA8xD,MAAAA,EACAoD,eAAAA,GA9FOyD,CAAgBsB,EAAkBF,EAAM7E,IAC9C,CAAC6E,EAAM7E,EAAgB+E,IAE1B,OACE,mBAAC53D,GAAA,EAAD,CACE/d,UAAU,oCACV2B,OAAQA,EACR0F,QAASA,GAET,8BACE,0BAAKrH,UAAU,SAASO,IAAKZ,EAAK4b,MAAQ,WAAQha,GAChD,mBAACK,EAAA,EAAD,CACE5B,UAAU,eACV8B,MAAM,cACND,OAAK,EACLzB,KAAK,UACLH,QAASoH,EACTtF,UAAU,SAEV,wBAAG/B,UAAU,gBAEf,iCAAML,EAAK,kBAAX,MAEF,0BAAKK,UAAU,iCACb,mBAAC,GAAD,CACEowE,OAAQA,EACRC,eAAgBA,EAChBE,WAAYmF,EACZvF,eAAgB,CACdK,SAAAA,EACA5tE,KAAAA,EACA0c,MAAAA,GAEFgxD,aAAcA,EACdV,SAAUA,Y,+FC/DtB,MAAMz3B,EAAyBn2C,EAAAA,GAA0B,IAAM,IAuG/D,GAAe8E,EAAAA,EAAAA,KArGoB,EACjC2qB,UAAAA,GAAY,EACZsmB,kBAAAA,EACAl5B,MAAAA,EACAiW,KAAAA,EACAhX,YAAAA,EAAc,WACds5B,YAAAA,EAAc,OACdC,WAAAA,EACAY,2BAAAA,EACA49B,cAAAA,EACA1zD,SAAAA,MAGA,MAAMnW,GAAWzE,EAAAA,EAAAA,IAAyB,MACpC5H,GAAOC,EAAAA,EAAAA,MAENi1B,EAAUihD,IAAe7yE,EAAAA,EAAAA,IAAS,KAClC8yE,EAAWC,IAAgB/yE,EAAAA,EAAAA,KAAS,GAgD3C,OA9CAC,EAAAA,EAAAA,KAAU,KACHuE,EAAAA,IACH9B,YAAW,KACTqG,EAASxD,QAASmU,UACjBw7B,KAEJ,KAEHj1C,EAAAA,EAAAA,KAAU,KACJ2b,GACF1G,uBAAsB,KACpBnM,EAASxD,QAASmU,QAClB3Q,EAASxD,QAASytE,cAGrB,CAACp3D,IAgCF,2BAAMqW,OAAO,GAAG/S,SAblB,SAAsBsd,GACpBA,EAAM70B,iBAEF6mB,GAIAskD,GACF5zD,EAAS0S,IAK6BqhD,aAAa,OACnD,0BACEl2E,WAAW8D,EAAAA,EAAAA,GAAe,6BAA8B+wB,GAAY,UAAWhW,GAAS,SACxFte,IAAKZ,EAAK4b,MAAQ,WAAQha,GAE1B,4BACE2J,IAAKc,EACLhM,UAAU,eACVsG,KAAMyxC,EAAoB,OAAS,WACnC56C,GAAG,mBACHqJ,MAAOquB,GAAY,GACnBqhD,aAAa,mBACb3pE,SA1CR,SAA0BxI,GACpB8a,GACFw4B,IAGF,MAAM,OAAE5sC,GAAW1G,EACnB+xE,EAAYrrE,EAAOjE,OACnBwvE,EAAavrE,EAAOjE,MAAMnI,QAAU83E,EAAAA,IAChCN,GACFA,EAAcprE,EAAOjE,QAkCjBjG,IAAI,SAEN,gCAAQse,GAASiW,GAAQhX,GACzB,0BACE9d,UAAU,kBACVC,QAnCR,WACEg4C,GAA4BF,IAmCtB/yB,KAAK,SACLC,SAAU,EACV3F,MAAM,8BAEN,wBAAGtf,UAAW+3C,EAAoB,WAAa,sBAGlDg+B,GACC,mBAAC,IAAD,CAAQzvE,KAAK,SAASI,QAAM,EAAC+qB,UAAWA,GACrC2lB,Q,sFCxGX,MACMg/B,EAAuC,CAAC,EAAG,IAC3CC,EAAwC,CAAC,EAAG,IAC5CC,EAAsC,CAAC,GAAI,GAC3CC,EAAev0E,EAAAA,GAA0Bw0E,EAAAA,GAA2BC,EAAAA,GAsD1E,GAAe3vE,EAAAA,EAAAA,KApDsB,EAAGixC,kBAAAA,EAAmBD,MAAAA,MACzD,MAAO4+B,EAAiBC,IAAsB1zE,EAAAA,EAAAA,OACvC2zE,EAAgBC,IAAqB5zE,EAAAA,EAAAA,OACrC6zE,EAAqBC,IAA0B9zE,EAAAA,EAAAA,KAAS,IACxD+zE,EAAaC,IAAkBh0E,EAAAA,EAAAA,KAAS,IAE/CC,EAAAA,EAAAA,KAAU,KACHwzE,EAGH/wE,YAAW,IAAMsxE,GAAe,IAhBP,MAczBr7C,EAAAA,EAAAA,GAAiB,eAAeC,KAAK86C,KAItC,CAACD,KAEJxzE,EAAAA,EAAAA,KAAU,KACH0zE,IACHh7C,EAAAA,EAAAA,GAAiB,cAAcC,KAAKg7C,KAErC,CAACD,IAEJ,MAAMM,GAAwBx3E,EAAAA,EAAAA,KAAY,IAAMq3E,GAAuB,IAAO,IAE9E,OACE,0BAAK55E,GAAG,SAAS6C,UAAW83C,EAAQ,MAAQ,KACxCg/B,GACA,0BAAK92E,UAAU,mBAEhB02E,GACC,mBAAC,IAAD,CACEv5E,GAAG,cACHiD,KAAM03C,EAAQq/B,EAAAA,GAAsBZ,EACpCv2E,UAAWg3E,EAAc,SAAW,QACpCz7C,cAAem7C,EACfU,YAAahB,EACb75C,QAAM,EACNC,OAAQ06C,IAGXN,GACC,mBAAC,IAAD,CACEz5E,GAAG,aACHiD,KAAM03C,EAAQq/B,EAAAA,GAAsBZ,EACpCv2E,UAAWg3E,EAAc,QAAU,SACnCz7C,cAAeq7C,EACfQ,YAAar/B,EAAoBs+B,EAAsBC,EACvD/5C,QAAM,S,uDCjDT,MAAM86C,EAA0B,CACrCC,W,QACAC,e,QACAC,Y,QACAC,W,QACAC,W,QACAC,W,QACAC,iB,SAGa,SAASh8C,EAAiBlgB,GACvC,MAAMm8D,EAAOR,EAAwB37D,GAAM4I,QAAQ5gB,OAAOo0E,SAASl8E,OAAQ,IAE3E,OAAO+mD,EAAAA,GAAmB,OAAMk1B,IAAQ9jE,EAAAA,GAAAA,U,kHCjB1C,MAAMgkE,EAAiE,CACrEzxE,KAAM,OACN0xE,QAAS,GACTC,OAAQ,OACRC,QAAQ,GAIV,IAAIC,EACAC,EAWAC,EAwCJ,MAwDA,GAAevxE,EAAAA,EAAAA,KAxDiB,EAAGgoD,KAAAA,EAAMviD,SAAAA,EAAUlF,QAAAA,MACjD,MAAOixE,EAAgBC,IAAqBt1E,EAAAA,EAAAA,KAAS,IAErDC,EAAAA,EAAAA,KAAU,KACH4rD,IAIAwpB,EA9CTrtC,eAA2ButC,GACzB,IACE,MAAMC,EAAgB38E,SAAS2c,eAAe,eAC9C,IAAKggE,EACH,OAGF,MAAM,YAAE/sC,EAAF,aAAenuC,GAAiBk7E,EAEtCJ,EAAU,IAAIF,EAAQM,EAAe,CACnCC,YAAY,EACZC,SAAU,CACR7tE,MAAO4gC,EACProC,OAAQ9F,GAEVq7E,SAAU,CACR9tE,MAAO4gC,EAAc,GACrBroC,OAAQ9F,EAAe,GACvB+I,KAAM,YAIV,MAAMyiC,QAAgB8vC,EAAAA,EAAAA,IAAcL,SAC9BH,EAAQS,KAAK,CAAE/xE,IAAKgiC,IAC1B,MAAOgwC,GACHC,EAAAA,IAEFC,QAAQp6D,MAAMk6D,IAyBhBG,CAAYpqB,GA/DhB7jB,iBAME,OALKmtC,IACHA,EAAiB,qDACjBD,SAAiBC,GAAgB3hB,SAG5B2hB,EAoDHe,GAAgBt9C,MAAK,IAAM08C,GAAkB,QAM9C,CAACzpB,EAAMwpB,IAEV,MAAM34E,GAAOC,EAAAA,EAAAA,KAab,OACE,mBAACme,EAAA,EAAD,CACEpc,OAAQuG,QAAQ4mD,GAChBznD,QAASA,EACTiY,MAAM,qBACNtf,UAAU,YACV6mD,gBAAc,GAEbyxB,EACC,0BAAKn7E,GAAG,gBAER,mBAACwhB,EAAA,EAAD,MAEF,mBAAC/c,EAAA,EAAD,CACE5B,UAAU,iBACV6B,OAAK,EACLC,MAAM,UACN7B,QA5BNgrC,iBACE,IAAKotC,EACH,OAGF,MAAM3jC,QAA8B2jC,EAAQ3jC,OAAOqjC,GAC7CqB,EAA+B,iBAAX1kC,EAAsBA,GAAS2kC,EAAAA,EAAAA,IAAW3kC,EAAQ,cAE5EnoC,EAAS6sE,IAqBLr3E,UAAWpC,EAAK,cAEhB,wBAAGK,UAAU,oBC3CrB,GAAe8G,EAAAA,EAAAA,KAhEsB,EACnCwY,MAAAA,EAAQ,8BACRhT,SAAAA,EACAmtB,qBAAAA,EACAltB,SAAAA,MAEA,MAAO+sE,EAAcC,IAAmBt2E,EAAAA,EAAAA,OACjCu2E,EAAgBC,IAAqBx2E,EAAAA,EAAAA,IAA6Bw2B,IAEzEv2B,EAAAA,EAAAA,KAAU,KACRu2E,EAAkBhgD,KACjB,CAACA,IA2BJ,MAAMigD,GAAiB51E,EAAAA,EAAAA,GACrB01E,GAAkB,SAClBltE,GAAY,YAGd,OACE,0BAAKtM,UAAU,kBACb,4BACEA,UAAW05E,EACX10D,KAAK,SACLC,SAAU,EACV3F,MAAOA,GAEP,4BACEhZ,KAAK,OACLiG,SAxCR,SAA0BkzB,GACxB,MAAMh1B,EAASg1B,EAAMh1B,OAEhBA,GAAWA,EAAO8/B,OAAU9/B,EAAO8/B,MAAM,KAI9CgvC,EAAgB9uE,EAAO8/B,MAAM,IAC7B9/B,EAAOjE,MAAQ,KAiCTmgC,OAAO,0BAET,wBAAG3mC,UAAU,oBACZw5E,GAAkB,0BAAKp9E,IAAKo9E,EAAgB1pE,IAAI,YAEnD,mBAAC,EAAD,CAAWg/C,KAAMwqB,EAAcjyE,QAzBnC,WACEkyE,OAAgBh4E,IAwB4CgL,SAnC9D,SAA0B6sE,GACxBG,OAAgBh4E,GAChBgL,EAAS6sE,GAELI,GACFG,IAAIC,gBAAgBJ,GAEtBC,EAAkBE,IAAIE,gBAAgBT,Y","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/common/ReportMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/getSenderName.ts","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/ui/RangeSlider.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/systemFilesDialog.ts","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helper/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/common/helpers/animatedAssets.ts","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls && mediaEls[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isChatPrivate } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId, messageId, sender, isAvatar, message, closeMediaViewer, focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const isFromChat = sender.id < 0;\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isFromChat ? (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar ? lang('lng_mediaview_profile_photo') : formatMediaDateTime(lang, message!.date * 1000)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isChatPrivate(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, { FC, useMemo } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaDownload from '../../hooks/useMediaDownload';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    isDownloadStarted,\n    downloadProgress,\n    handleDownloadClick,\n  } = useMediaDownload(\n    message && isVideo ? getMessageMediaHash(message, 'download') : undefined,\n    fileName,\n  );\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloadStarted ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloadStarted ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloadStarted && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleDownloadClick}\n        >\n          {isDownloadStarted ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default MediaViewerActions;\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, { FC, useState, useEffect } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: OnChangeHandler;\n};\n\ntype OnChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => void;\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, onSeek)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(downloadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * downloadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(currentTime: number, duration: number, bufferedProgress: number, onSeek: OnChangeHandler) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\">\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n        <input\n          min=\"0\"\n          max=\"100\"\n          step={0.01}\n          type=\"range\"\n          onInput={onSeek}\n          className=\"player-seekline-input\"\n          value={percentagePlayed || 0}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Button from '../ui/Button';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  downloadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  downloadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      videoRef.current!.play();\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    e.stopPropagation();\n\n    videoRef.current!.currentTime = (Number(e.target.value) * videoRef.current!.duration) / 100;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif ? handleMouseOver : undefined}\n      onMouseOut={!isGif ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : downloadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={!isPlayed || isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser, ApiDimensions,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageDocument,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions, getMessageFileSize,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../hooks/useMediaWithDownloadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageId?: number;\n  senderId?: number;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const isSingleSlide = Boolean(webPagePhoto || webPageVideo);\n  const messageIds = useMemo(() => {\n    return isSingleSlide && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isSingleSlide, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<number | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(false);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const blobUrlPictogram = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const blobUrlPreview = useMedia(\n    previewMediaHash,\n    undefined,\n    isAvatar && previewMediaHash && previewMediaHash.startsWith('profilePhoto')\n      ? ApiMediaFormat.DataUri\n      : ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaData)) || blobUrlPreview || blobUrlPictogram;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed && !IS_TOUCH_ENV) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else if (!(e.target && (e.target as HTMLElement).closest('.MediaViewerFooter'))) {\n          close();\n        }\n      } : undefined,\n    });\n  }, [close, isFooterHidden, isGif, isPhoto, isZoomed, selectNextMedia, selectPreviousMedia]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const handleToggleFooterVisibility = useCallback(() => {\n    if (IS_TOUCH_ENV && (isPhoto || isGif)) {\n      setIsFooterHidden(!isFooterHidden);\n    }\n  }, [isFooterHidden, isGif, isPhoto]);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  function renderSlide(isActive: boolean) {\n    if (isAvatar) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaData || blobUrlPreview,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div\n          key={messageId}\n          className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}\n          onClick={handleToggleFooterVisibility}\n        >\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaData || blobUrlPreview || blobUrlPictogram,\n            message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaData}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n              downloadProgress={downloadProgress}\n              fileSize={videoSize!}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHidden={isFooterHidden && (!isVideo || isGif)}\n              isForVideo={isVideo && !isGif}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaData || blobUrlPreview}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={isAvatar}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getCanPostInChat, getChatTitle, isChatPrivate, sortChatIds,\n} from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick, unique } from '../../util/iteratees';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './ForwardPicker.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  pinnedIds?: number[];\n  activeListIds?: number[];\n  archivedListIds?: number[];\n  orderedPinnedIds?: number[];\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\nconst MODAL_HIDE_DELAY_MS = 300;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  pinnedIds,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isOpen) {\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        setTimeout(() => {\n          requestAnimationFrame(() => {\n            if (inputRef.current) {\n              inputRef.current.focus();\n            }\n          });\n        }, FOCUS_DELAY_MS);\n      }\n    } else {\n      if (inputRef.current) {\n        inputRef.current.blur();\n      }\n\n      setTimeout(() => {\n        setFilter('');\n      }, MODAL_HIDE_DELAY_MS);\n    }\n  }, [isOpen]);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...activeListIds || [],\n      ...archivedListIds || [],\n    ];\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang, pinnedIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadMoreChats, chatIds, Boolean(filter));\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.currentTarget.value);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      setForwardChatId({ id: viewportIds[index === -1 ? 0 : index] });\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={exitForwardMode}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={inputRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={lang('ForwardTo')}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={exitForwardMode}\n      className=\"ForwardPicker\"\n      header={modalHeader}\n    >\n      {viewportIds && viewportIds.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => setForwardChatId({ id })}\n            >\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">Sorry, nothing found.</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      pinnedIds: orderedPinnedIds.active,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissDialog' | 'acceptInviteConfirmation'>;\n\nconst Dialogs: FC<StateProps & DispatchProps> = ({ dialogs, dismissDialog, acceptInviteConfirmation }) => {\n  const lang = useLang();\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, participantsCount, isChannel,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      dismissDialog();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={title}\n      >\n        {participantsCount !== undefined && <p>{participantsText}</p>}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>{joinText}</Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={dismissDialog}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={dismissDialog}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {dialogs.map(renderDialog)}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissDialog', 'acceptInviteConfirmation']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\nimport renderText from '../common/helpers/renderText';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={dismissNotification}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(url);\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const currentYear = selectedDate.getFullYear();\n  const currentMonth = selectedDate.getMonth();\n  const currentDate = selectedDate.getDate();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(defaultSelectedDate);\n    }\n  }, [isOpen, defaultSelectedDate, prevIsOpen]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < defaultSelectedDate.getTime()) {\n      setSelectedDate(defaultSelectedDate);\n      setSelectedHours(formatInputTime(defaultSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(defaultSelectedDate.getMinutes()));\n    }\n  }, [defaultSelectedDate, isTimeInputFocused, isFutureMode, selectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const calendarGrid = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${selectedDate.getMonth() + 1}`)}\n            {' '}\n            {selectedDate.getFullYear()}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {calendarGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                gridDate === currentDate && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const grid: number[] = [];\n\n  const date = new Date();\n  date.setFullYear(year);\n  date.setMonth(month);\n  date.setDate(1);\n\n  const monthStartDay = date.getDay() || 7;\n  // Fill empty cells\n  for (let i = 1; i < monthStartDay; i++) {\n    grid.push(0);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    grid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  return grid;\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(date)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMessagesByDate' | 'closeHistoryCalendar'>;\n\nconst HistoryCalendar: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, selectedAt, searchMessagesByDate, closeHistoryCalendar,\n}) => {\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      selectedAt: global.historyCalendarSelectedAt,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesByDate', 'closeHistoryCalendar',\n  ]),\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isChatPrivate(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: number;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'reportMessages' | 'exitMessageSelectMode'>;\n\nconst ReportMessageModal: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  messageIds,\n  reportMessages,\n  exitMessageSelectMode,\n  onClose,\n}) => {\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined, (setGlobal, actions): DispatchProps => pick(actions, [\n    'reportMessages', 'exitMessageSelectMode',\n  ]),\n)(ReportMessageModal));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  selectedMessageIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages'>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  selectedMessageIds,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount);\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              <MenuItem\n                icon=\"forward\"\n                ariaLabel=\"Forward Messages\"\n                onClick={openForwardMenuForSelectedMessages}\n              >\n                <span className=\"item-text\">\n                  {lang('Forward')}\n                </span>\n              </MenuItem>\n            )}\n            {canReportMessages && (\n              <MenuItem\n                icon=\"flag\"\n                onClick={openReportModal}\n                disabled={!canReportMessages}\n                ariaLabel={lang('Conversation.ReportMessages')}\n              >\n                <span className=\"item-text\">\n                  {lang('Report')}\n                </span>\n              </MenuItem>\n            )}\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={openDeleteModal}\n              disabled={!canDeleteMessages}\n              ariaLabel={lang('EditAdminGroupDeleteMessages')}\n            >\n              <span className=\"item-text\">\n                {lang('Delete')}\n              </span>\n            </MenuItem>\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      selectedMessageIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['exitMessageSelectMode', 'openForwardMenuForSelectedMessages']),\n)(MessageSelectToolbar));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatPrivate, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  withUsername?: boolean;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  isMuted,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    isMuted,\n    handleDelete: openDeleteModal,\n  });\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isChatPrivate(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n      isMuted,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: number[];\n  usersById: Record<number, ApiUser>;\n  recentlyFoundChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n      onReset();\n      setTimeout(() => {\n        addRecentlyFoundChatId({ id });\n      }, SEARCH_CLOSE_TIMEOUT_MS);\n    },\n    [openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser && privateChatUser.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  localContactIds?: number[];\n  localChatIds?: number[];\n  localUserIds?: number[];\n  globalChatIds?: number[];\n  globalUserIds?: number[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: number) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById),\n    ];\n  }, [\n    searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById, usersById,\n  ]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]),\n      chatsById, true);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: number;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props && props.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const { foundIds } = (resultsByType && resultsByType[currentType]) || {};\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: number) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport {\n  getChatTitle,\n  getSenderTitle,\n  isChatPrivate,\n  isChatGroup,\n} from '../../../../modules/helpers';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport function getSenderName(\n  lang: LangFn, message: ApiMessage, chatsById: Record<number, ApiChat>, usersById: Record<number, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isChatPrivate(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getSenderTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if (isChatPrivate(senderId) && (sender as ApiUser).isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n      const message = globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: number) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            target=\"searchResult\"\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n  onScreenSelect,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadProfilePhotos'>;\n\nconst SettingsMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  loadProfilePhotos,\n  currentUser,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  const profileId = currentUser ? currentUser.id : undefined;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadProfilePhotos']),\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showDialog'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showDialog,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, notifySettings, notifyExceptions, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders && userFolders.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showDialog']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet, pick } from '../../../../util/iteratees';\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: number[];\n  loadedArchivedChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...loadedActiveChatIds || [],\n      ...loadedArchivedChatIds || [],\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isChatPrivate(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: number[];\n  selectedIds: number[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: number) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isChatPrivate(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds && viewportIds.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: number[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, useMemo, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './RangeSlider.scss';\n\ntype OwnProps = {\n  options?: string[];\n  range?: { min: number; max: number; step?: number };\n  label?: string;\n  value: number;\n  disabled?: boolean;\n  onChange: (value: number) => void;\n};\n\nconst RangeSlider: FC<OwnProps> = ({\n  options,\n  range,\n  label,\n  value,\n  disabled,\n  onChange,\n}) => {\n  const lang = useLang();\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onChange(Number(event.currentTarget.value));\n  }, [onChange]);\n\n  const className = buildClassName(\n    'RangeSlider',\n    disabled && 'disabled',\n  );\n\n  const trackWidth = useMemo(() => {\n    if (options) {\n      return (value / (options.length - 1)) * 100;\n    } else if (range) {\n      const possibleValuesLength = (range.max - range.min) / (range.step || 1);\n      return ((value - range.min) / possibleValuesLength) * 100;\n    }\n    return 0;\n  }, [value, options, range]);\n\n  const [min, max, step] = useMemo(() => {\n    if (options) {\n      return [0, options.length - 1, 1];\n    } else if (range) {\n      return [range.min, range.max, range.step || 1];\n    }\n\n    return [0, 0, 0];\n  }, [range, options]);\n\n  return (\n    <div className={className}>\n      {label && (\n        <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <span className=\"label\" dir=\"auto\">{label}</span>\n          {range && (\n            <span className=\"value\" dir=\"auto\">{value}</span>\n          )}\n        </div>\n      )}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          // @ts-ignore\n          style={`width: ${trackWidth}%`}\n        />\n        <input\n          min={min}\n          max={max}\n          value={value}\n          step={step}\n          type=\"range\"\n          onChange={handleChange}\n        />\n        {options && (\n          <div className=\"slider-options\">\n            {options.map((option, index) => (\n              <div\n                className={buildClassName('slider-option no-selection', index === value && 'active')}\n                onClick={() => onChange(index)}\n              >\n                {option}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RangeSlider);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(lottieData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'messageTextSize' |\n  'animationLevel' |\n  'messageSendKeyCombo' |\n  'shouldAutoDownloadMediaFromContacts' |\n  'shouldAutoDownloadMediaInPrivateChats' |\n  'shouldAutoDownloadMediaInGroups' |\n  'shouldAutoDownloadMediaInChannels' |\n  'shouldAutoPlayGifs' |\n  'shouldAutoPlayVideos' |\n  'shouldSuggestStickers' |\n  'shouldLoopStickers'\n)> & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldAutoDownloadMediaFromContacts,\n  shouldAutoDownloadMediaInPrivateChats,\n  shouldAutoDownloadMediaInGroups,\n  shouldAutoDownloadMediaInChannels,\n  shouldAutoPlayGifs,\n  shouldAutoPlayVideos,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds && stickerSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById && stickerSetsById[id] && stickerSetsById[id].installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          // TODO Remove memo-killer\n          range={{ min: 12, max: 20 }}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoDownloadMedia')}</h4>\n\n        <Checkbox\n          label={lang('Contacts')}\n          checked={shouldAutoDownloadMediaFromContacts}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaFromContacts: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadPrivateChats')}\n          checked={shouldAutoDownloadMediaInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInPrivateChats: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadGroupChats')}\n          checked={shouldAutoDownloadMediaInGroups}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInGroups: isChecked })}\n        />\n        <Checkbox\n          label={lang('FilterChannels')}\n          checked={shouldAutoDownloadMediaInChannels}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInChannels: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={shouldAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={shouldAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayVideos: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldAutoDownloadMediaFromContacts',\n        'shouldAutoDownloadMediaInPrivateChats',\n        'shouldAutoDownloadMediaInGroups',\n        'shouldAutoDownloadMediaInChannels',\n        'shouldAutoPlayGifs',\n        'shouldAutoPlayVideos',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(\n    document.thumbnail && document.thumbnail.dataUri,\n    Boolean(previewBlobUrl),\n    true,\n  );\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || localBlobUrl, 'slow');\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, downloadProgress,\n  } = useMediaWithDownloadProgress(localMediaHash, !isDownloadAllowed);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isDownloadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasDownloadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        {shouldRenderThumb && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n          />\n        )}\n        {shouldRenderFullMedia && (\n          <img\n            src={previewBlobUrl || localBlobUrl}\n            className={`full-media ${transitionClassNames}`}\n            alt=\"\"\n          />\n        )}\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={downloadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper && currentWallpaper.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers && loadedWallpapers[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' |\n  'updateNotificationSettings' | 'updateWebNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n  updateWebNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasWebNotifications: e.target.checked });\n          }}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasPushNotifications: e.target.checked });\n          }}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            disabled={!hasWebNotifications}\n            range={{\n              min: 0,\n              max: 10,\n            }}\n            value={notificationSoundVolume}\n            onChange={(volume) => {\n              updateWebNotificationSettings({ notificationSoundVolume: volume });\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n    hasWebNotifications: global.settings.byKey.hasWebNotifications,\n    hasPushNotifications: global.settings.byKey.hasPushNotifications,\n    notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n  'updateWebNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings' | 'loadContentSettings' | 'updateContentSettings'\n)>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n  loadContentSettings,\n  updateContentSettings,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber && privacy.phoneNumber.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen && privacy.lastSeen.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto && privacy.profilePhoto.visibility,\n      visibilityPrivacyForwarding: privacy.forwards && privacy.forwards.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite && privacy.chatInvite.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings', 'loadContentSettings', 'updateContentSettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<number, ApiChat>;\n  usersById?: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive className=\"no-icon\">\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        className=\"no-icon\"\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isChatPrivate,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<number, ApiChat>;\n  usersByIds: Record<number, ApiUser>;\n  blockedIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  unblockContact,\n}) => {\n  const handleUnblockClick = useCallback((contactId: number) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: number, i: number, viewportOffset: number) {\n    const isPrivate = isChatPrivate(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user && user.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds && blockedIds.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">\n              List is empty\n            </div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={() => {\n        }}\n        className=\"not-implemented\"\n        ariaLabel=\"Add a blocked user\"\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isChatPrivate, prepareChatList,\n} from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<number[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isChatPrivate(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: number[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  contactIds?: number[];\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive, onReset,\n  filter, usersById, contactIds, loadContactList, openChat, serverTimeOffset,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n    },\n    [openChat],\n  );\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds && viewportIds.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, isUserBot, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: number[];\n  onSelectedMemberIdsChange: (ids: number[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return !user || !isUserBot(user) || user.canBeInvitedToGroup;\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds,\n    currentUserId, usersById,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus && fetchingStatus.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: number[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = creationError || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<number[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","const IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nconst preventDefault = (e: Event) => {\n  e.preventDefault();\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    preventDefault(e);\n  }\n}\n\nexport function disableScrolling() {\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  window.ontouchmove = preventDefault; // mobile\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  // eslint-disable-next-line no-null/no-null\n  window.ontouchmove = null;\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection\n      && selection.anchorNode\n      && selection.anchorNode.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n}) => {\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const { positionX, positionY, style } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport { selectAllowedMessageActions, selectCurrentMessageList } from '../../../modules/selectors';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album && album.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${Math.abs(message.chatId)}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectStickerSet, selectStickerSetByShortName } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet && stickerSet.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={handleSelect}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { fromSticker, stickerSetShortName }: OwnProps) => {\n    return {\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { selectChat, selectNotifySettings, selectNotifyExceptions } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { isChatPrivate, getCanDeleteChat, selectIsChatMuted } from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateChatMutedState' | 'enterMessageSelectMode' | 'sendBotCommand' | 'restartBot'\n)>;\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canDeleteChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n  sendBotCommand,\n  restartBot,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'Subscribe' : 'Join Group')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {canSelect && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'Delete'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate: isChatPrivate(chat.id),\n      canDeleteChat: getCanDeleteChat(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n    'sendBotCommand',\n    'restartBot',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'openHistoryCalendar' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds && foundIds.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'openHistoryCalendar',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  useEffect(() => {\n    setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [items, shouldRemoveSelectionOnReset]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n  usersById?: Record<number, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: number, forceFocus = false) => {\n    const user = usersById && usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers && filteredUsers.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers && renderedChatMembers.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD, EDITABLE_INPUT_MODAL_ID } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  isReady?: boolean;\n  currentUserId?: number;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  isReady,\n  currentUserId,\n  groupChatMembers,\n  usersById,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files && files.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => a.mimeType.startsWith('image/'));\n  const areAllVideos = renderingAttachments.every((a) => a.mimeType.startsWith('video/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={Boolean(attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis && recentEmojis.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers && set.stickers.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds && addedSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">Sending stickers is not allowed in this chat.</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">You have no saved Stickers.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, className, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = gif.thumbnail && !!gif.thumbnail.dataUri;\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail && gif.thumbnail.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { transitionClassNames } = useTransitionForMedia(hasThumbnail || previewBlobUrl || videoData, 'slow');\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    transitionClassNames,\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {!hasThumbnail && previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"thumbnail\"\n        />\n      )}\n      {(shouldRenderVideo || previewBlobUrl) && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker, shouldPreserveInput?: boolean) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  isOpen, allowedAttachmentOptions, isLeftColumnShown,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_FOR_QUICK_UPLOAD).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n  sendBotCommand,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandMenu: FC<OwnProps & DispatchProps> = ({\n  isOpen, botCommands, onClose, sendBotCommand,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandMenu));\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers && displayedStickers.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../../hooks/useTransitionForMedia';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(mediaBlobUrl, 'slow');\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        {shouldRenderThumb && (\n          <img src={(photo && photo.thumbnail && photo.thumbnail.dataUri) || thumbnailDataUrl} alt=\"\" />\n        )}\n        {shouldRenderFullMedia && (\n          <img src={mediaBlobUrl} className={`${transitionClassNames} full-media`} alt=\"\" />\n        )}\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={shouldRenderFullMedia ? mediaBlobUrl : (thumbnail && thumbnail.dataUri) || thumbnailDataUrl}\n      transitionClassNames={shouldRenderFullMedia ? transitionClassNames : undefined}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({ inlineResult, observeIntersection, onClick }) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: number;\n  isGallery?: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  onSelectResult: (inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('startBot' | 'openChat' | 'sendInlineBotResult')>;\n\nconst InlineBotTooltip: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  loadMore,\n  onClose,\n  openChat,\n  startBot,\n  onSelectResult,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults && inlineBotResults.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !renderedInlineBotResults || (!renderedInlineBotResults.length && !switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'video':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'startBot', 'openChat', 'sendInlineBotResult',\n  ]),\n)(InlineBotTooltip));\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  useHistoryBack(isActive, onClose);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = foundResults && foundResults[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set && set.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...set.covers || [], ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: number[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters && voters[answer.option],\n      offset: (offsets && offsets[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{summary.question}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  isMuted,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, chat, progress, isMuted,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'leaveChannel' | 'deleteChannel' | 'deleteChat' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteChat,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo && chat.fullInfo.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'leaveChannel', 'deleteChannel', 'deleteChat', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights && defaultBannedRights[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  updateChatMemberBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n\n    return { chat, usersById };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat && chat.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat && chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount!, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat && chat.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo && chat.fullInfo.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<number, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: number[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<number>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat && linkedChat.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: number) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.bannedRights) || (chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: number;\n  isChannel: boolean;\n  usersById: Record<number, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<number, ApiUser>;\n  currentUserId?: number;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.adminRights) || {});\n    setCustomTitle(((selectedChatMember && selectedChatMember.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  useHistoryBack(isActive, onClose);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById, undefined, serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: number) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: number;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { countryList } from '../../util/phoneNumber';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts && parts[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts && parts[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { pick } from '../../util/iteratees';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error && error.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option ? option.prices : undefined;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption ? shippingOption.title : undefined;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress && shippingAddress.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 0.8,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","withGlobal","global","chatId","messageId","isAvatar","sender","isChatPrivate","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","lang","useLang","isFromChat","senderTitle","getSenderTitle","className","onClick","Avatar","key","size","chat","user","dir","renderText","formatMediaDateTime","date","mediaData","isVideo","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","isDownloadStarted","downloadProgress","handleDownloadClick","useMediaDownload","getMessageMediaHash","undefined","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","height","clientHeight","REM","handleResize","throttle","window","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","stopEvent","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","timeout","setTimeout","clearTimeout","body","remove","downloadedPercent","totalSize","percentagePlayed","percentageBuffered","min","max","step","type","onInput","value","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","memo","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","useRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","current","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","play","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","handleSeek","Number","target","toggleControls","togglePayingStateBySpace","preventDefault","wrapperStyle","width","videoStyle","onMouseOver","onMouseOut","ref","autoPlay","playsInline","loop","muted","onEnded","onDoubleClick","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","isSeeking","handleStartSeek","handleStopSeek","disabled","onChange","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","getBoundingClientRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","ANIMATION_DURATION","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","isFromSharedMedia","isFromSearch","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isSingleSlide","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","isGhostAnimation","isFooterHidden","setIsFooterHidden","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","getMediaHash","isFull","photos","getChatAvatarHash","blobUrlPictogram","useMedia","ApiMediaFormat","previewMediaHash","blobUrlPreview","startsWith","fullMediaData","useMediaWithDownloadProgress","getMessageMediaFormat","localBlobUrl","bestImageData","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","getMessageFileName","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","toggle","forceUpdate","useForceUpdate","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","textParts","renderMessageText","hasFooter","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","matches","getTopOffset","top","fromTop","left","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","captureEvents","excludedClosestSelector","onSwipe","SwipeDirection","handlePan","handleToggleFooterVisibility","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","useHistoryBack","ShowTransition","isRtl","Transition","activeKey","name","chats","byId","chatsById","listIds","orderedPinnedIds","currentUserId","pinnedIds","active","activeListIds","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","filter","setFilter","focus","blur","chatIds","priorityIds","unique","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","viewportIds","getMore","useInfiniteScroll","handleFilterChange","containerRef","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","dialog","invite","hash","title","participantsCount","isChannel","participantsText","joinText","isText","renderInvite","getReadableErrorText","notifications","dismissNotification","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","useFlag","selectedDate","setSelectedDate","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","currentDate","getTime","shouldDisableNextMonth","shouldDisablePrevMonth","calendarGrid","grid","setFullYear","setMonth","setDate","monthStartDay","getDay","i","push","gridDate","buildCalendarGrid","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","formatDateToString","code","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","label","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canPost","openForwardMenuForSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isReportModalOpen","openReportModal","closeReportModal","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","destructive","onSelect","buttonRef","activeElement","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","withUsername","contextActions","useChatContextActions","handleDelete","handleClick","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","suggestion","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","query","handleChatClick","handlePickerItemClick","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","theme","selectTheme","isLoading","searchChatId","CURRENT_TYPE","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","getSenderName","senderName","isChatGroup","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","onPlay","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","onScreenSelect","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","currentUser","loadProfilePhotos","profileId","ProfileInfo","forceShowSelf","ChatExtra","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","notifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","data","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","noLoop","onLoad","pill","fluid","narrow","multiline","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","mode","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","event","isTouched","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","find","isMinimized","canClose","Checkbox","checked","isSelected","withChatType","archivedPinnedIds","chatFilter","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","range","handleChange","trackWidth","possibleValuesLength","option","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","shouldRenderFullMedia","useTransitionForMedia","getFirstLetters","hasThumbnail","stickers","firstSticker","isAnimated","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","ANIMATION_LEVEL_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldAutoDownloadMediaFromContacts","shouldAutoDownloadMediaInPrivateChats","shouldAutoDownloadMediaInGroups","shouldAutoDownloadMediaInChannels","shouldAutoPlayGifs","shouldAutoPlayVideos","shouldSuggestStickers","shouldLoopStickers","setSettingOption","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleStickerSetClick","stickerSets","installedDate","onCheck","isChecked","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","previewBlobUrl","thumbRef","useCanvasBlur","thumbnail","dataUri","shouldRenderThumb","isDownloadAllowed","setIsDownloadAllowed","fullMedia","wasDownloadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","onCapture","onDrag","onRelease","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","volume","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","phoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","ip","sessions","handler","dateActive","chatsByIds","usersByIds","blockedIds","unblockContact","handleUnblockClick","contactId","viewportOffset","isPrivate","CHAT_HEIGHT_PX","formatPhoneNumberWithCode","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","contactIds","serverTimeOffset","resultIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","isUserBot","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","passive","ontouchmove","onkeydown","enableScrolling","getCopyLabel","hasSelection","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCloseAnimationEnd","onCopyLink","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","useContextMenuPosition","Menu","noOptions","isScheduled","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","abs","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canDeleteChat","getCanDeleteChat","canStartBot","canRestartBot","canSubscribe","canSearch","canMute","canLeave","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleSubscribe","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","from","input","div","contentEditable","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","setTooltipItemVisible","selector","first","isFullyVisible","position","fastSmoothScroll","useKeyboardNavigation","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","isReady","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_FOR_QUICK_UPLOAD","areAllPhotos","mimeType","areAllVideos","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollHeight","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","noAnimate","onUnfaveClick","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","shouldPlay","canSendStickers","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","fullClassName","buttonClassName","gif","videoData","shouldRenderVideo","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","isLeftColumnShown","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","withAvatar","botCommand","bot","botCommands","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","isForGallery","inlineResult","webThumbnail","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","loadMore","startBot","onSelectResult","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","foundResult","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","getAllowedAttachmentOptions","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","linkedChatId","isBasicGroup","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickPermissions","handleClickAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","updateChatMemberBannedRights","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","hasLinkedChat","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","isOwner","handleAdminMemberClick","getMemberStatus","promotedByUser","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","countryList","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","field","handleErrorModalClose","PaymentStep","shippingOption","getShippingPrices","concat","acc","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","path","location","cropperResultOptions","quality","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL"],"sourceRoot":""}