{"version":3,"file":"5769.4843aa4d013605e8dd7f.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/selection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (global.premiumModal?.promo && global.premiumModal?.isOpen) {\n    global = {\n      ...global,\n      premiumModal: {\n        ...global.premiumModal,\n        isOpen: false,\n      },\n    };\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload) => {\n  const { chatId, text } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId });\n  }\n\n  return {\n    ...global,\n    requestedDraft: {\n      chatId,\n      text,\n    },\n  };\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload) => {\n  const { folderId } = payload;\n  return {\n    ...global,\n    deleteFolderDialogModal: folderId,\n  };\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global) => {\n  return {\n    ...global,\n    deleteFolderDialogModal: undefined,\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectScheduledMessages,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('changeForwardRecipient', (global) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  };\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noAuthors: payload,\n      noCaptions: payload && global.forwardMessages.noCaptions, // `noCaptions` cannot be true when `noAuthors` is false\n    },\n  };\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noCaptions: payload,\n      noAuthors: payload, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyTextToClipboard(result.join('\\n'));\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiError } from '../../../api/types';\n\nimport { APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectChatMessage, selectCurrentMessageList, selectIsTrustedBot } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      [isCustomEmoji ? 'customEmoji' : 'added']: {\n        setIds: order,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n\naddActionHandler('requestConfetti', (global, actions, payload) => {\n  const {\n    top, left, width, height,\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return {\n    ...global,\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload) => {\n  const { limit } = payload;\n\n  return {\n    ...global,\n    limitReachedModal: {\n      limit,\n    },\n  };\n});\n\naddActionHandler('closeLimitReachedModal', (global) => {\n  return {\n    ...global,\n    limitReachedModal: undefined,\n  };\n});\n\naddActionHandler('closeStickerSetModal', (global) => {\n  return {\n    ...global,\n    openedStickerSetShortName: undefined,\n  };\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload) => {\n  const { setIds } = payload;\n  return {\n    ...global,\n    openedCustomEmojiSetIds: setIds,\n  };\n});\n\naddActionHandler('closeCustomEmojiSets', (global) => {\n  return {\n    ...global,\n    openedCustomEmojiSetIds: undefined,\n  };\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload) => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', () => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        setGlobal({\n          ...getGlobal(),\n          isUpdateAvailable: true,\n        });\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('closePaymentModal', (global) => {\n  const status = global.payment.status;\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  global = {\n    ...global,\n    payment: {\n      ...global.payment,\n      status,\n    },\n  };\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'failed',\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload) => {\n  const isHidden = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isHidden,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_STATE } from '../../initialState';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  migrateCache(global, cloneDeep(INITIAL_STATE));\n\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { GlobalActions } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return undefined;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions,\n  } = global.forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = updateChatMessage(getGlobal(), chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload) => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsIds: result.ids });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  if (!chat.unreadMentionsCount) {\n    return;\n  }\n\n  const unreadMentionsCount = chat.unreadMentionsCount - messageIds.length;\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  if (!unreadMentions.length && unreadMentionsCount) {\n    actions.fetchUnreadMentions({\n      chatId: chat.id,\n      offsetId: Math.max(...messageIds),\n    });\n  }\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatId', async (global, actions, payload) => {\n  const { id } = payload;\n  let user = selectUser(global, id);\n  if (user && selectForwardsContainVoiceMessages(global)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id, accessHash });\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: getTranslation('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n      });\n      return;\n    }\n  }\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  });\n\n  actions.exitMessageSelectMode();\n  actions.forwardMessages({ isSilent: true });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiStickerSetInfo, ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global, actions) => {\n  void loadStickerSets(global.stickers.added.hash);\n  void loadCustomEmojiSets(global.customEmojis.added.hash);\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadPremiumStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadPremiumSetStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadPremiumGifts', async () => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    premiumGifts: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadCustomEmojiSets(hash?: string) {\n  const addedCustomEmojis = await callApi('fetchCustomEmojiSets', { hash });\n  if (!addedCustomEmojis) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  ));\n}\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetInfo: ApiStickerSetInfo) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetInfo },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if ('shortName' in stickerSetInfo && global.openedStickerSetShortName === stickerSetInfo.shortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    actions.showNotification({\n      message: getTranslation('StickerPack.ErrorNotFound'),\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { migrateChat } from './chats';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable });\n  setGlobal(global);\n\n  if (isUsernameAvailable === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic' });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { GlobalState, Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  if (previousGlobal?.connectionState === connectionState && previousGlobal?.authState === authState) return;\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async () => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeWebSessions: {\n      byHash: result,\n      orderedHashes: Object.keys(result),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  callApi('fetchFullUser', { id, accessHash });\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos: result.photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos: result.photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  bot = selectUser(getGlobal(), botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, botId, theme, buttonText,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload) => {\n  if (!global.webApp?.url) return undefined;\n  return {\n    ...global,\n    webApp: {\n      ...global.webApp,\n      slug: payload.slug,\n    },\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachBots(hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(bot, isEnabled);\n});\n\nasync function toggleAttachBot(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleAttachBot', { bot, isEnabled });\n  await loadAttachBots();\n}\n\nasync function loadAttachBots(hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      requestedAttachBotInstall: {\n        botId,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: { chatId, botId, startParam },\n        },\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global) => {\n  const { requestedAttachBotInstall } = global;\n\n  const { botId, onConfirm } = requestedAttachBotInstall!;\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInstall: undefined,\n  });\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  await toggleAttachBot(bot, true);\n  if (onConfirm) {\n    const { action, payload } = onConfirm;\n    getActions()[action](payload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInstall: undefined,\n  };\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload) => {\n  const { botId, filter, startParam } = payload;\n  const currentChatId = selectCurrentMessageList(global)?.chatId;\n\n  const { attachMenu: { bots } } = global;\n  const bot = bots[botId];\n  if (!bot) return;\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || botId,\n      botId,\n      startParam,\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInChat: {\n      botId,\n      filter: supportedFilters,\n      startParam,\n    },\n  });\n});\n\naddActionHandler('cancelAttachBotInChat', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInChat: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\nimport type { ApiChat, ApiRequestInputInvoice } from '../../../api/types';\n\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  if (!inputInvoice) return;\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(inputInvoice, requestInfo, saveInfo);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) return;\n    void validateRequestedInfo({\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo);\n  }\n});\n\nasync function validateRequestedInfo(inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openInvoice', async (global, actions, payload) => {\n  let invoice;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm({ slug: payload.slug });\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) return;\n    invoice = await getPaymentForm({\n      chat,\n      messageId: payload.messageId,\n    });\n  }\n  if (!invoice) return;\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice);\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n    },\n  });\n});\n\nasync function getPaymentForm(inputInvoice: ApiRequestInputInvoice) {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n  const { form, invoice } = result;\n  let global = setPaymentForm(getGlobal(), form);\n  let step = PaymentStep.PaymentInfo;\n  const {\n    shippingAddressRequested, nameRequested, phoneRequested, emailRequested,\n  } = global.payment.invoice || {};\n  if (shippingAddressRequested || nameRequested || phoneRequested || emailRequested) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n  return invoice;\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return undefined;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  void sendPaymentForm(requestInputInvoice, formId, {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  }, requestInfoId, shippingOptionId);\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'pending',\n    },\n  };\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/[^\\d]+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/[^\\d]+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  inputInvoice: ApiRequestInputInvoice,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n\n  if (result === true) {\n    let global = clearPayment(getGlobal());\n    global = {\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'paid',\n      },\n    };\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload) => {\n  if (!global.premiumModal) return undefined;\n  const { isClosed } = payload || {};\n  return {\n    ...global,\n    premiumModal: {\n      ...global.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  };\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload) => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload) => {\n  const { forUserId } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: result.promo.currency,\n      monthlyAmount: result.promo.monthlyAmount,\n    },\n  });\n});\n\naddActionHandler('closeGiftPremiumModal', (global) => {\n  setGlobal({\n    ...global,\n    giftPremiumModal: { isOpen: false },\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport type { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport type { ApiChat } from '../../api/types';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport type { ApiAppConfig } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.find((l) => l.isUnread);\n\n        if (!unread) return undefined;\n\n        const reaction = unread?.reaction;\n\n        return [messageId, {\n          messageId,\n          reaction,\n        }];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      }\n\n      setGlobal(updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(update.message.id && update.message.hasUnreadMention && {\n          unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1,\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id],\n        }),\n      }));\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (isLocal && message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isLocal) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        setGlobal({\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        });\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, getGlobal());\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      setGlobal({\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      });\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n        actions.openPremiumModal({ isSuccess: true });\n      }\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n            isCallPanelVisible: undefined,\n            phoneCall: undefined,\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(getGlobal())!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { clearPayment } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { inputInvoice } = global.payment;\n      // On the production host, the payment frame receives a message with the payment event,\n      // after which the payment form closes. In other cases, the payment form must be closed manually.\n      if (!IS_PRODUCTION_HOST) {\n        global = clearPayment(global);\n      }\n\n      if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n        return !IS_PRODUCTION_HOST ? global : undefined;\n      }\n\n      return {\n        ...global,\n        payment: {\n          ...global.payment,\n          status: 'paid',\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <MenuItem\n              icon=\"permissions\"\n              onClick={handleChangelogClick}\n            >\n              Beta Changelog\n            </MenuItem>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={handleSwitchToLegacy}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder(FIRST_FOLDER_INDEX, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || isInAllChatsFolder) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div className=\"ChatFolders\">\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchQuery({ query: '' });\n      setGlobalSearchDate({ date: undefined });\n      setGlobalSearchChatId({ id: undefined });\n      resetChatCreation();\n      setTimeout(() => {\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const isChatOpen = Boolean(selectCurrentChat(global)?.id);\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n    showNotification,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const lang = useLang();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (shouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, shouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys({\n    'Mod+F': handleHotkeySearchClick,\n  });\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && !shouldSendJoinRequest && (canSubscribe || shouldJoinToSend) && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && shouldSendJoinRequest && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang('ChannelJoinRequest')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n    };\n  },\n)(HeaderActions));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  animationLevel: AnimationLevel;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n  animationLevel,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} animationLevel={animationLevel} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} animationLevel={animationLevel} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(GroupCallTopPane));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForAnimation?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  observeIntersectionForAnimation,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  memoFirstUnreadIdRef,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForAnimation);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isGift && 'premium-gift',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {isGift && renderGift()}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            tgsUrl={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// eslint-disable-next-line max-len\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const {\n    isLottie, stickerSetInfo, isVideo, hasEffect,\n  } = sticker;\n  const canDisplayVideo = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n\n  const previewMediaHash = isVideo && !canDisplayVideo && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useThumbnail(sticker);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !shouldLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (!isVideo || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isVideo, shouldPlay]);\n\n  useEffect(() => {\n    if (hasEffect && shouldPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, shouldPlayEffect, onPlayEffect, shouldPlay, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: openModal,\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? handleClick : undefined}>\n      {(!isMediaReady || (isVideo && !canDisplayVideo)) && (\n        <img\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isVideo && (\n        <img\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isVideo && canDisplayVideo && isMediaReady && (\n        <video\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          disablePictureInPicture\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          tgsUrl={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      {hasEffect && shouldLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport safePlay from '../../../util/safePlay';\nimport { getActions } from '../../../global';\nimport useMedia from '../../../hooks/useMedia';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\n\nconst SIZE = 104;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const style = `width: ${SIZE}px; height: ${SIZE}px;`;\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: SIZE,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: SIZE,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction,\n  ]);\n\n  return {\n    ref,\n    size: SIZE,\n    style,\n    handleClick,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          style={aspectRatio}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n          theme={theme}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (photoUrl) {\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank', 'noopener')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffect(() => {\n    if (shouldRenderText) return;\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (mapBlobUrl) {\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [isOwn, isInSelectMode, isSelected, theme, mapBlobUrl, shouldRenderText]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        width={DEFAULT_MAP_CONFIG.width}\n        height={DEFAULT_MAP_CONFIG.height}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport DotAnimation from '../../common/DotAnimation';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && !isProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReaction) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(\n    message,\n    highlight,\n    isEmojiOnlyMessage(customShape),\n    undefined,\n    undefined,\n    isProtected,\n    observeIntersectionForAnimatedStickers,\n  );\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n    const isAvatarPremium = avatarUser?.isPremium;\n\n    return (\n      <>\n        <Avatar\n          size=\"small\"\n          user={avatarUser}\n          chat={avatarChat}\n          text={hiddenName}\n          lastSyncTime={lastSyncTime}\n          onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n          observeIntersection={observeIntersectionForMedia}\n          animationLevel={animationLevel}\n          withVideo\n        />\n        {isAvatarPremium && <PremiumIcon className=\"chat-avatar-premium\" />}\n      </>\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            noUserColors={isOwn}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo, transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            observeIntersectionForAnimation={observeIntersectionForAnimatedStickers}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiBotInfo, ApiMessage, ApiRestrictionReason } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <video\n                  src={botInfoGifUrl}\n                  loop\n                  autoPlay\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 0) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n      const shouldShrink = width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE;\n\n      if (shouldShrink || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\nimport type { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments, isActive]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getActions();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({\n        chatId, username: usernameLowered, query, offset,\n      });\n    }\n  }, [isAllowed, usernameLowered, chatId, queryInlineBot, query, offset]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={onActivate}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((l) => {\n      l.style.stroke = color;\n      l.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = useCallback(() => {\n    unmarkForceOpen();\n    onClose();\n  }, [onClose, unmarkForceOpen]);\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    const textEntities = message?.content.text?.entities;\n    if (!message || !isForwarding || !textEntities?.length || !noAuthors || isCurrentUserPremium) return message;\n\n    const filteredEntities = textEntities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: {\n          text: message.content.text!.text,\n          entities: filteredEntities,\n        },\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(false)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(true)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(false)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(true)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedText?: string;\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedText,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (newAttachments && newAttachments.some((l) => l.size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal],\n  );\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  useEffect(() => {\n    if (!html || editingMessage) return;\n    sendMessageAction({ type: 'typing' });\n  }, [editingMessage, html, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(isForCurrentMessageList, insertTextAndUpdateCursor, handleSetAttachments, editingMessage);\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, [handleSetAttachments]);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, captionLimit,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedText) {\n      setHtml(requestedText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedText, resetOpenChatWithDraft]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        captionLimit={captionLimit}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {(isChatWithBot && isBotMenuButtonCommands\n            && botCommands !== false && !activeVoiceRecording && !editingMessage) && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedText = selectRequestedText(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedText,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers?.length) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!,\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n\n    const html = getTextWithEntitiesAsHtml(editingDraft?.text.length ? editingDraft : editedMessage.content.text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, CLOSE_ANIMATION_DURATION);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      isGiftPremiumModalOpen: global.giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined),\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport type { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport {\n  NewChatMembersProgress, MediaViewerOrigin, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createMessageHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createMessageHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: GlobalState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_AMOUNT = IS_SINGLE_COLUMN_LAYOUT ? 50 : 100;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = DEFAULT_CONFETTI_AMOUNT) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiUser;\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n  requestedDraft?: GlobalState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useInterval(checkAppVersion, APP_OUTDATED_TIMEOUT_MS, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      checkAppVersion();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId && !isPhoneCallActive) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId, isPhoneCallActive]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      lastSyncTime,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall && selectUser(global, requestedAttachBotInstall.botId),\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isPremiumModalOpen: global.premiumModal?.isOpen,\n      limitReached: global.limitReachedModal?.limit,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      deleteFolderDialogId: global.deleteFolderDialogModal,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","premiumModal","promo","isOpen","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","text","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectScheduledMessages","selectChatMessages","result","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","reduce","acc","sender","selectSender","push","getSenderTitle","getMessageSummaryText","copyTextToClipboard","join","scrollOffset","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","order","isCustomEmoji","setIds","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","customEmojis","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","isHidden","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_STATE","isScreenLocked","invalidAttemptsCount","initApi","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","threadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","user","selectUser","isDeletedUser","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","poll","option","offset","shouldResetVoters","offsets","nextOffset","loadPollOptionResults","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmoji","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","unreadMentionsCount","fetchUnreadMentions","markMessagesRead","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","getActions","shortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","updateGifSearch","addedStickers","updateStickerSets","sets","loadStickerSets","added","addedCustomEmojis","loadCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","loadFavoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","loadFeaturedStickers","premiumGifts","cachedSet","selectStickerSet","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","openPremiumModal","className","newGifs","current","unfave","unfaveSticker","stickerSetId","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","searchWords","updateStickersForEmoji","loadStickersForEmoji","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","previousGlobal","loadTopMessages","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","addCallback","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","userOrChat","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","validateRequestedInfo","inputInvoice","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","getPaymentForm","form","invoice","setPaymentForm","step","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","queryId","resultId","scheduleDate","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","isWriteAllowed","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","requestInputInvoice","requestedInfoId","sendPaymentForm","save","selectStripeCredentials","selectSmartGlocalCredentials","isClosed","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","defaultReaction","reactors","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateReactions","currentReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","isLocal","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","r","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","reorderStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","needRating","ratingPhoneCall","isCallPanelVisible","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","maxFolders","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","classList","remove","useLayoutEffect","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","searchInput","handleHotkeySearchClick","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","Promise","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","voice","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","_","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","pinnedIds","isChatWithBot","isSelectModeActive","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","observeIntersection","observeIntersectionForAnimation","isEmbedded","appearanceOrder","isLastInList","memoFirstUnreadIdRef","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isVisible","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","role","months","AnimatedIconFromSticker","play","noLoop","nonInteractive","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","activeReaction","isInMeta","stopActiveReaction","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","tgsUrl","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","isLottie","isVideo","hasEffect","canDisplayVideo","IS_WEBM_SUPPORTED","isMemojiSticker","isPlayingEffect","startPlayingEffect","stopPlayingEffect","shouldLoad","mediaHash","mediaHashEffect","previewMediaHash","previewUrl","getMessageMediaFormat","effectBlobUrl","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","handleEffectEnded","safePlay","openModal","actionText","autoPlay","playsInline","disablePictureInPicture","loop","muted","isLowPriority","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","soundId","selectAnimatedEmojiSound","forceLoadPreview","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","Audio","once","performance","interactionMessageId","useAnimatedEmoji","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","noLoad","forcePreview","LIKE_STICKER_ID","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","withAspectRatio","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","aspectRatio","toFixed","ProgressSpinner","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","useVideoAutoPause","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","withVideo","formatPhoneNumberWithCode","getPercentage","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","amount","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","formatCurrency","VENUE_COLORS","entries","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","long","useTimeout","useInterval","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","videoClassName","renderIcon","recentReplierIds","recentRepliers","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","animatedEmoji","selectIsDownloading","actualThreadInfo","hasUnreadReaction","selectIsMessageProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","hiddenName","isAvatarPremium","PremiumIcon","renderAvatar","textContentClass","senderColor","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","markMentionsRead","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","mentionIds","reactionIds","entry","dataset","useBackgroundMode","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isBotInfoEmpty","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","shouldShrink","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","customIcon","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","files","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","noCompact","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","textEntities","filteredEntities","entity","ApiMessageEntityTypes","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedText","selectRequestedText","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","handleSetAttachments","newValue","newAttachments","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertHtmlAndUpdateCursor","newHtml","EDITABLE_INPUT_ID","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","insertTextAndUpdateCursor","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","getTextWithEntitiesAsHtml","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","getFilesFromDataTransferItems","all","file","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createMessageHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","DEFAULT_CONFETTI_AMOUNT","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","buildStyle","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","gameMessage","currentUser","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","closePaymentModal","clearReceipt","checkAppVersion","langCode","prevLastSyncTime","LOCATION_HASH","processDeepLink","decodeURIComponent","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","toggle","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}